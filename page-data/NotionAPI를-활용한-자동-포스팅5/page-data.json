{"componentChunkName":"component---src-templates-post-jsx","path":"/NotionAPI를-활용한-자동-포스팅5/","result":{"data":{"site":{"siteMetadata":{"title":"SharkniA"}},"markdownRemark":{"id":"e35e71eb-8137-5b3d-a497-988e2554e292","excerpt":"열정 추가로 더 진행해버렸다. 정말로 여기까지만 하려고 한다. 오랜만에 탄력 받으니 계속 하게 되어버렸다.  구현 내용 콜아웃, 디바이더, 인용문, 코드, 번호 매기기 , 글머리 기호 목록 컨버터를 추가했다.  콜아웃, 디바이더 html로 구현했다. 인용문은 hr 태그로 처리했으며, 콜아웃은 div 태그를 사용했다. 다만 콜아웃은 스타일 처리가 필요하다.…","html":"<h2>열정</h2>\n<p>추가로 더 진행해버렸다. 정말로 여기까지만 하려고 한다. 오랜만에 탄력 받으니 계속 하게 되어버렸다. </p>\n<h2>구현 내용</h2>\n<p>콜아웃, 디바이더, 인용문, 코드, 번호 매기기 , 글머리 기호 목록 컨버터를 추가했다. </p>\n<h3>콜아웃, 디바이더</h3>\n<p>html로 구현했다. 인용문은 hr 태그로 처리했으며, 콜아웃은 div 태그를 사용했다. 다만 콜아웃은 스타일 처리가 필요하다. 지금은 대충 태그만 만들어놨다. 따라서 이건 미완성이나 다름없다. </p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">private</span> <span class=\"token function\">convertCallout</span><span class=\"token punctuation\">(</span>calloutBlock<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> textContent <span class=\"token operator\">=</span> calloutBlock<span class=\"token punctuation\">.</span>rich_text\n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>textElement<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatTextElement</span><span class=\"token punctuation\">(</span>textElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> icon <span class=\"token operator\">=</span> calloutBlock<span class=\"token punctuation\">.</span>icon <span class=\"token operator\">?</span> calloutBlock<span class=\"token punctuation\">.</span>icon<span class=\"token punctuation\">.</span>emoji <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> calloutBlock<span class=\"token punctuation\">.</span>color\n            <span class=\"token operator\">?</span> calloutBlock<span class=\"token punctuation\">.</span>color\n            <span class=\"token operator\">:</span> <span class=\"token string\">'gray_background'</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;div class=\"callout </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>color<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\">\n        </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>icon<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> &lt;span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>textContent<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/span>\n    &lt;/div>\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token function\">convertDivider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;hr style=\"border: none; height: 1px; background-color: #e0e0e0; margin: 16px 0;\" />\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>인용문</h3>\n<p>인용문은 있을 줄 몰랐는데, 마크다운에서 지원을 해서 쉽게 구현했다. </p>\n<p>무엇은 지원하고 무엇은 지원안하고, 기준을 명확히 모르겠긴하다. </p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">private</span> <span class=\"token function\">convertQuote</span><span class=\"token punctuation\">(</span>quoteBlock<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> quoteText <span class=\"token operator\">=</span> quoteBlock<span class=\"token punctuation\">.</span>rich_text\n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>textElement<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatTextElement</span><span class=\"token punctuation\">(</span>textElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>quoteText<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>번호 매기기, 글머리 기호</h3>\n<p>둘은 구현이 상당히 비슷했다. 마치 세트와 같다. 이걸 구현할 때에, 들여쓰기를 하려면 계층 개념이 필요해서 전체적인 코드 수정이 한 번 이뤄졌다. </p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">private</span> <span class=\"token function\">formatListItemContent</span><span class=\"token punctuation\">(</span>listItemBlock<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> listItemBlock<span class=\"token punctuation\">.</span>rich_text\n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>textElement<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatTextElement</span><span class=\"token punctuation\">(</span>textElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">convertNumberedList</span><span class=\"token punctuation\">(</span>listItemBlock<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> listItemContent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatListItemContent</span><span class=\"token punctuation\">(</span>listItemBlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> indent <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>indentLevel <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>indent<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">1. </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>listItemContent<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">convertBulletedList</span><span class=\"token punctuation\">(</span>listItemBlock<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> listItemContent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatListItemContent</span><span class=\"token punctuation\">(</span>listItemBlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> indent <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>indentLevel <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>indent<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">- </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>listItemContent<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>띄어쓰기 네 번으로 계층을 구분한다. </p>\n<h3>코드</h3>\n<p>코드도 쉬웠다. 마크다운에서 지원하는 것은 기본적으로 구현이 쉽다. </p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">private</span> <span class=\"token function\">convertCode</span><span class=\"token punctuation\">(</span>codeBlock<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> codeText <span class=\"token operator\">=</span> codeBlock<span class=\"token punctuation\">.</span>rich_text\n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>textElement<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> textElement<span class=\"token punctuation\">.</span>plain_text<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> language <span class=\"token operator\">=</span> codeBlock<span class=\"token punctuation\">.</span>language <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\\`\\`\\`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>language<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>codeText<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n\\`\\`\\`\\n\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>to_do</h3>\n<p>to_do도 간단하게 구현했다. 마크다운에서는 체크박스인데, 노션에서는 할 일 목록이다.. 그래서 체크박스를 체크하면 스타일이 추가되는데.. 이것까진 따로 구현하지 않았다. </p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">private</span> <span class=\"token function\">convertToDo</span><span class=\"token punctuation\">(</span>toDoBlock<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> quoteText <span class=\"token operator\">=</span> toDoBlock<span class=\"token punctuation\">.</span>rich_text\n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>textElement<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatTextElement</span><span class=\"token punctuation\">(</span>textElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> pre <span class=\"token operator\">=</span> <span class=\"token string\">'- [ ]'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>toDoBlock<span class=\"token punctuation\">.</span>checked <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            pre <span class=\"token operator\">=</span> <span class=\"token string\">'- [x]'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pre<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>quoteText<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>정리</h2>\n<h3>작업 완료 블록</h3>\n<p>일단 1차적으로 작업이 완료되었으며, 완료된 지원하는 블록 타입은 다음과 같다. </p>\n<ul>\n<li>paragraph</li>\n<li>heading<em>1, heading</em>2, heading_3</li>\n<li>bookmark</li>\n<li>link<em>to</em>page</li>\n<li>image</li>\n<li>callout</li>\n<li>divider</li>\n<li>quote</li>\n<li>code</li>\n<li>numbered<em>list</em>item</li>\n<li>bulleted<em>list</em>item</li>\n<li>to_do</li>\n</ul>\n<h3>작업 예정 블록</h3>\n<h4>table, table-row</h4>\n<p>꼭 필요해보이지만, 구현을 위해서는 현재 구현된 블록의 재귀 호출 구조를 바꿔야 한다. 상대적으로 까다로워 오늘 작업하진 않겠다. </p>\n<h3>작업 미정 블록</h3>\n<h4>column (n개의 열로 구성된 블록 생성)</h4>\n<p>가로로 여러 블록을 놓는 기능이다. 굳이 필요한가? 싶기도 하고 또 구현이 꽤나 까다로워 보인다. 다만 table, table-row를 작업할 때에 호출 구조를 잘 짜놓는다면 또 별 노력 없이 잘 될 것 같기도 한데, 마크다운에 원래 가로를 나누는 기능이 있는지는 또 모르겠다. 그래서 미정이다. </p>\n<h4>미디어 관련 블록</h4>\n<p>미디어 관련 기능도 지금보니 노션에 있다. 이건.. 할만하지 않을까? 고려해보겠다. 아직 자세히 살펴보지 못했다. </p>\n<h3>미구현 확정 블록</h3>\n<h4>토글</h4>\n<p>토글은 미구현 확정이다. 토글은 마크다운에서 지원하지 않고, 만약 하려면 부트스트랩의 collapse 같은 기능을 직접 구현해야 할 것 같다. 이건 쉽지 않다. </p>\n<h4>임베드 관련 블록</h4>\n<p>기각이다. 블로그 글에 임베드는 쓰지 말자. </p>\n<h4>고급 블록</h4>\n<p>지금보니 토글도 고급에 들어있다. 마크다운 기본 기능이 아닌 것들은 기본적으로 구현에 한계가 있다. 다시 보니 column도 고급에 있다. </p>\n<p>나중에 추후 시간이 되면 만들만한 것들은 한 번 고려해보겠다. </p>\n<h4>데이터베이스 관련 블록</h4>\n<p>웹사이트에 넣을 수 있는 기능이 (아마도) 아니다. 기각이다. </p>\n<h2>다음 작업 예정은?</h2>\n<p>이제 배포 자동화를 목표로 해야 한다. 자동화까지 해둬야, 이 프로젝트를 만든 목적 달성이 아닐까? 얼른 자동화도 하고 싶다..</p>\n<p>자동화의 자세한 로직은 다음번에 설계 하도록 하겠다.. </p>","frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(5)","date":"January 28, 2024","update":"February 02, 2024","tags":["Blogging","Notion-API","Typescript","Hobby"],"series":"GitHub Pages와 Notion API 연동"},"fields":{"slug":"/NotionAPI를-활용한-자동-포스팅5/","readingTime":{"minutes":5.925}}},"seriesList":{"edges":[{"node":{"id":"cf782302-a534-55e4-9607-9ba22069ba6d","fields":{"slug":"/Notion-API1/"},"frontmatter":{"title":"Notion API(1)"}}},{"node":{"id":"3a290e6d-b6bb-5ad3-b93c-646dd6597d8b","fields":{"slug":"/githubio를-이용한-블로그/"},"frontmatter":{"title":"github.io를 이용한 블로그"}}},{"node":{"id":"96b463ae-d648-5426-a574-faa73a2daf4d","fields":{"slug":"/githubio-자동배포/"},"frontmatter":{"title":"github.io 자동배포"}}},{"node":{"id":"a38352f2-1a18-57cb-988e-c685e392175d","fields":{"slug":"/Notion-API2/"},"frontmatter":{"title":"Notion API(2)"}}},{"node":{"id":"66bbbd52-9b37-5eea-9c37-1de08fc608f7","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅"}}},{"node":{"id":"ea79504b-7f4b-5185-a504-018bbe1ca05d","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅2/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(2)"}}},{"node":{"id":"613f37b4-2fd9-5208-9d9d-16174c9d3180","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅3/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(3)"}}},{"node":{"id":"81e99043-692d-5112-8edc-5d43774968a0","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅4/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(4)"}}},{"node":{"id":"e35e71eb-8137-5b3d-a497-988e2554e292","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅5/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(5)"}}},{"node":{"id":"ee22bc46-0f12-56ec-9e8a-8cd3b3fe4451","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅6/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(6)"}}},{"node":{"id":"814f77a8-f23a-5f6b-9562-cbab62343d0f","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅7/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(7)"}}},{"node":{"id":"b61dee75-4a5f-5a2d-a782-a5dfc8b65fb6","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅8/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(8)"}}},{"node":{"id":"ff71aedb-1637-5d59-812e-38da46dbaf77","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅9/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(9)"}}},{"node":{"id":"11e3ce39-5b5d-5164-8a1d-f034614e34d4","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅10/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(10)"}}},{"node":{"id":"8aeec2a3-8c02-5cf6-81c2-d98f08e09fd3","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅11/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(11)"}}},{"node":{"id":"f9e23df5-9e1f-5d92-b4b7-0f37d54560f2","fields":{"slug":"/Readme/"},"frontmatter":{"title":"Readme"}}}]},"previous":{"fields":{"slug":"/우분투-용량-관리/"},"frontmatter":{"title":"우분투 용량 관리"}},"next":{"fields":{"slug":"/Union-Type/"},"frontmatter":{"title":"Union Type"}}},"pageContext":{"id":"e35e71eb-8137-5b3d-a497-988e2554e292","series":"GitHub Pages와 Notion API 연동","previousPostId":"c2c531ea-1018-5ad8-87b3-c1c027e8f2ee","nextPostId":"cf792859-1afc-5118-bf50-0752527a6569"}},"staticQueryHashes":[],"slicesMap":{}}