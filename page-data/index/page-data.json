{"componentChunkName":"component---src-pages-index-jsx","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"SharkniA"}},"allMarkdownRemark":{"group":[{"fieldValue":"ASP.Net","totalCount":3},{"fieldValue":"AWS","totalCount":10},{"fieldValue":"BackEnd","totalCount":16},{"fieldValue":"Blogging","totalCount":19},{"fieldValue":"DDD","totalCount":1},{"fieldValue":"DRF","totalCount":2},{"fieldValue":"DataBase","totalCount":22},{"fieldValue":"DataBase Design","totalCount":1},{"fieldValue":"Deno","totalCount":2},{"fieldValue":"DesignPattern","totalCount":3},{"fieldValue":"DevOps","totalCount":2},{"fieldValue":"Django","totalCount":14},{"fieldValue":"Docker","totalCount":4},{"fieldValue":"Docker-compose","totalCount":2},{"fieldValue":"ETC","totalCount":8},{"fieldValue":"Edge-Function","totalCount":1},{"fieldValue":"FastAPI","totalCount":12},{"fieldValue":"GitHub","totalCount":5},{"fieldValue":"Github Actions","totalCount":4},{"fieldValue":"Go","totalCount":2},{"fieldValue":"GraphQL","totalCount":2},{"fieldValue":"Hobby","totalCount":21},{"fieldValue":"Homebrew","totalCount":2},{"fieldValue":"Javascript","totalCount":7},{"fieldValue":"Kotlin","totalCount":4},{"fieldValue":"NAS","totalCount":1},{"fieldValue":"NestJS","totalCount":3},{"fieldValue":"Network","totalCount":1},{"fieldValue":"Next.js","totalCount":3},{"fieldValue":"Nginx","totalCount":2},{"fieldValue":"Node.js","totalCount":2},{"fieldValue":"Notion-API","totalCount":14},{"fieldValue":"OAuth2","totalCount":2},{"fieldValue":"ORM","totalCount":3},{"fieldValue":"Odroid","totalCount":2},{"fieldValue":"Postgresql","totalCount":16},{"fieldValue":"Pyenv","totalCount":3},{"fieldValue":"Python","totalCount":47},{"fieldValue":"RLS","totalCount":2},{"fieldValue":"React Native","totalCount":3},{"fieldValue":"SQLModel","totalCount":1},{"fieldValue":"Spring","totalCount":6},{"fieldValue":"SqlAlchemy","totalCount":9},{"fieldValue":"Supabase","totalCount":11},{"fieldValue":"TDD","totalCount":2},{"fieldValue":"TestCode","totalCount":1},{"fieldValue":"Typescript","totalCount":19},{"fieldValue":"Ubuntu","totalCount":3},{"fieldValue":"VSCode","totalCount":2},{"fieldValue":"WebRTC","totalCount":1},{"fieldValue":"Work","totalCount":12},{"fieldValue":"iOS","totalCount":1}],"nodes":[{"excerpt":"서론 uv는 빠른 설치, 간편한 사용 등 많은 장점이 있지만 아쉽게도 패키지 업데이트 및 설치 시에 최신 버전을 우선적으로 설치하며, poetry 같은 세밀한 의존성 검사를 수행하지 않습니다. 지금 새로 시작하는 프로젝트로 최신 버전의 라이브러리를 사용할 것이라면 별 문제가 되지 않겠지만 레거시 프로젝트를 업데이트 할 때에는 uv를 사용하기가 쉽지 않습니…","fields":{"slug":"/poetry를-활용해-안정적으로-package-업데이트하기/"},"frontmatter":{"date":"February 18, 2025","update":"Feb 19, 2025","title":"poetry를 활용해 안정적으로 package 업데이트하기","description":"poetry를 활용해 안정적으로 package 업데이트하기","tags":["Python","BackEnd"]}},{"excerpt":"서론 이번에는 리버스 프록시를 구현해보고, 동적으로 환경변수를 삽입하는 방법에 대해 알아보겠습니다.  리버스 프록시의 구현 기본 리버스 프록시 설정 가장 간단한 리버스 프록시 설정은 클라이언트의 요청을 특정 백엔드 서버로 전달하는 것입니다. 다음은 http://localhost:80으로 들어오는 요청을 내부의 백엔드 서버(8080 포트)로 프록시하는 설정…","fields":{"slug":"/Nginx를-활용한-Reverse-Proxy-구현2/"},"frontmatter":{"date":"February 17, 2025","update":"Feb 17, 2025","title":"Nginx를 활용한 Reverse Proxy 구현(2)","description":"리버스 프록시 구현하기","tags":["BackEnd","Nginx"]}},{"excerpt":"서론 현재 근무하는 회사의 API Gateway 역할을 하는 서버의 유지보수/고도화 업무를 맡게 됐습니다. API Gateway 역할을 하고 있다고는 하지만 사실은 아직 아주 일부의 기능만 구현된 상태로, 일단은 각 마이크로서비스의 리버스 프록시 역할을 할 수 있도록 Nginx를 활용하려고 합니다.  이번 글에서는 프록시와 리버스 프록시의 개념부터 Ngi…","fields":{"slug":"/Nginx를-활용한-Reverse-Proxy-구현1/"},"frontmatter":{"date":"February 14, 2025","update":"Feb 17, 2025","title":"Nginx를 활용한 Reverse Proxy 구현(1)","description":"프록시와 리버스 프록시, 설치와 설정","tags":["BackEnd","Nginx"]}},{"excerpt":"소개 uv는 Rust로 작성된 초고속 Python 패키지 및 프로젝트 관리 툴입니다. uv의 가장 메인 페이지에서도 속도를 크게 강조하고 있습니다. 실제로 사용해보니 진짜 빠릅니다.  파이썬 개발환경을 위한 도구는 상당히 파편화되어있습니다. 가상 환경을 만드는 방법도 여러가지이며, 파이썬 버전관리를 하는 방법도 여러가지입니다.  그런데 uv를 사용하면 p…","fields":{"slug":"/uv-간단-소개-및-적용/"},"frontmatter":{"date":"February 10, 2025","update":"Feb 18, 2025","title":"uv 간단 소개 및 적용","description":"uv 간단 소개 및 적용","tags":["Python","BackEnd"]}},{"excerpt":"서론 오늘은 요 며칠 화제의 챗지피티 대안 모델 Deepseek R1을 로컬에 간단하게 설치해보겠습니다. 중국에 정보가 넘어간다, 중국 공산당 관련 내용은 검열된다, 접속이 안된다, 이런 저런 말이 많지만 로컬에 설치하면 문제 없습니다.  권장 사양 이 모델의 특징은 기존 모델 대비 엄청난 저사양에서도 돌릴 수 있다는 것이 특징입니다. 저는 안해봤지만 아…","fields":{"slug":"/Deepseek-R1-로컬-설치/"},"frontmatter":{"date":"January 29, 2025","update":"Jan 31, 2025","title":"Deepseek R1 로컬 설치","description":"Deepseek R1 로컬에 설치해보기","tags":["Hobby"]}},{"excerpt":"서론 지난 시간에 이어 GraphQL에 대해 좀 더 자세히 알아보는 시간을 가지려고 합니다.  GraphQL의 장점과 현실적인 문제 GraphQL은 기존 REST API의 단점을 보완하고, 클라이언트가 원하는 데이터만 요청할 수 있는 유연한 구조를 제공합니다. 하지만 현실적으로 적용할 때는 여러 문제를 고려해야 합니다. GraphQL의 이점 유연한 데이터…","fields":{"slug":"/GraphQL과-Django-2/"},"frontmatter":{"date":"January 24, 2025","update":"Jan 24, 2025","title":"GraphQL과 Django 2","description":"GraphQL 고급 활용법","tags":["GraphQL","Django","Python"]}},{"excerpt":"Elastic APM Elastic APM (Application Performance Monitoring)은 Elastic Stack(ELK 스택)의 일부로, 애플리케이션의 성능을 모니터링하고 성능 병목 현상과 오류를 추적하는 도구입니다. 주로 백엔드 서비스, 데이터베이스 쿼리, HTTP 요청, 비동기 작업 등의 성능을 분석하는 데 사용됩니다. ELK …","fields":{"slug":"/Elastic-APM/"},"frontmatter":{"date":"January 23, 2025","update":"Jan 23, 2025","title":"Elastic APM","description":"Elastic APM","tags":["BackEnd","DevOps"]}},{"excerpt":"서론 현재 회사에서 MSA 형태의 백엔드 서비스를 운용중입니다. 다만 지금은 프론트에서 API Gateway 없이 각 마이크로서비스를 직접 호출하고 있습니다.  엔드포인트 통합 작업을 위해 인프라를 고민중입니다. 유지보수가 편해야 하며, 작업공수가 가장 적게 들어가는 방법을 선택하려고 합니다.  또한 비용의 추가는 가능한 한 줄이려고 합니다.  AWS A…","fields":{"slug":"/우리-팀에-맞는-API-Gateway-선택하기/"},"frontmatter":{"date":"January 22, 2025","update":"Jan 23, 2025","title":"우리 팀에 맞는 API Gateway 선택하기","description":"우리 팀에 맞는 API Gateway 선택하기: 비용, 성능, 유지보수 고려","tags":["AWS","DevOps","BackEnd"]}},{"excerpt":"GraphQL의 특징 클라이언트 주도형 데이터 요청 REST API는 백엔드가 정해준 엔드포인트를 그대로 사용해야 하지만, GraphQL은 클라이언트가 원하는 데이터만 요청할 수 있습니다.  REST API 요청 예시 (불필요한 데이터 포함) GraphQL 요청 예시 (원하는 데이터만 선택) REST API는 필요하지 않은 데이터까지 포함되지만, Grap…","fields":{"slug":"/GraphQL과-Django/"},"frontmatter":{"date":"January 20, 2025","update":"Jan 21, 2025","title":"GraphQL과 Django","description":"GraphQL과 Django","tags":["Python","Django","GraphQL"]}},{"excerpt":"React Native Paper 소개 는 React Native로 앱을 개발할 때 Material Design 가이드를 준수하는 UI 컴포넌트 라이브러리입니다. Google의 Material Design 철학을 기반으로 한 다양한 UI 요소를 제공합니다. React Native를 처음 사용하거나, 디자인을 크게 신경 쓰지 않고 표준적인 UI를 빠르게 구…","fields":{"slug":"/React-Native-Navigation과-Paper-기본부터-사용하기/"},"frontmatter":{"date":"January 13, 2025","update":"Jan 12, 2025","title":"React Native Navigation과 Paper: 기본부터 사용하기","description":"React Native Navigation과 Paper: 기본부터 사용하기","tags":["React Native","Typescript"]}},{"excerpt":"React Native 환경 설정 현재 맥북을 사용하고 있고, IDE는 VScode를 사용하고 있습니다. NVM은 이미 설치되어 있다고 가정하겠습니다.  먼저, iOS 개발을 위한 환경을 확인하세요. Xcode 설치 App Store에서 Xcode를 설치하세요. 설치 후 Xcode를 실행하고, \"Preferences > Locations\"에서 Comman…","fields":{"slug":"/React-Native-설치/"},"frontmatter":{"date":"January 12, 2025","update":"Jan 12, 2025","title":"React Native 설치","description":"React Native 설치","tags":["React Native","iOS","Node.js","Typescript"]}},{"excerpt":"일반적인 React Native 프로젝트의 구조 각 디렉토리의 역할  이미지, 폰트 등 정적 파일을 저장. 예: 아이콘, 배경 이미지, 로고 등.  재사용 가능한 UI 요소를 정의. 예: 버튼, 텍스트 입력 필드, 카드, 모달 등.  화면 간의 라우팅과 네비게이션 설정. 예: React Navigation을 사용하여 스택, 탭, 드로어 네비게이션 설정. …","fields":{"slug":"/React-Native의-프로젝트-구조와-화면-이동-구현하기/"},"frontmatter":{"date":"January 12, 2025","update":"Jan 12, 2025","title":"React Native의 프로젝트 구조와 화면 이동 구현하기","description":"React Native의 프로젝트 구조와 화면 이동 구현하기","tags":["React Native","Typescript"]}},{"excerpt":"서론 오랜만에 타입스크립트를 다루고 있습니다. 특히 코딩 테스트를 위해서 다루고 있는데, 오랜만에 타입스크립트의 배열을 다루다보니 얕은 복사와 깊은 복사에 관한 문제가 발생했습니다. 예전에 공부했던 내용이지만 정리한 적은 없는 것 같아 한 번 정리하고 넘어가려고 합니다.  TypeScript의 값 분류 TypeScript(JavaScript)는 \"객체 기…","fields":{"slug":"/Typescript의-얇은-복사-vs-깊은-복사/"},"frontmatter":{"date":"January 09, 2025","update":"Jan 08, 2025","title":"Typescript의 얇은 복사 vs 깊은 복사","description":"Typescript의 얇은 복사 vs 깊은 복사","tags":["Typescript"]}},{"excerpt":"의존성 간 관계 자동 해결 FastAPI는 의존성 간의 관계를 자동으로 해결해 주기 때문에 개발자는 복잡한 로직을 작성하지 않아도 FastAPI가 필요한 리소스를 적절히 연결해줍니다.  FastAPI 의존성 주입의 기본 개념 의존성은 서로 다른 의존성을 참조할 수 있으며, FastAPI는 이를 바탕으로 의존성 그래프를 생성해 자동으로 해결합니다. : DB…","fields":{"slug":"/FastAPI-의존성-주입의-심화-활용법과-주의점/"},"frontmatter":{"date":"December 30, 2024","update":"Dec 30, 2024","title":"FastAPI 의존성 주입의 심화 활용법과 주의점","description":"FastAPI 의존성 주입의 심화 활용법과 주의점","tags":["FastAPI","Python"]}},{"excerpt":"서론 이번에 FastAPI 과제를 진행하면서 아무생각없이 기존에 짜던대로 코드를 짜고 피드백을 받은 후, 제가 의존성 주입을 할 때 Depends()만 사용하는 방식이 구식 방법이라는 것을 뒤늦게 알게 됐습니다. 심지어 공식문서에도 권장하지 않는 방법이라고 적혀있었습니다.  아니 정말? 이라는 생각이 들어서 공식문서의 커밋 년도까지 확인을 했는데, 공식 …","fields":{"slug":"/FastAPI의-의존성-주입Dependency-Injection/"},"frontmatter":{"date":"December 26, 2024","update":"Dec 30, 2024","title":"FastAPI의 의존성 주입(Dependency Injection)","description":"FastAPI의 의존성 주입과 친해지기","tags":["FastAPI","Python"]}},{"excerpt":"서론 테스트 코드를 작성하다 보면 을 자주 사용하게 됩니다. 특히 의 는 외부 의존성을 대체하고 독립적인 테스트를 작성할 때 매우 유용합니다. 그런데 최근에 테스트를 작성하면서 Mocking을 적용했음에도 불구하고 원래 함수가 호출되는 문제를 겪었습니다. 결론부터 말하면, Mocking할 함수의 \"사용 경로\"와 \"선언 경로\"를 혼동한 것이 문제였습니다. …","fields":{"slug":"/Python-Mocking시-patch-경로-문제-해결하기/"},"frontmatter":{"date":"December 19, 2024","update":"Dec 26, 2024","title":"Python Mocking시 patch 경로 문제 해결하기","description":"Mocking과 경로 문제: 함수 선언 위치 vs 사용 위치","tags":["Python","FastAPI","TestCode"]}},{"excerpt":"문제 상황 최근 Python 프로젝트에서 Docker를 사용해 컨테이너를 실행하면서 환경 변수가 제대로 반영되지 않는 문제를 겪었습니다. Docker의  옵션을 사용해 환경 변수를 전달했지만, 코드 실행 결과는 Docker가 전달한 값이 아닌 로컬  파일의 값이 사용되는 이상한 상황이 발생했습니다. Docker Run에서 사용한 .env 파일에서 를 설정…","fields":{"slug":"/Docker에서-Python-환경-변수-관리/"},"frontmatter":{"date":"November 29, 2024","update":"Dec 02, 2024","title":"Docker에서 Python 환경 변수 관리","description":"load_dotenv와 Docker 환경 변수 충돌 해결","tags":["Python","Docker"]}},{"excerpt":"서론 최근 ODROID SBC(Single Board Computer)를 사용하는 환경에서 루트 파일 시스템()이 읽기 전용(read-only) 모드로 전환되는 문제를 경험했습니다. 이는 특정 상황에서 발생할 수 있는 디스크 오류로, SD 카드나 eMMC와 같은 저장 장치를 사용하는 시스템에서 흔히 발생할 수 있습니다. 이번 글에서는 문제 발생 원인과 증…","fields":{"slug":"/SD-카드-기반-디스크-오류-및-해결-과정/"},"frontmatter":{"date":"November 27, 2024","update":"Dec 02, 2024","title":"SD 카드 기반 디스크 오류 및 해결 과정","description":"SD 카드 기반 디스크 오류 및 해결 과정","tags":["Odroid","Ubuntu"]}},{"excerpt":"서론: 이란? startapp은 Django에서 새로운 앱(application)을 생성하기 위한 명령어입니다. Django는 프로젝트를 기능별로 나누어 독립적인 모듈(앱)로 구성하는 것을 권장합니다. startapp 명령어를 사용하면 앱을 생성하고, 필요한 기본 디렉토리와 파일 구조를 자동으로 생성해줍니다. Django의 이란? Django 앱은 특정 …","fields":{"slug":"/Django의-startapp/"},"frontmatter":{"date":"November 20, 2024","update":"Nov 20, 2024","title":"Django의 startapp","description":"Django의 startapp","tags":["Django","Python","BackEnd"]}},{"excerpt":"서론 Django의 설치가 끝났고 DB 연결까지 완료됐다면 Django의 관리자 페이지를 활성화 할 수 있습니다.  Django 관리자 페이지 소개 Django 관리자 페이지는 웹 애플리케이션에서 데이터를 손쉽게 관리할 수 있도록 제공되는 자동화된 백오피스입니다. Django에서 기본적으로 제공하며, 별도의 코딩 없이도 모델 데이터를 추가, 수정, 삭제할…","fields":{"slug":"/Django의-관리자-페이지-만들기/"},"frontmatter":{"date":"October 29, 2024","update":"Nov 01, 2024","title":"Django의 관리자 페이지 만들기","description":"Django의 관리자 페이지 만들기","tags":["Django","Python"]}},{"excerpt":"ORM(Object-Relational Mapping) 생각해보니 ORM을 사용한 적이 많았는데, 이게 어떤 것인지 명확하게 짚고 넘어갔던 적은 없던 것 같습니다. Spring의 ORM을 써보려고 하니, 이번 기회에 한 번 정리하고 넘어가려고 합니다.  ORM의 정의 ORM은 객체 지향 프로그래밍(OOP) 언어에서 사용하는 객체와 관계형 데이터베이스의 테…","fields":{"slug":"/JPAJava-Persistence-API-1/"},"frontmatter":{"date":"September 05, 2024","update":"Sep 05, 2024","title":"JPA(Java Persistence API) (1)","description":"Spring의 ORM을 사용하자","tags":["Spring","DataBase","Kotlin","ORM"]}},{"excerpt":"서론 해당 프로젝트의 역할은 Rest API Backend 서버입니다. 본연의 역할을 위해 먼저 간단하게 Get 메소드에 대한 요청을 처리하는 컨트롤러를 정의해보겠습니다.  user 컨트롤러 프로젝트 구조는 DDD를 따라 정의할 예정입니다. 따라서 먼저 user 패키지를 정의하고, 그 안에  파일을 생성해주고 다음과 같이 GET 요청을 처리할 컨트롤러를 …","fields":{"slug":"/Kotlin에서의-GET-API-선언-후-Swagger-설정-하기/"},"frontmatter":{"date":"September 05, 2024","update":"Sep 05, 2024","title":"Kotlin에서의 GET API 선언 후 Swagger 설정 하기","description":"Kotlin에서의 GET API 선언 후 Swagger 설정 하기","tags":["Kotlin","Spring"]}},{"excerpt":"N+1 문제란? N+1 문제는 주로 ORM(Object-Relational Mapping)과 관련된 성능 문제입니다. 이를 간단하게 설명하자면, N+1 문제는 하나의 쿼리를 실행한 후, 그 결과에 대해 추가적으로 N개의 쿼리를 실행하게 되어, 총 N+1번의 쿼리가 발생하는 상황을 말합니다. Spring에서는 JPA나 Hibernate를 사용할 때 이 문제…","fields":{"slug":"/N1-문제/"},"frontmatter":{"date":"September 05, 2024","update":"Sep 05, 2024","title":"N+1 문제","description":"N+1 문제 부수기","tags":["DataBase","Spring","ORM"]}},{"excerpt":"서론 지난 시간의 N+1 문제 소개에 이어 이번 시간에는 N+1 문제를 해결하기 위해서는 어떤 방법들이 있는지 알아보려고 합니다.  레포지토리에 User와 Order를 조인해서 가져오는 메소드와 User만 가져오는 메소드를 따로 만들기 이렇게 하면, 상황에 맞게 필요한 데이터만 가져올 수 있고, 불필요한 쿼리나 데이터 로드를 방지할 수 있습니다. 예시 레…","fields":{"slug":"/N1-문제의-해결방법/"},"frontmatter":{"date":"September 05, 2024","update":"Sep 05, 2024","title":"N+1 문제의 해결방법","description":"N+1 문제 풀어버리기","tags":["DataBase","Spring","ORM"]}},{"excerpt":"서론 JVM(Java Virtual Machine) 버전을 관리할 수 있는 도구로는 SDKMAN!이라는 것이 있습니다. SDKMAN!은 다양한 JVM 버전뿐만 아니라 여러 Java 관련 도구(예: Maven, Gradle, Scala 등)도 쉽게 설치하고 관리할 수 있게 도와줍니다. 설치 터미널에서 다음 명령어를 실행하여 SDKMAN!을 설치합니다. 설치…","fields":{"slug":"/SDKMAN과-bootRun/"},"frontmatter":{"date":"September 04, 2024","update":"Sep 04, 2024","title":"SDKMAN!과 bootRun","description":"SDKMAN!으로 JDK 버전 관리하고, bootRun으로 실행해보기","tags":["Kotlin","Spring"]}},{"excerpt":"서론 한국에서 자바와 스프링은 대세중의 대세입니다.  구인풀도 넓고, 자료도 많고, 검증된 안정성으로 다른 언어로 시작한 회사들도 스프링 기반으로 백엔드 서버를 바꾸는 일도 많습니다.  처음에 자바는 뭔가 C랑 다르게 생기고 그래서 거부감도 많았었는데, 최근 이것저것 다른 언어나 프레임워크를 써보다 보니 상대적으로 낯을 덜 가리게 되어서 한 번 그냥 써볼…","fields":{"slug":"/KotlinSpring-프로젝트-설치-및-실행/"},"frontmatter":{"date":"September 03, 2024","update":"Sep 03, 2024","title":"Kotlin/Spring 프로젝트 설치 및 실행","description":"Kotlin/Spring 프로젝트 설치 및 실행","tags":["Kotlin","Spring"]}},{"excerpt":"서론 컨테이너 기술이 점점 더 중요한 개발 도구로 자리 잡으면서, Docker 이미지를 효율적으로 관리할 수 있는 레지스트리 선택도 중요해졌습니다. 많은 개발자들이 Docker Hub와 GitHub Container Registry(GHCR) 사이에서 어떤 서비스를 사용할지 고민하는데요, 각 서비스의 특징과 차이점을 살펴보고, 개인 프로젝트에 어떤 레지스…","fields":{"slug":"/GitHub-Container-Registry-vs-Docker-Hub/"},"frontmatter":{"date":"August 22, 2024","update":"Sep 03, 2024","title":"GitHub Container Registry vs Docker Hub","description":"GitHub Container Registry(GHCR) vs Docker Hub: 개인 용도에 적합한 컨테이너 레지스트리는?","tags":["GitHub","Docker"]}},{"excerpt":"서론 NAS 서버의 영상을 보는 방법엔 여러가지가 있습니다. 그 중 LG WebOS에서는 서버에 직접적으로 연결할만한 충분한 방법을 제공하지 않기 때문에 어떤 방법이 좋을까 잠깐 고민하다가 DLNA가 떠올랐습니다.  서버 설정도 간단하기 때문에 짧게 하고 넘어가려고 합니다.  DLNA 장점 호환성: DLNA는 다양한 제조사에서 채택한 표준 프로토콜로, 서…","fields":{"slug":"/Ubuntu-DLNA-서버-설정/"},"frontmatter":{"date":"August 18, 2024","update":"Aug 17, 2024","title":"Ubuntu DLNA 서버 설정","description":"Ubuntu DLNA 서버 설정","tags":["NAS","Odroid","Ubuntu"]}},{"excerpt":"Tailwind CSS 소개 Tailwind CSS는 유틸리티 기반의 CSS 프레임워크로, 미리 정의된 클래스를 사용하여 빠르고 쉽게 스타일링할 수 있게 해줍니다. 전통적인 CSS 프레임워크와 달리, Tailwind는 사용자가 CSS를 작성하는 방식에 혁신을 가져왔습니다. 각 클래스는 단일 속성과 값을 가지고 있어, 더 나은 유지보수성과 높은 재사용성을 …","fields":{"slug":"/Install-Tailwind-CSS-with-Nextjs/"},"frontmatter":{"date":"August 04, 2024","update":"Sep 03, 2024","title":"Install Tailwind CSS with Next.js","description":"Install Tailwind CSS with Next.js","tags":["Next.js"]}},{"excerpt":"Fixture Fixture는 테스트 실행 전에 필요한 상태나 객체를 설정하는 데 사용됩니다. 주로 데이터베이스 초기화, 파일 시스템 설정, 특정 객체 생성 등의 작업을 포함합니다. 예제 위의 예제는 Django 테스트 환경에서 실제로  객체를 데이터베이스에 생성합니다. 이 fixture는 테스트 함수가 실행될 때마다 호출되며, 테스트가 끝나면 데이터베이…","fields":{"slug":"/Mock과-Stub-Fixture/"},"frontmatter":{"date":"June 20, 2024","update":"Sep 03, 2024","title":"Mock과 Stub, Fixture","description":"Mock과 Stub, Fixture","tags":["TDD","Django","Python"]}},{"excerpt":"서론 Django REST Framework(DRF)를 사용하다 보면, 모델에 없는 가상의 필드를 시리얼라이저에 추가해야 할 때가 있습니다. 이때 유용하게 사용할 수 있는 것이 입니다. 를 통해 동적으로 계산된 값을 시리얼라이저에 포함할 수 있습니다. 이번 글에서는 이를 구현하는 방법을 간단히 살펴보겠습니다. 예제: 가상의 필드 추가하기 예를 들어,  모…","fields":{"slug":"/Django-REST-Framework에서-가상-필드-추가하기/"},"frontmatter":{"date":"June 17, 2024","update":"Sep 03, 2024","title":"Django REST Framework에서 가상 필드 추가하기","description":"Django REST Framework에서 가상 필드 추가하기: SerializerMethodField","tags":["Django","DRF","Python"]}},{"excerpt":"서론 이번 글에서는 AWS에서 VPC를 생성하고, EC2 인스턴스를 설정하며, 터미널과 Visual Studio Code를 통해 원격으로 연결하는 과정을 기록하려고 합니다.  VPC 생성 1. VPC 생성 AWS Management Console에 로그인합니다. 상단 검색창에 \"VPC\"를 입력하고 VPC 대시보드로 이동합니다. \"VPCs\"를 선택한 후 \"…","fields":{"slug":"/AWS에서-EC2-인스턴스-생성-및-Visual-Studio-Code로-원격-연결하기/"},"frontmatter":{"date":"June 13, 2024","update":"Jun 13, 2024","title":"AWS에서 EC2 인스턴스 생성 및 Visual Studio Code로 원격 연결하기","description":"AWS에서 EC2 인스턴스 생성 및 Visual Studio Code로 원격 연결하기","tags":["AWS","BackEnd","VSCode"]}},{"excerpt":"서론 ngrok을 이용하는 등 로컬에서만 개발을 하다 테스트 서버를 꾸며야 하는 때가 왔습니다. AWS를 이용하기로 했고, 그 과정을 진행했던 기록을 남기려고 합니다.  외부에서는 API Gateway에만 접근이 가능하며, DB나 백엔드 서버는 직접 접근이 불가능하도록 구현하려고 합니다.  VPC (Virtual Private Cloud) VPC 생성 V…","fields":{"slug":"/AWS-활용-테스트-서버-구현-1/"},"frontmatter":{"date":"June 09, 2024","update":"Jun 09, 2024","title":"AWS 활용 테스트 서버 구현 (1)","description":"AWS 활용 테스트 서버 구현 1. AWS Server Infra 구성","tags":["AWS","BackEnd"]}},{"excerpt":"DRF에서 다양한 HTTP 메서드(, , , , )를 처리하기 위한 여러 가지 API 뷰 클래스들을 소개하고, 이를 효과적으로 사용하는 방법을 안내하겠습니다. 또한, 를 활용하여 직접 뷰를 구현하는 방법도 다룹니다. DRF의 기본 뷰 클래스들을 활용한 구현 공통 속성들에 대한 설명 serializer_class 는 뷰에서 사용할 시리얼라이저 클래스를 지정…","fields":{"slug":"/DRF의-API-View/"},"frontmatter":{"date":"June 05, 2024","update":"Jun 05, 2024","title":"DRF의 API View","description":"Django REST Framework API 뷰에 대한 정리","tags":["Django","Python","DRF"]}},{"excerpt":"서론 Django에서 사용자 인증 시스템을 커스터마이징해야 하는 경우가 있습니다. 이때 Django는 두 가지 주요 클래스(와 )를 제공하여 커스텀 유저 모델을 쉽게 만들 수 있게 해줍니다.  이 글에서는 이 두 클래스의 차이점과 각각의 사용 예시를 소개하겠습니다. Django 사용자 인증 시스템 기본 모델과 필드 Django는 기본적으로  모델을 제공하…","fields":{"slug":"/Django의-사용자-인증-시스템-커스터마이징/"},"frontmatter":{"date":"June 03, 2024","update":"Jun 05, 2024","title":"Django의 사용자 인증 시스템 커스터마이징","description":"AbstractUser와 AbstractBaseUser ","tags":["Django","Python"]}},{"excerpt":"Install 맥에서는 다음의 명령어로 간단하게 Go를 설치할 수 있습니다.  설치 확인 다음의 명령어로 설치를 확인합니다.  또는 다음의 명령어로 설치를 확인합니다.  Go의 Workspace Go의 워크스페이스와 프로젝트 관리는 다른 언어와 비교했을 때 독특한 면이 있습니다. Go의 워크스페이스는 Go 언어에서 소스 코드와 컴파일된 바이너리, 패키지를…","fields":{"slug":"/Go-입문/"},"frontmatter":{"date":"May 28, 2024","update":"May 28, 2024","title":"Go 입문","description":"MAC Go 설치","tags":["Go","OAuth2"]}},{"excerpt":"필요 라이브러리 설치 Go 프로젝트를 생성한 후 OAuth 인증을 위한 라이브러리를 설치해야 합니다.  Server.go 작성 기본 그리고 나서 해당 파일을 run 합니다.  이 이후에 http://localhost:9096/token?grant_type=client_credentials&client_id=000000&client_secret=999999…","fields":{"slug":"/Go를-활용한-OAuth-20-구현/"},"frontmatter":{"date":"May 28, 2024","update":"Sep 03, 2024","title":"Go를 활용한 OAuth 2.0 구현","description":"Go를 활용한 OAuth 2.0 구현","tags":["Go","OAuth2"]}},{"excerpt":"Serializers란? serializers는 DRF(Django REST Framwork)의 일부입니다. serializers는 Django 모델 인스턴스나 쿼리셋을 JSON과 같은 네이티브 데이터 타입으로 변환해주고(직렬화), 역으로 JSON 데이터를 Django 모델 인스턴스로 변환(역직렬화)하는 역할을 합니다. 왜 사용하나요? serializer…","fields":{"slug":"/Django의-Serializers/"},"frontmatter":{"date":"May 23, 2024","update":"May 23, 2024","title":"Django의 Serializers","description":"Django의 Serializers","tags":["Django","Python"]}},{"excerpt":"서론 Django Rest Framework(DRF)는 Django에서 RESTful API를 쉽게 구축할 수 있도록 도와주는 도구입니다. JWT(Json Web Token)는 클라이언트와 서버 간의 인증을 안전하게 수행하기 위한 방법으로 널리 사용됩니다. 이번에는 DRF에서 JWT를 이용한 사용자 인증을 구현하고, 이를 위한 커스텀 퍼미션 클래스를 작성…","fields":{"slug":"/Django-Rest-Framework에서-JWT를-이용한-사용자-인증-구현/"},"frontmatter":{"date":"May 22, 2024","update":"May 22, 2024","title":"Django Rest Framework에서 JWT를 이용한 사용자 인증 구현","description":"JWT 인증을 이용한 Cumstom permission 클래스","tags":["Supabase","Django","Python"]}},{"excerpt":"소개 Swagger란? Swagger는 RESTful API를 설계, 빌드, 문서화 및 소비하는 데 사용되는 오픈 소스 도구 모음입니다. Swagger는 API를 시각적으로 확인하고 테스트할 수 있는 인터페이스를 제공하여 개발자와 사용자 간의 소통을 용이하게 합니다. Swagger의 주요 기능: API 문서화: 자동으로 API 문서를 생성하여 API 사용…","fields":{"slug":"/Django-프로젝트에-Swagger-설정하기/"},"frontmatter":{"date":"May 21, 2024","update":"May 21, 2024","title":"Django 프로젝트에 Swagger 설정하기","description":"Django 프로젝트에 Swagger 설정하기","tags":["Django","Python"]}},{"excerpt":"서론 갈 길이 멀지만 하나씩 해보겠습니다. 만들고자 하는 프로젝트는 있지만 아직 확정은 나지 않았고, 어떤 프로젝트를 하게 되더라도 로그인은 필수이지 않을까 싶습니다.  기술스택? Supabase를 한동안 사용해본 결과 큰 규모의 프로젝트에는 맞지 않는다고 뼈저리게 느꼈습니다.  그런가하면, 소규모 1인 프로젝트에는 더할나위없이 적합하다고 느꼈습니다. 가…","fields":{"slug":"/Nextjs-Supabase-회원가입-구현/"},"frontmatter":{"date":"May 20, 2024","update":"Sep 03, 2024","title":"Next.js + Supabase 회원가입 구현","description":"Next.js + Supabase를 활용해 회원가입 페이지를 만들자","tags":["Supabase","Next.js"]}},{"excerpt":"지난 시간에는 django를 설치하고 DB 세팅까지 완료했습니다. 이번에는 소셜 로그인 기능을 붙여보겠습니다.  django-allauth vs dj-rest-auth 와 는 모두 Django 애플리케이션에서 인증 및 사용자 관리를 쉽게 할 수 있도록 도와주는 패키지입니다. 하지만 이 두 패키지는 약간 다른 목적과 사용 사례를 가지고 있습니다. 둘을 비교…","fields":{"slug":"/Django-Discord-소셜-회원가입-및-로그인-구현/"},"frontmatter":{"date":"May 17, 2024","update":"May 17, 2024","title":"Django Discord 소셜 회원가입 및 로그인 구현","description":"django-allauth 를 활용한 Discord 회원가입/로그인 구현","tags":["Django","BackEnd","Python"]}},{"excerpt":"서론 로컬에서 개발할 때, 종종 외부에서 로컬 서버에 접근해야 하는 상황이 발생합니다. 예를 들어, 웹훅(Webhook)을 테스트하거나, 클라이언트에게 데모를 보여주기 위해 로컬 서버를 공개해야 할 때가 있습니다. 이러한 상황에서 매우 유용한 도구가 바로 ngrok입니다. ngrok 소개 ngrok은 로컬에서 실행 중인 서버를 공용 인터넷에 노출시켜주는 …","fields":{"slug":"/ngrok-로컬-서버를-쉽게-공개하는-도구/"},"frontmatter":{"date":"May 14, 2024","update":"May 14, 2024","title":"ngrok: 로컬 서버를 쉽게 공개하는 도구","description":"ngrok을 활용한 로컬 서버 공개","tags":["BackEnd"]}},{"excerpt":"Next.js? 개요 Next.js는 React 기반의 프레임워크로, 웹사이트와 애플리케이션을 구축하기 위해 사용됩니다. 서버 사이드 렌더링(SSR), 정적 사이트 생성(SSG), 그리고 클라이언트 사이드 렌더링을 지원하며, 개발자가 사용하기 편리한 기능들을 제공합니다. 특징 및 장점 파일 기반 라우팅:  디렉토리 내의 파일 구조를 기반으로 자동 라우팅을…","fields":{"slug":"/Nextjs-소개와-설치-간단-예제/"},"frontmatter":{"date":"May 13, 2024","update":"May 14, 2024","title":"Next.js 소개와 설치, 간단 예제","description":"Next.js 소개와 설치, 간단 예제","tags":["Next.js","Javascript"]}},{"excerpt":"이전 포스팅에서 간단하게 django 프로젝트를 설치하고 구동해봤습니다. 이번 시간에는 postgresql과 django 프로젝트를 연결해보려고 합니다.  .env 파일 작성 DB 설정을 위한 환경변수 파일을 작성합니다.  해당 파일을 docker-compose.yml 파일과 같은 곳에 위치시킵니다.  이 파일은 보안에 유의하여, git과 같은 곳에 올라…","fields":{"slug":"/docker-compose를-활용한-postgresql과-django-커넥션-만들기/"},"frontmatter":{"date":"May 11, 2024","update":"May 13, 2024","title":"docker-compose를 활용한 postgresql과 django 커넥션 만들기","description":"docker-compose를 활용한 postgresql과 django 커넥션 만들기","tags":["Django","Docker","Docker-compose","Postgresql"]}},{"excerpt":"설치할 버전의 선택 오늘 날짜(2024년 5월 10일) 기준 Django 4.2 버전이 가장 최신의 LTS 버전이며, 해당 Django 버전에서는 4.2.8 버전부터 파이썬 3.12를 지원하며 그 미만 버전은 파이썬 3.11까지 지원합니다.  따라서 저는 파이썬 3.11, Django 4.2.13 버전을 설치하겠습니다.  파이썬 설치 장고를 설치할 디렉토…","fields":{"slug":"/Django-설치/"},"frontmatter":{"date":"May 10, 2024","update":"May 21, 2024","title":"Django 설치","description":"Django를 맥에 설치하자","tags":["Django","Python","Pyenv","Docker","Docker-compose"]}},{"excerpt":"문제 이 링크를 참조해 Pyenv를 설치했습니다. 이후, python 3.11버전을 추가로 설치하고 새로 시작하는 프로젝트에서 python 3.11 버전을 사용하기 위해 pyenv local 명령어를 사용했는데, python 버전이 바뀌지 않은 것을 확인했습니다.  원인 이는  셈(shim) 경로 설정이 제대로 되어 있지 않아서 발생하는 문제입니다. 해결…","fields":{"slug":"/Pyenv-local-실행을-했는데-파이썬-버전이-바뀌지-않는다/"},"frontmatter":{"date":"May 09, 2024","update":"May 10, 2024","title":"Pyenv local 실행을 했는데 파이썬 버전이 바뀌지 않는다","description":"맥북에서 pyenv local 명령어가 먹히지 않는 경우를 해결해보자","tags":["Pyenv","Homebrew","Python"]}},{"excerpt":"서론 이제 작업이 막바지에 이르러 실서버를 꾸며야 하는 날이 왔습니다. 로컬에서 명령어를 입력해서 실서버에 배포를 하는 일은 절대로 사양이기 때문에 Bitbucket의 Pipelines를 활용해서 태그가 달리는 순간 자동적으로 Supabase 내용이 실서버에 적용되도록 CI/CD 워크플로우를 구축하려고 합니다.  이 포스팅은 해당 과정을 기록한 것입니다.…","fields":{"slug":"/Supabase를-위한-Bitbucket-Pipelines-CICD-워크플로우-구축하기/"},"frontmatter":{"date":"April 29, 2024","update":"Apr 29, 2024","title":"Supabase를 위한 Bitbucket Pipelines CI/CD 워크플로우 구축하기","description":"Supabase 실서버에 편하게 배포하기","tags":["Supabase"]}},{"excerpt":"서론 Supabase에서 특정 edge function이나 db function, 또는 뷰나 테이블의 CRUD에 있어서도 계정에 따라 다른 결과물을 내놔야 하는 경우가 아주 많습니다. 쉽게 예를 들자면 특정 유저에게 내부 재화를 부여하는 기능이 관리자 계정은 가능하지만 일반 사용자 계정은 불가능해야 하는 경우가 있을 수 있겠네요.  User 데이터가 저장…","fields":{"slug":"/supabase-custom-claims를-활용한-관리자-권한-관리/"},"frontmatter":{"date":"April 25, 2024","update":"Jan 08, 2025","title":"supabase-custom-claims를 활용한 관리자 권한 관리","description":"supabase-custom-claims를 활용해 일반 유저와 관리자의 권한을 구분하여 관리하자. ","tags":["Supabase","Postgresql"]}},{"excerpt":"Supabase 특성 상, RLS와 뷰를 적극 활용해야 합니다. 그런데 create or replace 명령어를 사용해서 뷰를 생성하면 뷰의 생성에 사용된 테이블들의 RLS가 적용되지 않는 문제가 있습니다. \n예를 들어,  purchases등의 테이블에 RLS를 설정해서 본인의 것만 조회를 할 수 있도록 설정해두고 뷰를 생성한다면,  를 사용해서 조회한다…","fields":{"slug":"/Supabase에서-뷰에도-RLS-적용하기/"},"frontmatter":{"date":"April 12, 2024","update":"Apr 12, 2024","title":"Supabase에서 뷰에도 RLS 적용하기","description":"security invoker 옵션을 활용해 뷰에 RLS 적용","tags":["Supabase","Postgresql","DataBase"]}},{"excerpt":"정답 URL 객체를 활용하면 됩니다.  자세히! Deno는 웹 표준 API를 지원하기 때문에,   객체와  객체를 제공합니다. 이를 활용하면 쿼리 스트링을 쉽게 다룰 수 있습니다. 먼저  객체에서 URL을 가져온 후,  객체를 생성하고 이 객체의  프로퍼티를 통해 쿼리 파라미터에 접근할 수 있습니다.아래는 GET 방식으로 넘어온 쿼리 스트링 변수를 어떻게…","fields":{"slug":"/Deno에서-URL의-쿼리-스트링Query-String-다루기/"},"frontmatter":{"date":"April 02, 2024","update":"Apr 02, 2024","title":" Deno에서 URL의 쿼리 스트링(Query String) 다루기","description":"Deno에서 GET 요청으로 넘어온 쿼리 스트링 변수를 처리하기","tags":["Deno","Typescript"]}},{"excerpt":"1. 조인 postgresql RLS에서 A테이블은 모두가 읽을 수 있고, B테이블은 나만 읽을 수 있다고 합시다. \n그럼 A와 B를 조인해서 만들어진 뷰는 어떻게 될까요? 내가 아닌 유저가 이 뷰를 읽으려고 시도하면 어떻게 될까요?  정답 이 사용자는 A 테이블에는 접근할 수 있지만, B 테이블에 대한 접근 권한이 없습니다. 따라서, RLS 정책에 의해…","fields":{"slug":"/RLS에-대한-궁금증-모음/"},"frontmatter":{"date":"March 21, 2024","update":"Mar 22, 2024","title":"RLS에 대한 궁금증 모음","description":"작업하면서 생긴 RLS에 대한 QnA","tags":["RLS","Postgresql"]}},{"excerpt":"서론 PostgreSQL에서는 관계형 데이터를 JSON 형식으로 변환하거나 JSON 데이터를 관계형 테이블로 저장할 수 있는 다양한 기능을 제공합니다. 이번 글에서는 JSON 데이터를 생성하고 다루는 세 가지 유용한 함수인 , , 에 대해 알아보겠습니다. row_to_json  함수는 관계형 데이터의 단일 행(row)을 JSON 객체로 변환합니다. 이 함…","fields":{"slug":"/PostgreSQL에서-테이블-로우를-JSON으로-변환하기/"},"frontmatter":{"date":"March 20, 2024","update":"Mar 20, 2024","title":"PostgreSQL에서 테이블 로우를 JSON으로 변환하기","description":"PostgreSQL에서 JSON 데이터 다루기 - row_to_json, json_agg, json_build_object","tags":["Postgresql"]}},{"excerpt":"서론 PostgreSQL의 ENUM 타입은 유연성이 제한적이라는 단점이 있습니다. 일단 생성되면 ENUM 타입에 값을 직접 추가하거나 삭제할 수 없기 때문입니다. 하지만 간단한 우회 방법을 통해 ENUM 타입 값 삭제가 가능합니다. 이 포스트에서는 기존에 정의된 ENUM 타입에서 하나의 값만 삭제하는 방법에 대해 알아보겠습니다. 시나리오 기존에 정의된  …","fields":{"slug":"/Postgresql에서-ENUM-타입에서-값-삭제하기/"},"frontmatter":{"date":"March 19, 2024","update":"Mar 20, 2024","title":"Postgresql에서 ENUM 타입에서 값 삭제하기","description":"Postgresql에서 ENUM 타입에서 값 삭제하기","tags":["Postgresql"]}},{"excerpt":"JSON 데이터와 스키마 유효성 검사의 필요성 데이터베이스에서 데이터 무결성을 보장하기 위해서는 데이터에 대한 제약조건을 정의하고 검사하는 것이 필수적입니다. 관계형 데이터베이스에서는 테이블 스키마를 정의하여 열 데이터 타입, NOT NULL 제약조건 등을 설정할 수 있습니다. 하지만 JSON 데이터 타입의 경우, 스키마가 존재하지 않기 때문에 유연성은 …","fields":{"slug":"/postgresql의-pg_jsonschema/"},"frontmatter":{"date":"March 18, 2024","update":"Mar 18, 2024","title":"postgresql의 pg_jsonschema","description":"postgresql의 pg_jsonschema를 활용한 JSONB에 대한 유효성 검증","tags":["Postgresql","Supabase"]}},{"excerpt":"서론 어떤 함수를 만들었었는지, 어떤 트리거를 만들었었는지가 관리하기가 어렵다고 느낍니다. 현재 개발 상황 상 따로 백엔드 서버도 없는 상황이어서 쿼리문을 관리하려고 합니다.  Supabase Dashboard에서도 확인이 가능하긴 하지만, 제한적인 부분이 있어 깔끔하게 쿼리문으로 확인하는 방법을 기록해두려고 합니다.  Function 생성 쿼리문 확인하…","fields":{"slug":"/Postgresql-Function-Trigger-생성-쿼리문-확인하기/"},"frontmatter":{"date":"March 15, 2024","update":"Mar 15, 2024","title":"Postgresql Function, Trigger 생성 쿼리문 확인하기","description":"쿼리문 날려서 함수, 트리거 생성 쿼리문 확인하기","tags":["Postgresql"]}},{"excerpt":"서론 supabase에는 DB 마이그레이션 기능이 있어, 연결된 프로젝트의 스키마를 그대로 로컬 supabase DB에 적용할 수 있습니다. 버전관리도 가능합니다.  근데 이것도 완벽한 기능은 아니어서, 꼬일때가 있고 그래서 다시 마이그레이션을 실행해야 할 수도 있습니다. 그 방법을 기록합니다.  마이그레이션 기록 초기화하기 로컬 마이그레이션 파일 삭제 …","fields":{"slug":"/Supabase-CLI-db-migration-이력-초기화하기/"},"frontmatter":{"date":"March 14, 2024","update":"Mar 14, 2024","title":"Supabase CLI db migration 이력 초기화하기","description":"Supabase CLI db migration 이력 초기화하기","tags":["Supabase"]}},{"excerpt":"개요 Edge function을 열심히 개발하고 있었는데, 코드 자동완성이나 줄바꿈이나 이런것들이 적용되지 않았습니다.  Edge function은 Deno를 사용하는데, 이것때문인 것 같긴 했는데 짬이 안나 살펴보지 못하다가 이제서야 살펴보니, 뭔가를 하지 않아서였습니다.  Deno 설치 정말 당연하게도 Deno를 먼저 설치해야 합니다. 이런것도 하지 …","fields":{"slug":"/Supabase-EdgeFunction---Deno-개발환경-꾸미기/"},"frontmatter":{"date":"March 14, 2024","update":"Mar 14, 2024","title":"Supabase EdgeFunction  - Deno 개발환경 꾸미기","description":"로컬에서 Deno 개발하기","tags":["Supabase","Deno"]}},{"excerpt":"개요 지난 시간에 Egde Function을 만들어서 배포하는 것까지 진행해봤습니다. 하지만 저기서 끝낸다면 로컬에 DB가 없으므로 DB에 접근을 필요로 하는 Edge Function은 로컬에서의 정상적인 테스트가 불가능합니다.  따라서 이번에는 테스트에 필요한 환경을 구성하는 방법을 정리합니다.  사전 작업 테스트를 한다는 것은 실제 개발 또는 Prod…","fields":{"slug":"/Supabase-Local-개발-환경-꾸미기---DB-세팅/"},"frontmatter":{"date":"March 13, 2024","update":"Mar 14, 2024","title":"Supabase Local 개발 환경 꾸미기 - DB 세팅","description":"테스트를 위한 supabase local 개발 환경 db 세팅","tags":["Supabase"]}},{"excerpt":"Row-Level Security (RLS) 란? Row-Level Security (RLS)는 데이터베이스 시스템에서 제공하는 보안 기능 중 하나로, 데이터베이스의 각 행(row)에 대한 접근을 제어하는 세밀한 방법을 제공합니다. RLS를 사용하면 데이터베이스 사용자나 응용 프로그램이 특정 조건을 만족하는 행에만 접근하거나 그러한 행을 변경할 수 있도록…","fields":{"slug":"/Supabase와-Row-Level-Security-RLS/"},"frontmatter":{"date":"March 12, 2024","update":"Mar 12, 2024","title":"Supabase와 Row-Level Security (RLS) ","description":"Supabase의 RLS에 대해 알아보자","tags":["Supabase","Postgresql","RLS"]}},{"excerpt":"Supabase CLI 설치 우선 supabase CLI를 설치해야 합니다.  제대로 설치가 되면 다음의 명령어를 통해 설치가 된 것을 확인합니다.  login을 진행합니다. 터미널의 다음의 명령어를 입력한 후, 로그인은 웹에서 이뤄집니다.  Project를 연결해야 합니다. 먼저 다음의 명령어를 통해 프로젝트 리스트를 확인합니다.  다음과 같은 결과가 …","fields":{"slug":"/Supabase-Local-Dev-환경-꾸미기/"},"frontmatter":{"date":"March 11, 2024","update":"Mar 12, 2024","title":"Supabase Local Dev 환경 꾸미기","description":"Edge Function 개발을 위한 Supabase Local Dev 환경 만들기","tags":["Supabase","Postgresql","Edge-Function"]}},{"excerpt":"unique_constraints란? 테이블의 특정 컬럼 또는 컬럼의 조합에 대해 유니크 제약조건을 설정하는 데 사용됩니다. 이는 데이터베이스에 동일한 값을 가진 중복 레코드가 없도록 보장하는 데 유용합니다. unique_constraints 설정하기 클래스 내부에  속성을 정의하고, unique_constraints 튜플을 이 속성에 할당합니다. 이 튜…","fields":{"slug":"/SQLModel에서-unique_constraints-설정하기/"},"frontmatter":{"date":"March 05, 2024","update":"Mar 05, 2024","title":"SQLModel에서 unique_constraints 설정하기","description":"SQLModel에서 unique_constraints 설정하기(Feat. SQLAlchemy)","tags":["SqlAlchemy","SQLModel"]}},{"excerpt":"서론 JSON은 이제는 아주 익숙한 데이터 저장 형식입니다. Postgresql에서는 JSON 타입을 지원해 이 데이터를 효과적으로 다룰 수 있도록 하는데, JSONB 타입을 또 지원합니다.  이 두 타입은 저장 방식과 처리 속도, 기능성 측면에서 차이가 있습니다. 각각의 타입은 특정 사용 사례에 더 적합할 수 있으므로, 차이점을 이해하는 것이 중요합니다…","fields":{"slug":"/Postgresql의-JSON과-JSONB/"},"frontmatter":{"date":"March 04, 2024","update":"Mar 04, 2024","title":"Postgresql의 JSON과 JSONB","description":"JSON과 JSONB는 어떻게 다를까? ","tags":["Postgresql"]}},{"excerpt":"Geocoder와 Reverse Geocoder란? 간단하게 이야기해 주소로 위도와 경도를 얻거나(Geocoder) 위도와 경도로 주소를 얻는(Reverse Geocoder) 것을 의미합니다.  왜 필요할까? 주소로는 서로간의 거리를 계산하기 힘들기 떄문에 변환이 필요하고, 위도와 경도는 사람이 읽기 힘들기 때문에 다시 주소로 변환이 필요합니다. 이 때 …","fields":{"slug":"/Geocoder와-Reverse-Geocoder/"},"frontmatter":{"date":"February 27, 2024","update":"Feb 27, 2024","title":"Geocoder와 Reverse Geocoder","description":"Geocoder에 대한 조사","tags":["ETC","Python"]}},{"excerpt":"서론 새로운 프로젝트의 백엔드 언어가 파이썬으로 확정되었습니다. 파이썬 버전은 추후 머신러닝 사용을 감안하여 현재 라이브러리와 가장 호환성이 좋을 것으로 생각되는 3.9버전을 사용하려고 합니다. 다만, 파이썬 3.9는 그다지 최신 버전은 아닙니다. 최근에 타입스크립트를 만지면서 nvm을 좋게 사용한 경험도 있고, 이번에 내친김에 파이썬에서도 버전관리를 해…","fields":{"slug":"/Apple-Silicon과-pyenv/"},"frontmatter":{"date":"February 26, 2024","update":"Mar 03, 2024","title":"Apple Silicon과 pyenv","description":"pyenv를 통한 python 개발환경 설정","tags":["Python","Homebrew","Pyenv"]}},{"excerpt":"서론 FastAPI-Python을 새로운 프로젝트의 백엔드 언어로 선정하였습니다. 프로젝트 초기화 과정을 기록합니다.  poetry 환경 구성은 이미 끝났다고 가정하고, 해당 라이브러리를 활용하여 환경을 꾸미겠습니다.  필수라고 생각되는 라이브러리 설치 FastAPI FastAPI를 웹 프레임워크로 선정하였으니, 이를 먼저 설치해줍니다.  Uvicorn …","fields":{"slug":"/FastAPI-프로젝트의-시작/"},"frontmatter":{"date":"February 26, 2024","update":"Feb 26, 2024","title":"FastAPI 프로젝트의 시작","description":"FastAPI의 프로젝트 초기 설정","tags":["FastAPI","Python"]}},{"excerpt":"서론 작업을 하다보면 항상 뭔가 찾게 됩니다. 좀 더 편한 것, 좀 덜 귀찮은 것, 좀 더 새로운 것 등등..  항상 새로운 것에서 자극을 많이 받는 것 같습니다. 매일 하던 것만 하면 재미 없잖아요.  접한지는 조금 되었지만 사용하지 않고 있었는데, 이제 새롭게 사용해보려고 하는 건 arc 브라우저 입니다.  업무용으로는 크롬을 사용하고, 개인용 윈도우…","fields":{"slug":"/arc-browser/"},"frontmatter":{"date":"February 22, 2024","update":"Feb 25, 2024","title":"arc browser","description":"arc 브라우저에서 내가 사용하는 기능","tags":["ETC"]}},{"excerpt":"서론 새로 개발할 서비스의 DB 설계 작업이 시작되었습니다. DB를 설계하는 것은 많이 해본 일이어서 저도 모르게 무결성이나 관계성 등 중요한 내용을 챙기고 있지만, 이런것들은 말로 설명하라고 하면 어려울 때도 많습니다.  그래서 이번 기회에 해당 개념들에 대해서 기회가 날때마다 정리하는 습관을 들이려고 합니다.  DB가 문서도 없고, 관계성도 정의되어 …","fields":{"slug":"/식별-관계와-비식별-관계-그리고-CASCADE-옵션의-이해/"},"frontmatter":{"date":"February 18, 2024","update":"Feb 18, 2024","title":"식별 관계와 비식별 관계, 그리고 CASCADE 옵션의 이해","description":"데이터베이스 설계 - 관계 유형의 정의와 식별/비식별 관계로 무결성 관리하는 방법","tags":["DataBase","DataBase Design"]}},{"excerpt":"서론 현재 개발을 준비중인 서비스에는 인앱결제가 포함되어있습니다. 여태까지 운이 좋았던 것인지, 운이 나빴던 것인지 아무튼 인앱결제를 구현한 적이 없어서 구현 전에 역시 미리 서치해두려고 합니다.  개발 예정 서비스에서는 내부 재화를 인앱결제로 구매하고 기타 아이템들은 내부 재화로 구매할 수 있게 만들 예정입니다. 내부 재화 구매 프로세스 구매는 결국 어…","fields":{"slug":"/인앱결제에서-백엔드는-무엇을-준비해야-할까/"},"frontmatter":{"date":"February 17, 2024","update":"Feb 18, 2024","title":"인앱결제에서 백엔드는 무엇을 준비해야 할까?","description":"인앱결제를 준비하는 백엔드 개발자의 태도","tags":["ETC"]}},{"excerpt":"서론 DB 설계를 하다보면 index를 정의해야 하는 경우가 많습니다. 만약 Sqlalchemy의 create_all() 메소드를 사용해 테이블을 생성하고 있다면 Sqlalchemy에서 동시에 index를 정의할 수 있습니다.  Sqlalchemy에서의 인덱스 정의 단일 컬럼 인덱스 Sqlalchemy의  객체를 생성할 때에   플래그를 설정하면 간단하게…","fields":{"slug":"/Sqlalchemy의-index/"},"frontmatter":{"date":"February 13, 2024","update":"Feb 14, 2024","title":"Sqlalchemy의 index","description":"Sqlalchemy에서 index 선언하기","tags":["SqlAlchemy"]}},{"excerpt":"서론 새로운 서비스의 개발을 준비하고 있습니다. 그 서비스를 위해서 위치 기반 검색이 가능해야 할 것으로 생각하고 있습니다.  아직 해당 기능에 대해서 구현 해본 적도 없고, 어떻게 구현 해야 할지 감도 잡히지 않아 아직 개발단계에는 이르지 않았지만 이에 대해 미리 서치한 내용을 기록하려고 합니다.  Postgresql을 사용하게 될 것이므로, Postg…","fields":{"slug":"/위치-기반-검색-기능의-구현/"},"frontmatter":{"date":"February 13, 2024","update":"Feb 14, 2024","title":"위치 기반 검색 기능의 구현","description":"위치 기반 검색 기능과 Postgresql의 공간 인덱스","tags":["Postgresql","DataBase","ETC"]}},{"excerpt":"서론 현재 회사에서는 Alembic 같은 데이터마이그레이션 도구를 사용하고 있지 않습니다. 따라서 스키마 버전 관리등은 별도로 하고 있지 않으며, 다만 SqlAlchemy의 create_all() 메소드를 이용해 프로덕션 환경이나 dev 환경에서의 테이블의 누락은 안생기게끔만 간단하게 관리하고 있습니다.  이 방법은 테이블의 수정 또는 삭제를 반영할 수는…","fields":{"slug":"/SQLAlchemy-create_all-메소드로-데이터베이스-테이블-자동-생성하기/"},"frontmatter":{"date":"February 12, 2024","update":"Feb 14, 2024","title":"SQLAlchemy create_all() 메소드로 데이터베이스 테이블 자동 생성하기","description":"Sqlalchemy의 create_all()를 활용한 테이블 생성","tags":["SqlAlchemy","Work","Python","DataBase","FastAPI"]}},{"excerpt":"nolog 소개 많은 개발자들이 한 번쯤은 \"나만의 블로그를 운영해야지\"라고 생각해본 적이 있을 겁니다. 하지만 실제로 블로그를 시작하고 유지하는 일은 상당한 도전과제입니다. 공부하고 개발하는 것만으로도 바쁜데, 여기에 글을 쓰고 관리하는 일은 때때로, 아니 항상 부담스러운 일입니다. 노션으로 공부를 하는 개발자가 있습니다. 일을 하면서일수도 있고, 따로…","fields":{"slug":"/Readme/"},"frontmatter":{"date":"February 08, 2024","update":"Feb 08, 2024","title":"Readme","description":"noblog 완성","tags":["Notion-API","Typescript","Blogging","Hobby"]}},{"excerpt":"서론 개인적으로 이것저것 만들려고 시도한 적은 많았는데, 완성한 적은 이번이 처음입니다. (nolog 프로젝트) 라이센스도 등록해보고 릴리즈도 처음 해봤는데, 릴리즈를 하려다 보니 다음과 같은 문구가 있었습니다.  “버전 관리” 에 대해서는 추상적으로 알고 있었지만, 시맨틱 버전 관리라는 개념의 이름에 대해서는 처음 알았습니다. 부끄러운 일이기도 하고, …","fields":{"slug":"/시맨틱-버전-관리/"},"frontmatter":{"date":"February 08, 2024","update":"Feb 08, 2024","title":"시맨틱 버전 관리","description":"시맨틱 버전 관리(Semantic Versioning, SemVer)","tags":["ETC"]}},{"excerpt":"서론 파이썬에서 잠깐 테스트코드를 맛본적이 있습니다. 문법 자체는 조금 복잡했지만(익숙하지 않았지만) 설치 자체는 그다지 어렵지 않았던 것으로 기억합니다.  그래서 타입스크립트에서도 그럴 줄 알았습니다.  설치 일단, 설치가 한 두개가 아니었습니다. 또, 설치하는 패키지를 package.json 파일의 devDependencies에 추가했습니다. 이는 개…","fields":{"slug":"/Typescript의-Testcode-맛보기/"},"frontmatter":{"date":"February 06, 2024","update":"Feb 06, 2024","title":"Typescript의 Testcode 맛보기","description":"타입스크립트에서 테스트코드를 맛보았습니다. ","tags":["Typescript"]}},{"excerpt":"목적 깃허브 액션에서 Job들은 서로 다른 독립된 환경을 가집니다. 각 작업은 독립적으로 실행되며, 각기 다른 러너 환경에서 다른 버전의 도구를 사용할 수 있습니다. 이것은 아주 강점이지만, 때로 다른 Job끼리 변수를 공유해야 하는 상황이 있을 수 있습니다.  이때 사용하는 것이 Output 입니다.  선언하기 기본적인 선언 방법은  의 꼴입니다. 예전…","fields":{"slug":"/Github-Action-Output/"},"frontmatter":{"date":"February 04, 2024","update":"Feb 04, 2024","title":"Github Action Output","description":"Github Action Output을 사용하여 job 사이 변수 공유하기","tags":["Github Actions"]}},{"excerpt":"소개 Github Actions는 깃허브에서 직접 소프트웨어 개발 워크플로우를 자동화할 수 있는 기능입니다. 개발자는 이를 사용해서 소프트웨어 빌드, 테스트, 배포와 같은 과정을 자동화하여 특정 트리거가 발생했을 경우 자동으로 실행되는 워크플로우를 작성할 수 있습니다.  강점 및 특징 깃허브와의 통합 깃허브와 깊게 통합되어 있어 깃허브 리포지토리 내에서 …","fields":{"slug":"/Github-Actions/"},"frontmatter":{"date":"February 04, 2024","update":"Feb 04, 2024","title":"Github Actions","description":"Github Actions 소개","tags":["Github Actions"]}},{"excerpt":"개요 기본적으로 아무 설정이 없다면 각 Job들은 병렬적으로 실행됩니다.  예를 들어 job1과 job2를 선언한 경우, 이 두 job은 워크플로우 실행 시 동시에 시작이 됩니다.  이 때,  를 사용해 Job들 사이에 종속성을 주어 Job 하나가 끝나야 다음 Job이 실행되도록 설정할 수 있습니다. 예제 순차적으로 실행하기 다음과 같이 needs에 다른…","fields":{"slug":"/Github-Actions-Job---needs/"},"frontmatter":{"date":"February 04, 2024","update":"Feb 04, 2024","title":"Github Actions Job - needs","description":"needs를 사용한 Job들의 종속성 정의","tags":["Github Actions"]}},{"excerpt":"왜 필요한가? 깃허브 액션 워크플로우를 로컬에서 테스트하기가 쉽지 않습니다. 결국 깃허브 콘솔 또는 깃허브 CLI를 이용해서 테스트 하게 되는 경우가 대부분입니다.  단순히 Re-Run을 실행하면, 레포에 변경된 내용이 반영되지 않고 그 당시 환경에 대해서만 재실행이 되어 정상적인 테스트가 불가능합니다.  결국 트리거에 Push 조건을 걸어놓고, 변경 사…","fields":{"slug":"/Github-Actions-Workflow-수동으로-실행하기/"},"frontmatter":{"date":"February 04, 2024","update":"Feb 04, 2024","title":"Github Actions Workflow 수동으로 실행하기","description":"Github Actions Workflow를 수동으로 실행하여 테스트하기","tags":["Github Actions"]}},{"excerpt":"요약 짬짬이 틈을 내서 하는 작업이다 보니 문서화 작업을 제대로 못했습니다. 짜잘짜잘한 오류 수정이 있었으며, 비교적 큰 수정도 있었고 완성이 됐다고 판단해 버전을 정의하고 릴리즈도 해봤습니다.  버그 수정 코드 블록의 들여쓰기가 제대로 적용되지 않는 문제가 수정되었습니다.    스타일 내에서 언더바가 제대로 인식되지 않는 문제가 수정되었습니다.  타이틀…","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅11/"},"frontmatter":{"date":"February 04, 2024","update":"Feb 08, 2024","title":"NotionAPI를 활용한 자동 포스팅(11)","description":"블로그 자동 배포까지 한 번에 해결하는 Workflow 수정 및 타임아웃 에러 대처 코드 삽입","tags":["Notion-API","Blogging","Hobby","Typescript"]}},{"excerpt":"메타데이터 구조 확정 지난시간, 메타데이터를 관리하기 위한 클래스 초안을 작성했다. 시간이 없어서 급하게 만들었는데, 제대로 매개변수 이름을 지어주고 메타데이터 구조를 확정지었다.  크게 변하지는 않았고, 이름을 정해주는 수준이었다.  그리고 추가로 저장된 디렉토리 명을 사용해 포스팅된 마크다운 디렉토리를 삭제하는 메소드를 추가해주었다.  Posting …","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅10/"},"frontmatter":{"date":"February 03, 2024","update":"Feb 04, 2024","title":"NotionAPI를 활용한 자동 포스팅(10)","description":"삭제/수정 기능 구현 2","tags":["Notion-API","Blogging","Hobby","Typescript"]}},{"excerpt":"타입스크립트에서  을 사용해 특정 값들의 집합을 정의하고 각 멤버에 문자열 값을 할당할 수 있다. 이는 열거형이라고 하며 관련된 상수 값들의 집합에 이름을 부여하여 코드의 가독성을 높이고 오류 가능성을 줄여준다.  임의의 열거형을 정의하면 다음과 같다.  이렇게 정의하면 PageStatus 타입의 변수를 사용할 때 PageStatus.Deleted 로 사…","fields":{"slug":"/Typescript의-열거형/"},"frontmatter":{"date":"February 03, 2024","update":"Feb 02, 2024","title":"Typescript의 열거형","description":"타입스크립트에서의 열거형 정의","tags":["Typescript"]}},{"excerpt":"지난시간 지난시간, 신나게 자동 배포를 만들었다.  이제 새로 생성된 문서들에 대해서 자동으로 한시간마다 배포가 되어 글이 포스팅된다.  근데, 이런 경우 글을 어떻게 삭제하지? 현재 타이틀이 키 값인데 타이틀 명이 바뀌면 내용은 똑같은데 제목만 다른 글이 두 개?  그렇다, 삭제 및 수정 기능이 구현되어야 하는 것이다.  설계 어떤걸 키 값으로 해야 하…","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅9/"},"frontmatter":{"date":"February 02, 2024","update":"Feb 02, 2024","title":"NotionAPI를 활용한 자동 포스팅(9)","description":"삭제/수정 기능 구현","tags":["Blogging","Typescript","Hobby","Notion-API"]}},{"excerpt":"목표 단계적으로 GitHub Action을 사용해 블로그 자동 배포를 하려고 한다.  일단, 구상한 깃허브 액션에서 실행할 플로우는 다음과 같다.  구상 블로그 레포지토리를 받아온다.  내 프로그램을 돌려 블로그 레포지토리를 업데이트한다.  블로그 레포지토리를 커밋/푸시한다.  해당 작업은 특정 시간에, 또는 특정 시간마다 이뤄져야 한다.  구현 Noti…","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅8/"},"frontmatter":{"date":"February 01, 2024","update":"Feb 02, 2024","title":"NotionAPI를 활용한 자동 포스팅(8)","description":"Github Action을 활용한 자동화","tags":["Notion-API","Blogging","Hobby","GitHub","Typescript"]}},{"excerpt":"editor.quickSuggestions 설정은 VSCode에서 코드를 작성하는 동안 자동완성을 어떻게 표시할지를 결정한다.  다음 세가지의 옵션이 있다.  string 문자열 내에서 자동 완성 제안을 활성화/비활성화 한다.  comments 주석 내에서 자동 완성 제안을 활성화/비활성화 한다.  other 코드(문자열이나 주석이 아닌 부분) 내에서 자…","fields":{"slug":"/vscode-quick-Suggestions/"},"frontmatter":{"date":"January 31, 2024","update":"Feb 02, 2024","title":"vscode-quick Suggestions","description":"editor.quickSuggestions 설정에 대해 기록","tags":["VSCode"]}},{"excerpt":"퇴근을 하고 고치다보니 시간이 부족하다.. 어쩔 수 없다.  돌아보기 어제 상당수의 디버깅을 진행하고 기존 블로그에서 새 블로그로 글을 이전했다. 깃허브 블로그에 업로드까지 마치고, 오늘 다시 보니 짜잘짜잘한 오류가 다시 또(!!) 발견되었다.  유지보수 Callout 수정 내가 선택한 블로그의 기능인지, 원래 마크다운 기능인지 모르겠다. 굳이 태그를 넣…","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅7/"},"frontmatter":{"date":"January 30, 2024","update":"Feb 02, 2024","title":"NotionAPI를 활용한 자동 포스팅(7)","description":"유지보수 내역서 ","tags":["Notion-API","Blogging","Hobby","Typescript"]}},{"excerpt":"서론 동시성 제어 문제를 해결하기 위한 여러가지 방법을 고민 끝에 PostgreSQL Advisory Locks를 사용한 방법으로 구현하기로 했다.  구현을 하면서 겪은 과정을 여기에 기록한다.  구현 목표 현재 회사에서는 FastAPI와 SqlAlchemy 2.0, PostgreSQL을 사용하고 있다. 아주 짧은 텀으로 중복으로 온 API 요청에 대해 …","fields":{"slug":"/PostgreSQL-Advisory-Locks-트랜잭션-레벨에서-구현/"},"frontmatter":{"date":"January 30, 2024","update":"Feb 14, 2024","title":"PostgreSQL Advisory Locks 트랜잭션 레벨에서 구현","description":"Sqlalchemy 2.0에서 PostgreSQL Advisory Locks을 트랜잭션 레벨에서 구현해 동시성 제어를 하자. ","tags":["Postgresql","SqlAlchemy","Python","DataBase","Work"]}},{"excerpt":"func란? SQL 함수를 생성하고 호출하는 데 사용되는 기능이다. SQL 표준 함수 뿐 아니라 데이터베이스 별 특정 함수까지 다룰 수 있다.  Sqlalchemy의 유연한 기능으로 다양한 데이터베이스 작업을 보다 Pythonic한 방식으로 작성할 수 있게 해준다.  func의 특징 함수 생성기 func는 데이터베이스의 내장 함수나 사용자 정의 함수를 파…","fields":{"slug":"/Sqlalchemy의-func/"},"frontmatter":{"date":"January 30, 2024","update":"Feb 02, 2024","title":"Sqlalchemy의 func","description":"Sqlalchemy의 func 사용법","tags":["SqlAlchemy","Python","DataBase"]}},{"excerpt":"문제 가~끔 네트워크 문제 때문인지 클라이언트에서 같은 요청이 0.01초 미만의 간격으로 두 번씩 들어오는 경우가 있다. 사실상 요청이 동시에 들어오는 것과 같다. 대부분의 경우에는 문제가 되지 않지만, 쿠폰 구매 같은 민감한 요청에 대해서는 회사의 손해 또는 사용자의 불편과 예민하게 직결되므로 문제가 커질 수 있다.  따라서 해당 문제를 완벽히 해결하고…","fields":{"slug":"/동시성-제어문제-해결/"},"frontmatter":{"date":"January 30, 2024","update":"Feb 09, 2024","title":"동시성 제어문제 해결","description":"PostgreSQL Advisory Locks","tags":["DataBase","Postgresql","Work"]}},{"excerpt":"기능 구현이 거의 다 되었기 때문에, 오늘은 일단 짜잘짜잘한 오류 수정을 진행했다.  유지보수 내역 Front Matter-프로퍼티 연계 수정 프로퍼티가 Front Matter에 추가되는데, 값이 빈 것도 추가되어서 제대로 필터링 되지 않는 문제가 있었다. 값이 존재하는 프로퍼티만 Front Matter에 추가되도록 수정해주었다.  추가로, 프로퍼티가 고…","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅6/"},"frontmatter":{"date":"January 29, 2024","update":"Feb 02, 2024","title":"NotionAPI를 활용한 자동 포스팅(6)","description":"내실 다지기 - 유지보수 내역 기록","tags":["Blogging","Typescript","Hobby","Notion-API"]}},{"excerpt":"구현 목적 상품 구매에 관련된 API를 구현하려고 한다. DynamoDB를 사용할 때에 동시성 이슈로 쿠폰 중복 구매 이슈가 있었으므로 이번에 RDS로 옮긴 김에 해당 문제를 완벽하게 해결하기 위해 다각도로 방법을 고민했다.  그 방안 중 하나가 트랜잭션 격리 수준(Transaction Isolation Level) 을 이용한 것이다.  SqlAlchem…","fields":{"slug":"/Sqlalchemy에서의-트랜잭션-격리-수준-구현/"},"frontmatter":{"date":"January 29, 2024","update":"Feb 02, 2024","title":"Sqlalchemy에서의 트랜잭션 격리 수준 구현","description":null,"tags":["SqlAlchemy","DataBase","Python","Work"]}},{"excerpt":"트랜잭션 격리 수준(Transaction Isolation Level)이란? 트랜잭션 격리 수준은 데이터베이스 시스템에서 동시에 여러 트랜잭션이 실행될 때, 트랜잭션 간에 데이터를 어떻게 고립시킬지를 결정하는 설정이다. 이 설정은 트랜잭션이 다른 트랜잭션의 작업에 영향을 받지 않도록 보장하는 동시에 여러 트랜잭션이 데이터베이스의 동일한 데이터에 접근할 때…","fields":{"slug":"/트랜잭션-격리-수준Transaction-Isolation-Level/"},"frontmatter":{"date":"January 29, 2024","update":"Feb 02, 2024","title":"트랜잭션 격리 수준(Transaction Isolation Level)","description":null,"tags":["DataBase","Postgresql"]}},{"excerpt":"열정 추가로 더 진행해버렸다. 정말로 여기까지만 하려고 한다. 오랜만에 탄력 받으니 계속 하게 되어버렸다.  구현 내용 콜아웃, 디바이더, 인용문, 코드, 번호 매기기 , 글머리 기호 목록 컨버터를 추가했다.  콜아웃, 디바이더 html로 구현했다. 인용문은 hr 태그로 처리했으며, 콜아웃은 div 태그를 사용했다. 다만 콜아웃은 스타일 처리가 필요하다.…","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅5/"},"frontmatter":{"date":"January 28, 2024","update":"Feb 02, 2024","title":"NotionAPI를 활용한 자동 포스팅(5)","description":"1차 목표 달성","tags":["Blogging","Notion-API","Typescript","Hobby"]}},{"excerpt":"타입스크립트의 Union Type 타입스크립트에는 유니언 타입이라는게 있다. 쉽게 말해 값이 여러 타입을 or 로 가질 수 있는 것이다. 막나간다.  두 개의 이상의 타입을  기호를 사용해 결합하면 유니언 타입이 된다. 이를 통해 변수가 함수 매개변수가 여러 타입 중 하나의 타입을 가질 수 있음을 나타낼 수 있다.  장점 유연성 다양한 타입을 하나의 변수…","fields":{"slug":"/Union-Type/"},"frontmatter":{"date":"January 28, 2024","update":"Feb 02, 2024","title":"Union Type","description":"타입스크립트와 파이썬의 유니온 타입 선언","tags":["Typescript","Python"]}},{"excerpt":"개인적으로 나스를 하나 운영하고 있다.  이것저것 설정해서 쓰고 있는데, 어느 날 갑자기 토렌트 다운로드가 용량이 없다고 작동하지 않았다.  용량은 다음의 명령어를 통해 확인할 수 있다.  외장하든 왕 큰 놈을 달아서 사용하고 있는데, 오드로이드다보니 메인 OS가 깔리는 드라이브는 15gb짜리 작은 용량이다.. 그 드라이브가 100퍼센트 꽉 차 있었다. …","fields":{"slug":"/우분투-용량-관리/"},"frontmatter":{"date":"January 28, 2024","update":"Feb 02, 2024","title":"우분투 용량 관리","description":null,"tags":["Ubuntu"]}},{"excerpt":"지난 이야기 NotionAPI를 활용한 자동 포스팅(3) 간만에 복귀를 했다. 별건 아니고.. 그냥 복습을 했다.  오늘의 작업 block.ts 나머지 작업 지난번에 block.ts를 미완성 된 상태로 두었다. 타입 검사에서 걸린 상태로 일단 두었고, Union Type이라는 것이 있다는 것을 알게 되었다. 해당 내용에 대해서는 따로 정리 해두었다.  U…","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅4/"},"frontmatter":{"date":"January 27, 2024","update":"Feb 02, 2024","title":"NotionAPI를 활용한 자동 포스팅(4)","description":"쭉쭉 진행되는 작업","tags":["Blogging","Notion-API","Typescript","Hobby"]}},{"excerpt":"지난시간 https://sharknia.github.io/Notion-Api-2/ 문제점 아무것도.. 기억이 나지 않는다.. 지난날의 나는 무엇이었나? 5개월만의 복귀가 이렇게 어렵다. 이래서 사람은 꾸준해야 한다.  잡설 최근 업무에 약~간의 여유가 생기면서 IDE를 파이참에서 vs code로 갈아탔다. 파이썬만 할 때에는 파이참이 유리한 것이 사실이지…","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅3/"},"frontmatter":{"date":"January 26, 2024","update":"Feb 02, 2024","title":"NotionAPI를 활용한 자동 포스팅(3)","description":"프로젝트 복귀를 환영합니다. ","tags":["Blogging","Notion-API","Hobby"]}},{"excerpt":"문제 기존에는 프론트와 주고 받을 데이터 모델을 정의하는데에 dataclass를 사용하고 있었다. 그러다가 FastAPI로 넘어오면서 Pydantic model을 도입했다.  dataclass로는 해결할 수 없는 문제가 있었다. 프론트엔드 개발에서는 주로 카멜케이스를 사용하기 때문에, 파이썬에서는 주로 스네이크 케이스를 사용하는데 (네이밍 규칙(namin…","fields":{"slug":"/Pydantic-Model의-응용/"},"frontmatter":{"date":"January 26, 2024","update":"Feb 02, 2024","title":"Pydantic Model의 응용","description":"커스텀된 Base Pydantic Model class 생성 - 네이밍 컨벤션 문제 해결","tags":["Work","Python"]}},{"excerpt":"개발중인 서비스에서 Postgresql을 적용한지 이제 한달 조금 더 지났다.  아직 DB 마이그레이션 작업은 거의 되지 않았으므로, 실제로 Postgresql DB를 이용하는 서비스는 그다지 많지 않았다.  새로 업데이트 하는 기능들에 대해서는 적극적으로 Postgresql을 이용하기로 했고, 이번에 새로 퀴즈 기능을 개발하면서 이 기능은 전부 RDB …","fields":{"slug":"/SqlAlchemy의-QueuePool/"},"frontmatter":{"date":"January 18, 2024","update":"Feb 02, 2024","title":"SqlAlchemy의 QueuePool","description":null,"tags":["SqlAlchemy","DataBase","Python","Work"]}},{"excerpt":"서론 FatAPI에는 페이징을 위한 공식 라이브러리가 존재한다. 하지만 예제대로 진행해도 코드는 오류를 내뿜었다. 왜냐하면, FastAPI의 페이지네이션 라이브러리는 SqlAlchemy 2.0의 비동기 엔진을 지원하지 않기 때문이다.  그래서 직접 구현했다.  (이 라이브러리를 쓰면 Async pagination 지원합니다. 여러분은 이거 쓰세요.) 목적…","fields":{"slug":"/FastAPI의-Pagenation/"},"frontmatter":{"date":"January 17, 2024","update":"Feb 06, 2024","title":"FastAPI의 Pagenation","description":"Sqlalchemy 2.0 비동기 엔진과 페이지네이션 라이브러리 직접 구현","tags":["Work","FastAPI","SqlAlchemy","Python"]}},{"excerpt":"결론 supabase 기준, Sqlalchemy의 비동기 엔진에서 Postgresql pooler (supavisor)에 오류 없이 연결하기 위해서는  을 다음과 같이 구성해주면 된다.  statementcachesize, preparedstatementcache_size를 둘 다 모두 0으로 줘야 한다. 그리고 왜 발생하는지 모르겠는 간헐적인 오류(캐싱…","fields":{"slug":"/Sqlalchemy-비동기-엔진에서의-Postgresql-Pooler/"},"frontmatter":{"date":"January 09, 2024","update":"Feb 02, 2024","title":"Sqlalchemy 비동기 엔진에서의 Postgresql Pooler","description":null,"tags":["DataBase","SqlAlchemy","Python","Work"]}},{"excerpt":"현재 회사의 서비스에서 RDB를 사용하지 않고 NoSQL(DynamoDB)만 사용해서 어플리케이션 서비스를 하고 있었다.  필연적으로 RDB를 도입하게 되었고, supabase를 사용해보고 싶어서 DB는 깊은 고찰 없이 아무도 사용해본 적이 없었던 Postgresql을 고르게 되었다. 이것이 고생의 시작이었다.  그 고생을 기록해둔다.  1. 커넥션 직접…","fields":{"slug":"/FastAPI에서-Postgresql의-커넥션-관리/"},"frontmatter":{"date":"December 15, 2023","update":"Feb 02, 2024","title":"FastAPI에서 Postgresql의 커넥션 관리","description":null,"tags":["Python","FastAPI","DataBase","Work","Postgresql"]}},{"excerpt":"회사에서 DynamoDB를 사용할 때에, PynamoDB ORM을 사용하여 연결을 하고 있다.  Postgresql을 도입했을 때에 커넥션 문제가 지속적으로 발생해 (연결이.. 끊어지지 않는다!) 이를 처리하던 도중 PynamoDB는 어떻게 커넥션을 관리하는지 궁금해서 찾아보게 되었다.  PynamoDB란? PynamoDB는 DynamoDB를 위한 Pyt…","fields":{"slug":"/PynamoDB와-boto3-PynamoDB의-커넥션/"},"frontmatter":{"date":"December 08, 2023","update":"Feb 02, 2024","title":"PynamoDB와 boto3, PynamoDB의 커넥션","description":null,"tags":["DataBase","AWS","Python","Work"]}},{"excerpt":"소개 애플 단축어를 활용해 간단하게 슬랙 상태를 원클릭으로 변경할 수 있습니다. 슬랙의 API를 이용합니다.  저는 개인적으로 raycast의 뽀모도로 익스텐션과 함께 다음과 같이 사용하고 있습니다. \n집중을 시작할 때에  집중 모드 킴 음량 조절 노래 재생 슬랙 방해금지 상태 변경 \n집중을 끝낼 때에 집중 모드 끔 슬랙 방해금지 상태 해제 집중 모드에서…","fields":{"slug":"/단축어로-SLACK-프로필-변경하기/"},"frontmatter":{"date":"November 17, 2023","update":"Feb 02, 2024","title":"단축어로 SLACK 프로필 변경하기","description":null,"tags":["ETC","Work"]}},{"excerpt":"aiohttp는 파이썬의 비동기 HTTP 네트워킹 라이브러리이다. 이 라이브러리는 asyncio를 사용하여 비동기 I/O를 수행하고 클라이언트와 서버 양쪽 모두에 대한 HTTP 지원을 제공한다.  즉 aiohttp를 사용하면 비동기적으로 HTTP 요청을 보내고 응답을 받을 수 있다.  주요 특징 비동기/동시성 지원 async, await를 사용하여 동시에…","fields":{"slug":"/aiohttp/"},"frontmatter":{"date":"November 08, 2023","update":"Feb 02, 2024","title":"aiohttp","description":null,"tags":["Python"]}},{"excerpt":"Dependency Injection 시스템과 데코레이터 시스템은 유사한 목적을 가질 수 있다. 하지만 구현과 사용법에서 몇 가지 차이점이 있다.  공통점 명시적인 인증 체크 인증 로직을 명시적으로 라우트에 적용하여 추가 기능이 필요한 지점을 쉽게 식별할 수 있다.  중앙 집중식 관리 로직을 한 곳에서 관리함으로써 코드의 중복을 줄이고 일관성을 유지할 수…","fields":{"slug":"/FastAPI에서-데코레이터와-Dependency/"},"frontmatter":{"date":"November 07, 2023","update":"Feb 02, 2024","title":"FastAPI에서 데코레이터와 Dependency","description":null,"tags":["FastAPI","Python"]}},{"excerpt":"asyncio란? 소개 파이썬에서 비동기 프로그래밍을 위한 표준 라이브러리이다. 이 라이브러리는  을 사용하여 동시성 코드를 작성하는 데 필요한 구조를 제공한다. 단일 스레드 내에서도 여러 I/O 바운드 작업과 고수준의 구조화된 네트워크 코드를 동시에 실행할 수 있으며, 이는 효율성과 속도에서 큰 이점을 제공한다.  주요 컴포넌트 Event Loop 프로…","fields":{"slug":"/FastAPI와-asyncio/"},"frontmatter":{"date":"November 07, 2023","update":"Feb 02, 2024","title":"FastAPI와 asyncio","description":null,"tags":["Python","FastAPI"]}},{"excerpt":"개요 FastAPI의 데코레이터는 파이썬 데코레이터 패턴을 활용하여 FastAPI 프레임워크에서 제공하는 여러 기능을 함수나 클래스에 적용하는 구문이다. 이 데코레이터들은 FastAPI에서 매우 중요한 역할을 한다.  데코레이터는  기호를 사용하여 함수나 클래스의 위에 선언된다. 데코레이터는 그 아래에 정의된 함수에 추가적인 기능을 부여하거나 특정 작업을…","fields":{"slug":"/FastAPI의-데코레이터/"},"frontmatter":{"date":"November 03, 2023","update":"Feb 02, 2024","title":"FastAPI의 데코레이터","description":null,"tags":["FastAPI","Python"]}},{"excerpt":"소개 파이썬의 중요한 특징 중 하나로 이터레이터 프로토콜을 사용하여 데이터의 시퀀스를 느긋하게(lazily) 생성하는데 사용된다. 즉, 생성기는 시퀀스의 전체 항목을 메모리에 한 번에 로드하지 않고 반복(iteration) 할 때마다 하나씩 항목을 생성한다.  이를 통해 메모리 사용을 줄이고 대용량 또는 무한한 시퀀스를 다룰 수 있다.  이터레이터 프로토…","fields":{"slug":"/생성기generate-패턴/"},"frontmatter":{"date":"November 03, 2023","update":"Feb 02, 2024","title":"생성기(generate) 패턴","description":null,"tags":["Python"]}},{"excerpt":"특징 및 장점 타입 힌트를 활용한 API 선언 Python 3.6 이상의 타입 힌트를 활용하여 API 매개변수 및 응답 모델을 선언한다. 이를 통해 데이터 검증, 직렬화, 문서화를 자동화한다. 이러한 방식은 깔끔한 코드 작성과 함께 명확한 API 명세를 제공한다.  속도 Starlette(ASGI 기반) 및 Pydanic의 결합으로 다른 파이썬 프레임워크…","fields":{"slug":"/FastAPI/"},"frontmatter":{"date":"November 02, 2023","update":"Feb 02, 2024","title":"FastAPI","description":null,"tags":["FastAPI","Python"]}},{"excerpt":"은 파이썬의 타입 힌트 시스템을 기반으로 데이터 검증 및 설정 관리를 제공하는 라이브러리이다. 특히 FastAPI에서는 Pydantic을 주로 요청 및 응답 객체의 데이터 검증, 직렬화 및 역직렬화에 사용한다.  주요 특징 타입 힌트 기반 Pydantic 모델은 파이썬의 타입 힌트를 활용하여 선언된다. 이를 통해 코드 내에서 명확하게 데이터의 구조와 타입…","fields":{"slug":"/Pydantic-모델/"},"frontmatter":{"date":"November 02, 2023","update":"Feb 02, 2024","title":"Pydantic 모델","description":null,"tags":["Python"]}},{"excerpt":"데이터베이스의 동시성 제어란? 여러 트랜잭션 또는 연산이 동시에 수행될 때 데이터의 일관성을 유지하고 충돌을 방지하기 위한 매커니즘을 말한다. 잘못된 동시성 제어는 데이터의 무결성을 해치고 시스템의 성능을 저하시키며 예측할 수 없는 결과를 초래할 수 있다.  동시성 제어의 주요 개념 락 (Locking) 데이터베이스 항목에 대한 동시 액세스를 제어하기 위…","fields":{"slug":"/DynamoDB의-동시성-제어Concurrency-Control/"},"frontmatter":{"date":"November 01, 2023","update":"Feb 02, 2024","title":"DynamoDB의 동시성 제어(Concurrency Control)","description":null,"tags":["AWS","DataBase"]}},{"excerpt":"개요 Poetry는 파이썬 프로젝트의 의존성 관리와 패키징을 도와주는 도구이다. Poetry의 주요 목표는 프로젝트의 설정과 관리를 단순화하고, 이를 위한 통합된 솔루션을 제공하는 것이다.  파이썬 개발자에게 일관된 개발 환경을 제공하며, 의존성 해결, 버전 관리, 패키징 배포와 같은 일반적인 작업을 처리하는 통합된 도구를 제공하여 파이썬 프로젝트의 생명…","fields":{"slug":"/Poetry/"},"frontmatter":{"date":"October 31, 2023","update":"Feb 02, 2024","title":"Poetry","description":null,"tags":["Python"]}},{"excerpt":"소개 Blue-Green 배포 전략은 지속적인 통합 및 지속적인 배포 환경에서 자주 사용되는 소프트웨어 배포 패턴 중 하나이다. 이 전략의 주요 목표는 시스템의 중단 없이 안전하게 애플리케이션을 배포하고 업데이트 하는 것이다.  핵심 아이디어 두 개의 독립적인 환경 Blue와 Green이라는 두 개의 별도의 환경(또는 색상)이 있다. 일반적으로 한 환경(…","fields":{"slug":"/Blue-Green-Deploy-전략/"},"frontmatter":{"date":"October 30, 2023","update":"Feb 02, 2024","title":"Blue Green Deploy 전략","description":null,"tags":["ETC","BackEnd"]}},{"excerpt":"Amazon CloudFront 아마존에서 제공하는 CDN(Content Delivery Network) 서비스이다.  CDN이란? 사용자에게 웹 콘텐츠를 더 빠르게 제공하기 위해 전 세계 여러 위치에 콘텐츠를 분산 및 저장하는 네트워크이다. 주요 기능과 특징 글로벌 엣지 네트워크 전 세계에 200개가 넘는 엣지 로케이션과 리전을 갖추고 있다.  동적 및…","fields":{"slug":"/CloudFront/"},"frontmatter":{"date":"October 30, 2023","update":"Feb 02, 2024","title":"CloudFront","description":null,"tags":["AWS"]}},{"excerpt":"개요 AWS ECS는 Docker 컨테이너를 쉽게 실행, 중지 및 관리할 수 있도록 해주는 컨테이너 오케스트레이션 서비스이다. 컨테이너 배포, 작업 정의, 서비스 정의, 클러스터 관리 등을 지원한다.  오케스트레이션 서비스란? 컨테이너의 배포, 관리, 스케일링, 네트워킹 및 가용성을 자동화하는 프로세스 및 도구의 집합이다.  즉, 컨테이너화된 애플리케이션…","fields":{"slug":"/AWS-ECSElastic-Container-Service/"},"frontmatter":{"date":"October 25, 2023","update":"Feb 02, 2024","title":"AWS ECS(Elastic Container Service)","description":null,"tags":["AWS"]}},{"excerpt":"어느 순간 morethan-log에 노션 글 업로드가 잘 되지 않았다.  글을 그 동안 마구 마구 써버리긴 했다.. 그래서 찔리는 점이 있었는데, 최근 이직 후 일을 하면서 조금 덜 쓰면서, 그리고 잠깐 옵시디언으로 한 눈을 팔면서 고칠 생각을 안하고 있었다.  그러면서 일도 쪼끔 익숙해지고 옵시디언도 아 별로다 라고 결론을 내고 다시 여기에 글을 썼는데…","fields":{"slug":"/vercel-배포-자동화/"},"frontmatter":{"date":"October 23, 2023","update":"Feb 02, 2024","title":"vercel 배포 자동화","description":null,"tags":["Hobby","Blogging"]}},{"excerpt":"기본 개념 DDD는 복잡한 애플리케이션과 시스템의 개발에 있어서 비즈니스 요구사항을 중심으로 설계하고 구현하는 접근법입니다. 이 방식은 비즈니스 도메인의 복잡성을 이해하고, 그 복잡성을 모델링하여 소프트웨어에 반영하는 것에 중점을 둡니다. 핵심 요소 Ubiquitous Language (모든 곳에서 사용되는 언어): 개발팀과 비즈니스 팀 간에 공통적으로 …","fields":{"slug":"/FastAPI와-DDD/"},"frontmatter":{"date":"October 20, 2023","update":"Feb 20, 2024","title":"FastAPI와 DDD","description":null,"tags":["FastAPI","DDD"]}},{"excerpt":"단위 테스트는 소프트웨어 개발의 기본 구성 단위를 테스트하는 것을 말한다. 이 경우 기본 구성 단위는 보통 함수나 메소드, 작은 클래스 등이 될 수 있다. 단위 테스트의 주된 목적은 개별 구성 단위가 예상대로 동작하는지 확인하고, 코드의 특정 부분에 대한 논리적 오류를 식별하는 것이다.  특징과 목적 독립성 : 각 단위 테스트는 독립적으로 실행되어야 하며…","fields":{"slug":"/Unit-Test단위-테스트/"},"frontmatter":{"date":"October 17, 2023","update":"Feb 02, 2024","title":"Unit Test(단위 테스트)","description":null,"tags":["TDD"]}},{"excerpt":"메소드는 Python의  모듈에 있는  데코레이터를 사용하여 클래스를 정의할 때 사용된다.   메소드는 객체가 초기화된 직후에 자동으로 호출된다. 즉,  메소드가 호출된 후에  메소드가 호출된다. 클래스의 인스턴스가 생성될 때  메소드가 호출되어 인스턴스 변수들을 초기화하고, 바로 이어서  메소드가 호출되어 추가적인 초기화 작업을 수행할 수 있다. 이러한…","fields":{"slug":"/__post_init__/"},"frontmatter":{"date":"October 17, 2023","update":"Feb 02, 2024","title":"__post_init__","description":null,"tags":["Python"]}},{"excerpt":"dataclass는 [파이썬]3.7부터 표준 라이브러리의 일부로 도입된 데코레이터이다.\n주로 클래스를 정의할 때 반복적으로 필요한 특수 메서드들(, ,  등)을 자동으로 생성해주는 역할을 한다. 이를 통해 데이터를 저장하고 처리하는 클래스를 보다 간결하게 정의할 수 있다. 주요 특징 자동 생성된 생성자 자동 생성된 표현 메서드 자동 생성된 비교 메서드 불…","fields":{"slug":"/dataclass/"},"frontmatter":{"date":"October 17, 2023","update":"Feb 02, 2024","title":"dataclass","description":null,"tags":["Python"]}},{"excerpt":"개요 브랜치 관리 전략은 소프트웨어 개발에서 코드 베이스의 다양한 변경 사항을 조직하고 관리하기 위한 방법이나 원칙이다. 특히 버전관리 시스템을 사용하는 프로젝트에서 브랜치를 효과적으로 활용하면 여러 개발자나 팀이 동시에 다양한 기능, 버그 수정, 실험 등을 독립적으로 처리할 수 있다.  목적 코드의 안정성 유지 여러 개발자나 팀 간의 협업 촉진 배포와 …","fields":{"slug":"/브랜치-관리-전략/"},"frontmatter":{"date":"October 16, 2023","update":"Feb 02, 2024","title":"브랜치 관리 전략","description":null,"tags":["GitHub"]}},{"excerpt":"이 오류는 Python 클래스 또는 함수에서 기본값이 설정된 인자 뒤에 기본값이 설정되지 않은 인자가 위치할 때 발생한다. 예를 들어, 나는 다음과 같았다.   필드에 기본값 이 설정되어 있고, 이 필드 뒤에 기본값이 설정되지 않은 와  필드가 위치하고 있다. 해결 방법 이 문제가 발생한 이유는 기본값이 설정된 매개변수 뒤에 기본값이 설정되지 않은 매개변…","fields":{"slug":"/TypeError-non-default-argument-content-follows-default-argument/"},"frontmatter":{"date":"October 10, 2023","update":"Feb 02, 2024","title":"TypeError: non-default argument 'content' follows default argument","description":null,"tags":["Python"]}},{"excerpt":"1. 정의 REST는 웹서비스를 설계하기 위한 아키텍쳐 스타일이다. 웹의 기본 프로토콜인 HTTP를 최대한 활용하기 위한 일련의 제약사항 및 원칙을 포함한다. 2. 기본 원칙 Stateless 각 요청은 모든 정보를 가지고 있어야 한다. 즉, 서버는 클라이언트의 상태 정보를 저장하면 안된다. 클라이언트-서버 구조 클라이언트와 서버가 별도로 존재하고 각각의…","fields":{"slug":"/REST/"},"frontmatter":{"date":"September 20, 2023","update":"Feb 02, 2024","title":"REST","description":null,"tags":["BackEnd"]}},{"excerpt":"1. 정의 AWS에서 제공하는 완전 관리형 NoSQL 데이터베이스 서비스이다. 높은 트래픽의 웹 스케일 애플리케이션에 적합한 특성을 가지며, 밀리초 단위의 지연 시간으로 대량의 데이터를 처리할 수 있다.\n확장 가능하고 높은 성능의 NoSQL 데이터베이스로 다양한 웹 기반 애플리케이션과 서비스에서 데이터 관리를 위한 핵심 선택지이다. AWS의 다른 서비스와…","fields":{"slug":"/Dynamo-DB/"},"frontmatter":{"date":"September 20, 2023","update":"Feb 02, 2024","title":"Dynamo DB","description":null,"tags":["DataBase","AWS"]}},{"excerpt":"1. 등장 배경 RDBMS는 정해진 스키마와 트랜잭션의 ACID 속성을 기반으로 설계되었다. 하지만 웹 2.0 시대가 도래하면서 대용량 데이터와 급격한 트래픽 증가, 다양한 데이터 구조의 요구가 생기면서 RDBMS의 한계가 드러나 NoSQL이 등장하게 되었다. 2. RDBMS와의 주요 차이점 스키마 RDBMS는 고정된 스키마를 가지고 있으나, NoSQL은…","fields":{"slug":"/NoSQL/"},"frontmatter":{"date":"September 20, 2023","update":"Feb 02, 2024","title":"NoSQL","description":null,"tags":["DataBase"]}},{"excerpt":"AWS API Gateway는 개발자가 간편하게 RESTful API와 WebSocket API를 생성, 배포, 유지 관리 할 수 있도록 지원하는 AWS의 완전 관리형 서비스이다. 클라이언트와 백엔드 서비스 간의 호출을 중개한다. 1. 주요 기능 API 생성 및 배포 빠르게 API를 생성하고 배포할 수 있다. 호출 중개 클라이언트와 백엔드 서비스 간의 호…","fields":{"slug":"/AWS-API-Gateway/"},"frontmatter":{"date":"September 19, 2023","update":"Feb 02, 2024","title":"AWS API Gateway","description":null,"tags":["BackEnd","AWS"]}},{"excerpt":"먼저 ColdStart를 이해하기 위해서는 Serverless의 동작방식을 이해할 필요가 있다. 간단히 알아보자.\nServerless 컴퓨팅에서 사용자의 요청이 오면 해당 요청을 처리하는 함수(Function)가 실행된다. 이 함수는 이벤트에 응답하여 실행되는데, 이 함수는 항상 실행 상태를 유지하고 있지 않다. 대신에 요청이 들어오면 새롭게 시작되거나 …","fields":{"slug":"/ColdStart/"},"frontmatter":{"date":"September 19, 2023","update":"Feb 02, 2024","title":"ColdStart","description":null,"tags":["AWS","BackEnd"]}},{"excerpt":"서버가 \"없는\" 것이 아니다.\n서버리스는 개발자 또는 운영 팀이 서버의 운영, 관리, 확장 등에 대한 걱정 없이 어플리케이션 코드에만 집중할 수 있게 해주는 컴퓨팅 모델을 의미한다. 특징 자동확장 사용량에 따라 자동으로 리소스를 확장하거나 축소한다. 따라서 트래픽이 급증하더라도 시스템이 알아서 처리한다. 이벤트 주도 대부분의 서버리스 어플리케이션은 이벤트…","fields":{"slug":"/Serverless/"},"frontmatter":{"date":"September 19, 2023","update":"Feb 02, 2024","title":"Serverless","description":null,"tags":["BackEnd"]}},{"excerpt":"지난 시간 지난시간에는 DataBase를 불러오는 비동기 로직 때문에 Factory Method를 사용해서 노션의 DataBase를 불러오는 코드를 작성했다.  기능만 점검 후, 전체적인 설계를 다시 하고 프로젝트의 디렉토리 구조도 다시 짰다.  새로운 설계 일단, 크게 네 가지의 클래스를 만들기로 했다.  DataBase 클래스 생성시에 날짜를 입력 받…","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅2/"},"frontmatter":{"date":"September 04, 2023","update":"Feb 02, 2024","title":"NotionAPI를 활용한 자동 포스팅(2)","description":null,"tags":["Notion-API","Blogging","Hobby","Typescript"]}},{"excerpt":"팩토리 패턴은 객체 생성에 관련된 로직을 클래스 내부에 포함시키는 대신 별도의 클래스나 메소드에 위임하는 패턴이다.  개요 팩토리 패턴은 객체를 생성하는 코드와 객체의 사용 코드를 분리하는 역할을 한다.  객체를 생성하는 로직을 별도의 팩토리 클래스나 팩토리 메소드에 위임하여 객체 생성을 캡슐화 한다.  특징 유연성 : 객체 생성 과정에 변화가 생겼을 때…","fields":{"slug":"/Factory-Pattern/"},"frontmatter":{"date":"September 03, 2023","update":"Feb 02, 2024","title":"Factory Pattern","description":null,"tags":["DesignPattern"]}},{"excerpt":"갑자기 짚고 넘어가는 프로젝트의 목표 이번 프로젝트의 목표는 다음과 같다.  개발 내적인 목표 타입스크립트를 사용한다.  변경에는 닫혀있고, 확장에는 열린 코드를 작성한다.  이를 위해 구현에만 집중하지 않고 설계에 신경을 써서 진행해본다. 이를 위해 디자인 패턴을 가능한 한 적극적으로 활용해본다.  가능한 한 사용이 쉽도록 만들어본다. 명확한 명명 규칙…","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅/"},"frontmatter":{"date":"September 03, 2023","update":"Feb 02, 2024","title":"NotionAPI를 활용한 자동 포스팅","description":null,"tags":["Hobby","Blogging","Notion-API","DesignPattern"]}},{"excerpt":"naming conventions는 클래스, 메소드 또는 변수의 이름을 지을 때 사용되는 명명 규칙이다.  camelCase 첫번째 단어는 소문자로 시작하고 그 후의 단어는 대문자로 시작한다. 변수 또는 함수 명으로 주로 사용된다.  예 :    PascalCase 모든 단어가 대문자로 시작한다. 주로 클래스명으로 사용된다.  예 :    snake_ca…","fields":{"slug":"/네이밍-규칙naming-conventions/"},"frontmatter":{"date":"September 03, 2023","update":"Feb 02, 2024","title":"네이밍 규칙(naming conventions)","description":null,"tags":["ETC"]}},{"excerpt":"TypeScript TypeScript란? TypeScript는 Microsoft에서 개발한 오픈 소스 프로그래밍 언어이다. JavaScript의 SuperSet(상위 집합)이므로, 기존의 자바스크립트 코드도 타입스크립트에서 동작한다. 타입스크립트의 주요 목적은 큰 규모의 어플리케이션 개발을 돕기 위해 정적 타입, 인터페이스, 클래스, 모듈 등의 기능을 …","fields":{"slug":"/Typescript-시작하기/"},"frontmatter":{"date":"September 02, 2023","update":"Feb 02, 2024","title":"Typescript 시작하기","description":null,"tags":["Typescript"]}},{"excerpt":"gitignore란?  는 Git에서 프로젝트에 특정 파일 또는 디렉터리를 추적하지 않도록 지시하는 파일이다.  파일에 나열된 패턴과 일치하는 파일/디렉터리는 Git에서 무시된다. 이는 민감한 데이터, 컴파일 된 바이너리, 로그 파일 등 Git 저장소에 저장할 필요가 없거나 저장해서는 안되는 파일들을 제외하는 데에 유용하다.  문법  파일에는 여러 패턴을…","fields":{"slug":"/gitignore/"},"frontmatter":{"date":"September 02, 2023","update":"Feb 02, 2024","title":"gitignore","description":null,"tags":["GitHub"]}},{"excerpt":"브랜치란? 브랜치는 코드의 다양한 버전을 동시에 관리하고 작업할 수 있게 해주는 도구이다. 개발자는 브랜치를 통해 작업을 병렬적으로 진행하고 나중에 원하는 시점에 이 작업들을 병합할 수 있다.  브랜치의 핵심 개념 Commit Git에서 변경점을 나타내는 스냅샷이다. 각 커밋은 이전 커밋에 대한 참조를 가진다.  HEAD 현재 작업중인 브랜치의 가장 최신…","fields":{"slug":"/Branch/"},"frontmatter":{"date":"September 01, 2023","update":"Feb 02, 2024","title":"Branch","description":null,"tags":["GitHub"]}},{"excerpt":"DataTable 개요 DataTable은 .Net 프레임워크와 .Net Core, 그리고 .Net 5 이후 버전에서 제공하는 ADO.Net의 일부이다. 메모리 상에서 데이터의 테이블 형태를 관리하기 위한 .Net의 클래스이다.  DataTable은 클래스이다. 객체를 인스턴스화하고 메서드와 속성에 액세스 할 수 있다.  메모리상에서 데이터의 테이블 형태…","fields":{"slug":"/DataTable-클래스/"},"frontmatter":{"date":"September 01, 2023","update":"Feb 02, 2024","title":"DataTable 클래스","description":null,"tags":["ASP.Net"]}},{"excerpt":"무엇을 하는가? Notion API를 이용해서 내가 쓴 글 들을 불러와 MD 파일로 만들려고 한다. 그 과정을 실시간으로 기록하려고 한다. 명확하게 가능한가? 는 사실 아직 알아보지 않았다.  왜 하는가? 너무나 너무나 귀찮기 때문이다. 블로그 포스팅을 위해서 마크다운 에디터로 노션을 쓰고 싶기 때문이다. 아니? 노션으로 쓴 것을 그대로 블로그에 커밋해버…","fields":{"slug":"/Notion-API2/"},"frontmatter":{"date":"September 01, 2023","update":"Feb 02, 2024","title":"Notion API(2)","description":null,"tags":["Hobby","Blogging","Notion-API"]}},{"excerpt":"npx란? npx는 Node.js와 함께 제공되는 패키지 실행도구이다.  npm에서 제공하는 패키지를 설치하지 않고 즉시 실행하게 해주는 역할을 한다.  npx의 특징 및 기능 전역설치 없이 실행 패키지를 전역으로 설치하지 않고 즉시 명령어를 바로 실행할 수 있다. 에를 들어  gh-pages와 같은 CLI 도구를 전역적으로 설치하지 않아도 npx gh-…","fields":{"slug":"/npx/"},"frontmatter":{"date":"August 31, 2023","update":"Feb 02, 2024","title":"npx","description":null,"tags":["Node.js"]}},{"excerpt":"왜 하는가 나는 귀찮은게 너무 귀찮다.  커밋 한 이후에  를 해야 배포가 되는 것도 너무 귀찮았다.  무엇을 하는가 그래서, 이걸  을 이용해서 자동화를 했다.  에 임의의 yml 파일을 넣어주면 해당 작업을 github action에서 진행한다.  어떻게 했는가 yml 파일 내용은 다음과 같다.  문제는 없었는가 처음에는 npm install을 사용했…","fields":{"slug":"/githubio-자동배포/"},"frontmatter":{"date":"August 30, 2023","update":"Feb 02, 2024","title":"github.io 자동배포","description":null,"tags":["Blogging","Hobby"]}},{"excerpt":"https://devhudi.github.io/gatsby-starter-hoodie/quick-start-kr/ 디자인이 마음에 들고, 필요로 하는 기능이 모두 들어가 있기 때문에 해당 테마를 선택했다. (시리즈 기능, 목차 기능, 댓글 기능) 5번까지는 무사히 테스트 했는데,  6번 특히 Netlify를 활용한 배포에서 막혔다.  Repository를…","fields":{"slug":"/githubio를-이용한-블로그/"},"frontmatter":{"date":"August 28, 2023","update":"Feb 02, 2024","title":"github.io를 이용한 블로그","description":null,"tags":["Blogging","Hobby"]}},{"excerpt":"venv란? Python의 표준 라이브러리에 포함된 가상 환경 모듈이다. 가상환경은 프로젝트마다 독립적인 Python 환경을 생성하여 패키지 의존성을 분리하고 관리할 수 있는 기능을 제공한다.  한 시스템 내에서 여러 프로젝트를 개발하거나 실행할 때 각 프로젝트별로 필요한 패키지를 격리된 환경에서 관리할 수 있다.  Python 3.3부터 venv가 표준…","fields":{"slug":"/Python-venv-Windows/"},"frontmatter":{"date":"August 23, 2023","update":"Feb 02, 2024","title":"Python venv (Windows)","description":null,"tags":["Python"]}},{"excerpt":"Notion API를 사용해보려고 한다.  이것으로 무엇을 할 것인가? 는 생각해둔게 있지만, 가능하다고 생각된 시점에서 본격적으로 해보려고 하고, 일단 오늘은 Notion API를 살펴보려고 한다.  간단한 소개 https://developers.notion.com/ Notion의 공개 Rest API를 이용하여 Notion Workspace와 상호 작…","fields":{"slug":"/Notion-API1/"},"frontmatter":{"date":"August 23, 2023","update":"Feb 02, 2024","title":"Notion API(1)","description":null,"tags":["Notion-API","Blogging","Hobby"]}},{"excerpt":"정의 PRG 패턴은 웹 어플리케이션에서 폼 제출 후의 중복 제출 문제를 해결하기 위한 웹 디자인 패턴입니다. 사용자가 웹 폼을 제출한 후 (Post), 서버가 해당 요청을 처리하고 사용자를 새로운 위치로 리다이렉트 (Redirect) 시킵니다. 이후 사용자는 리다이렉트된 위치의 정보를 (Get) 요청하여 표시합니다. 특징 중복 폼 제출 방지: 사용자가 새…","fields":{"slug":"/PRG-패턴-PostRedirectGet/"},"frontmatter":{"date":"August 23, 2023","update":"Feb 02, 2024","title":"PRG 패턴 (Post/Redirect/Get)","description":null,"tags":["DesignPattern"]}},{"excerpt":"print와 pprint는 모두 Python에서 사용되는 출력 관련 함수이다.  print 값을 터미널에 간단히 출력할 때 사용한다.  pprint pprint는 pretty print의 약자로, 복잡한 데이터 구조를 읽기 쉽게 출력하는 데에 사용된다. 데이터 구조를 계층적으로 출력하고 들여쓰기를 적용하여 가독성을 향상시킨다.  예를 들어 위와 같은 코드…","fields":{"slug":"/print와-pprint/"},"frontmatter":{"date":"August 23, 2023","update":"Feb 02, 2024","title":"print와 pprint","description":null,"tags":["Python"]}},{"excerpt":"정규화 정규화는 데이터베이스 설계 과정 중에서 중복을 최소화하고 데이터의 일관성과 무결성을 유지하기 위한 기법이다. 정규화는 데이터를 더 작은 논리적 단위로 분할하고 이를 통해 중복 데이터를 제거하여 데이터베이스의 효율성과 유지보수 용이성을 향상 시킨다.  정규화는 대표적으로 업데이트 이상, 삽입 이상, 삭제 이상과 같은 무제를 해결한다.  주요 정규화 …","fields":{"slug":"/정규화와-역정규화/"},"frontmatter":{"date":"August 23, 2023","update":"Feb 02, 2024","title":"정규화와 역정규화","description":null,"tags":["DataBase"]}},{"excerpt":"트래픽 튜닝(traffic tuning)은 네트워크 성능을 최적화하기 위한 방법 중 하나이다. 트래픽 튜닝은 대부분 네트워크의 병목 현상을 최소화하고, 서비스 응답 시간을 개선하며, 사용자의 경험을 향상시키는 데 목표를 둔다. 다음은 트래픽 튜닝과 관련된 몇 가지 주요 측면과 전략이다. 로드 밸런싱 (Load Balancing) 로드 밸런싱은 서비스의 안…","fields":{"slug":"/트래픽-튜닝/"},"frontmatter":{"date":"August 23, 2023","update":"Feb 02, 2024","title":"트래픽 튜닝","description":null,"tags":["Network"]}},{"excerpt":"파일의 확장자를 으로 변경합니다. 예를 들어, 을 으로 변경합니다. ZIP 압축 해제 도구 (예: WinRAR, 7-Zip 등)를 사용하여 변경된  파일을 엽니다.  파일 내에서  폴더나 해당하는 폴더를 찾아  파일을 찾습니다. 해당  파일을 추출합니다. 이렇게 하면 에서 원하는  파일을 얻을 수 있습니다. 이렇게 하면 의존성, 버전 호환성 등의 문제가 …","fields":{"slug":"/Nuget-패키지-dll-추출/"},"frontmatter":{"date":"August 22, 2023","update":"Feb 02, 2024","title":"Nuget 패키지 dll 추출","description":null,"tags":["ASP.Net"]}},{"excerpt":"gh-pages (GitHub Pages) 설명: GitHub Pages는 GitHub 저장소를 기반으로 정적 웹사이트를 무료로 호스팅할 수 있는 서비스입니다. 주로 프로젝트 페이지, 개인 포트폴리오, 단순한 블로그 등을 호스팅하는 데 사용됩니다. Jekyll과 같은 정적 사이트 생성 도구와 함께 사용될 수 있습니다. 비슷한 서비스: GitLab Page…","fields":{"slug":"/무료-웹-호스팅-비교/"},"frontmatter":{"date":"August 22, 2023","update":"Feb 02, 2024","title":"무료 웹 호스팅 비교","description":null,"tags":["Hobby"]}},{"excerpt":"웹 사이트 프로젝트 특징 웹 사이트 프로젝트는 파일 시스템을 기반으로 하는 프로젝트 유형입니다. 웹 애플리케이션의 파일들이 프로젝트 디렉토리 내에 그대로 위치하며, ASP.NET 컴파일러에 의해 실시간으로 컴파일됩니다. 프로젝트 파일이 없고, 각 파일은 개별적으로 관리됩니다. 이로 인해 각 파일의 수정이 간단하며, 특히 작은 프로젝트나 신속한 개발에 유리…","fields":{"slug":"/웹-사이트-프로젝트-vs-웹-응용-프로그램-프로젝트/"},"frontmatter":{"date":"August 21, 2023","update":"Feb 02, 2024","title":"웹 사이트 프로젝트 vs 웹 응용 프로그램 프로젝트","description":null,"tags":["ASP.Net"]}},{"excerpt":"아주 마음에 드는 오픈소스로, 다만 내 취향에 맞게 짜잘짜잘 임의로 몇 가지 부분을 수정했다.  Tags 정렬 등록한 태그들이 블로그 좌측에 나열되는데, 이를 이름 순서대로 나오게 정렬했다.  자동썸네일 기능 테스트 src\\routes\\Detail\\PostDetail\\PostHeader.tsx 에서 썸네일을 가져오고 있고,  src\\pages[slug].…","fields":{"slug":"/MORETHAN-LOG-수정/"},"frontmatter":{"date":"August 20, 2023","update":"Feb 02, 2024","title":"MORETHAN-LOG 수정","description":null,"tags":["Blogging","Hobby"]}},{"excerpt":"모 회사 과제 때문에 NestJS를 설치해 볼 일이 생겨 기록해둔다.  Node.js 설치 NestJS는 Node.js를 기반으로 한다. Node.js에서 맞는 버전을 설치한다.  NestJS 프로젝트 생성 Node.js에 npm이 포함되어있다. NestJS 서버를 구성하기 위해서는 @nestjs/cli 를 설치해야 한다.  원하는 디렉토리로 이동해서 프…","fields":{"slug":"/NestJS-설치/"},"frontmatter":{"date":"August 20, 2023","update":"Feb 02, 2024","title":"NestJS 설치","description":null,"tags":["NestJS"]}},{"excerpt":"NestJS는 MVC 패턴을 지원하지만, 전통적인 Express.js 스타일의 MVC 구조와는 약간 차이가 있다.  NestJS의 기본적인 디렉토리 구조는 다음과 같다.  NestJS에서는 각 기능별로 (예: 사용자, 포스트, 댓글 등) 모듈을 분리하는 것을 권장한다. 따라서 각 기능별로 모듈을 생성하고, 해당 모듈 내에서 MVC 구조를 구성하는 것이 더…","fields":{"slug":"/NestJS의-디렉토리-구조/"},"frontmatter":{"date":"August 20, 2023","update":"Feb 02, 2024","title":"NestJS의 디렉토리 구조","description":null,"tags":["NestJS"]}},{"excerpt":"var와 let, 그리고 const는 JavaScript에서 변수를 선언할 때 사용되는 키워드이다. 그러나 둘 사이엔 중요한 차이점들이 있으며, 이를 명확히 이해하고 사용해야 한다.  let과 const는 ES6에서 도입된 키워드로, ES6 이전에 변수를 선언하는 유일한 방법은 var 사용 뿐이었다.  var는  블록범위를 지원하지 않는다.  Hoisti…","fields":{"slug":"/var와-letconst/"},"frontmatter":{"date":"August 19, 2023","update":"Feb 02, 2024","title":"var와 let,const","description":null,"tags":["Javascript"]}},{"excerpt":"RDB(관계형 데이터베이스)란? RDB(Relational Database) Oracle, MySQL 둘 다 관계형 데이터베이스이다.  모든 데이터를 2차원의 테이블 형태로 표현한다.  데이터의 독립성이 높고 고수준의 데이터 조작 언어를 사용하여 결합, 제약, 투영등의 관계 조작에 의해 비약적으로 표현 능력을 높일 수 있다.  관계 조작에 의해 자유롭게 …","fields":{"slug":"/RDB관계형-데이터베이스-RDBMS/"},"frontmatter":{"date":"August 18, 2023","update":"Feb 02, 2024","title":"RDB(관계형 데이터베이스) + RDBMS","description":null,"tags":["DataBase"]}},{"excerpt":"DB  처음에는 단순히 코드 짜는것에만 집중했었는데, 어느 순간 단순한 에러 고침 또는 간단한 로직 수정을 넘어서 더 큰 의미의 유지보수 또는 고도화를 겪으면서 DB 튜닝이 속도에 큰 영향을 미침을 인지하고, 더 빠른 페이지를 만드는것에 집중했다. 그때 아래와 같은 것들을 시도하였다. 인덱싱 : 자주 사용하는, 자주 불려오는 테이블들, 자주 사용되는 컬럼…","fields":{"slug":"/DB-튜닝-경험/"},"frontmatter":{"date":"August 18, 2023","update":"Feb 02, 2024","title":"DB 튜닝 경험","description":null,"tags":["DataBase"]}},{"excerpt":"개발자로서 어엿한 블로그 하나는 있어야 하지 않을까, 생각을 항상 하곤 했다.   하지만 블로그라는게 여간 귀찮은 일이 아니다.  공부한 내용을 노션에 적어두기 시작한지 좀 됐는데, 티스토리나 velog나 여러 방법을 시도한적이 있었지만 노션에 적은 내용을 거기로 옮기는게 얼마나 귀찮은지, 시작은 해도 도무지 꾸준히 이어할 수가 없었다.  그냥 언젠가 노…","fields":{"slug":"/MORETHAN-LOG-설치/"},"frontmatter":{"date":"August 18, 2023","update":"Feb 02, 2024","title":"MORETHAN-LOG 설치","description":null,"tags":["Blogging","Hobby"]}},{"excerpt":"Nest.js란? Node.js 서버측 애플리케이션을 구축하기 위한 프레임워크 TypeScript 기반으로 구축되어 완벽하게 지원 Express를 기본으로 채택하고 그 위에 여러 기능을 미리 구현한 것이 NestJS Nest.js의 특징 확장 가능하며 유지 관리가 쉬운 애플리케이션을 개발할 수 있다 TypeScript, OOP, FP, FRP 요소의 결합…","fields":{"slug":"/NestJS-소개/"},"frontmatter":{"date":"January 25, 2023","update":"Feb 02, 2024","title":"NestJS 소개","description":null,"tags":["NestJS"]}},{"excerpt":"클로저란? 자신을 포함하고 있는 외부함수보다 내부함수가 더 오래 유지되는 경우, 외부 함수 밖에서 내부함수가 호출되더라도 외부함수의 지역 변수에 접근할 수 있는데 이러한 함수를 클로저라고 부른다.  클로저는 반환된 내부함수가 자신이 선언됐을 때의 환경인 스코프를 기억하여 자신이 선언됐을 때의 환경밖에서 호출되어도 그 환경에 접근할 수 있는 함수를 말한다.…","fields":{"slug":"/JavaScript-클로저/"},"frontmatter":{"date":"January 21, 2023","update":"Feb 02, 2024","title":"JavaScript 클로저","description":null,"tags":["Javascript"]}},{"excerpt":"타입변환이란? 자바스크립트의 모든 값은 타입이 있다. 값의 타입은 다른 타입으로 개발자에 의해 의도적으로 변환할 수 있다. 또는 자바스크립트 엔진에 의해 암묵적으로 자동 변환될 수 있다. 개발자가 의도적으로 타입을 변경하는 것을 명시적 타입 변환(Explict coercion) 또는 타입 캐스팅(Type casting) 이라고 한다.  자바스크립트 엔진이…","fields":{"slug":"/JavaScript의-타입-변환과-단축-평가/"},"frontmatter":{"date":"January 10, 2023","update":"Feb 02, 2024","title":"JavaScript의 타입 변환과 단축 평가","description":null,"tags":["Javascript"]}},{"excerpt":"변수 호이스팅 (Variable Hoisting) 자바스크립트에서는 모든 변수는 호이스팅 된다. 호이스팅이란 var 선언문이나 function 선언문 등 모든 선언문이 해당 Scope의 선두로 옮겨진 것처럼 동작하는 특성을 말한다. 즉 자바스크립트에서는 모든 선언문(var, let, const, function, function*, class)이 선언되기…","fields":{"slug":"/JavaScript의-변수/"},"frontmatter":{"date":"January 07, 2023","update":"Feb 02, 2024","title":"JavaScript의 변수","description":null,"tags":["Javascript"]}},{"excerpt":"변수(Variable) 메모리상의 주소(위치)를 기억하는 저장소. 즉 메모리 주소에 접근하기 위해 사람이 이해할 수 있는 언어로 지정한 식별자 값 데이터 타입 - 프로그래밍 언어에서 사용할 수 있는 값의 종료 변수 - 값이 저장된 메모리를 가리키는 식별자 리터럴 - 소스코드 안에 직접 만들어낸 상수 값 자체. 값의 최소 단위 값은 프로그램에 의해 조작될 …","fields":{"slug":"/JavaScript-기본-문법/"},"frontmatter":{"date":"January 06, 2023","update":"Feb 02, 2024","title":"JavaScript 기본 문법","description":null,"tags":["Javascript"]}},{"excerpt":"자바스크립트의 특징 웹브라우저에서 동작하는 유일한 프로그래밍 언어 별도의 컴파일 작업을 수행하지 않는 인터프리터 언어  명령형, 함수형, 프로토타입 기반 객체지향 프로그래밍을 지원하는 멀티 패러다임 프로그래밍 언어 강력한 프로토타입 기반의 객체지향 언어 브라우저 동작 원리 브라우저의 핵심 기능은 사용자가 참조하고자 하는 페이지를 서버에 요청(Request…","fields":{"slug":"/JavaScript의-특징-브라우저-동작-원리/"},"frontmatter":{"date":"January 05, 2023","update":"Feb 02, 2024","title":"JavaScript의 특징, 브라우저 동작 원리","description":null,"tags":["Javascript"]}},{"excerpt":"Stun 서버와 Turn 서버를 위한 Coturn Server도 함께 설치 환경구성 Ubuntu 18.04 bionic Python 3.7 설치 명령어 정리 파이썬 및 기본 소프트웨어 설치 Janus 설치 https://ourcodeworld.com/articles/read/1197/how-to-install-janus-gateway-in-ubuntu-s…","fields":{"slug":"/화상상담을-위한-Janus-구성/"},"frontmatter":{"date":"January 03, 2023","update":"Feb 02, 2024","title":"화상상담을 위한 Janus 구성","description":null,"tags":["WebRTC","Work"]}}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}