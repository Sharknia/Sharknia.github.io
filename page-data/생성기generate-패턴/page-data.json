{"componentChunkName":"component---src-templates-post-jsx","path":"/생성기generate-패턴/","result":{"data":{"site":{"siteMetadata":{"title":"SharkniA"}},"markdownRemark":{"id":"4e0bb11a-ea1e-59b3-8be1-0854a8b62285","excerpt":"소개 파이썬의 중요한 특징 중 하나로 이터레이터 프로토콜을 사용하여 데이터의 시퀀스를 느긋하게(lazily) 생성하는데 사용된다. 즉, 생성기는 시퀀스의 전체 항목을 메모리에 한 번에 로드하지 않고 반복(iteration) 할 때마다 하나씩 항목을 생성한다.  이를 통해 메모리 사용을 줄이고 대용량 또는 무한한 시퀀스를 다룰 수 있다.  이터레이터 프로토…","html":"<h2>소개</h2>\n<p>파이썬의 중요한 특징 중 하나로 이터레이터 프로토콜을 사용하여 데이터의 시퀀스를 느긋하게(lazily) 생성하는데 사용된다. 즉, 생성기는 시퀀스의 전체 항목을 메모리에 한 번에 로드하지 않고 반복(iteration) 할 때마다 하나씩 항목을 생성한다. </p>\n<p>이를 통해 메모리 사용을 줄이고 대용량 또는 무한한 시퀀스를 다룰 수 있다. </p>\n<h2>이터레이터 프로토콜</h2>\n<p>파이썬에서 반복 가능한 객체(컬렉션)를 순회하기 위한 규약이다. 이 프로토콜은 반복(iteration) 동작을 정의하며 일련의 요소들에 대해 순차적으로 접근할 수 있게 해준다. 파이썬의 모든 반복 가능한 객체는 이 이터레이터 프로토콜을 구현해야 하며 이는 주로 두 가지 매직 매소드(magic method)로 구성된다. </p>\n<h4><code class=\"language-text\">__iter__()</code></h4>\n<p>이터레이터 객체를 반환해야 하며, 보통 self를 반환하여 객체 자체가 이터레이터인 경우를 처리한다. 이 메소드는 for 루프와 같은 반복 연산이 시작될 때 호출된다. </p>\n<h3><code class=\"language-text\">__next__()</code></h3>\n<p>컬렉션의 다음 요소를 반환해야 한다. 만약 더 이상 요소가 없으면 <code class=\"language-text\">StopIteration</code> 예외를 발생시켜 반복을 종료해야 한다. </p>\n<h2>생성기 만드는 방법</h2>\n<h3>생성기 함수 (Generator function)</h3>\n<p>일반 함수와 비슷하지만 <code class=\"language-text\">return</code> 대신 <code class=\"language-text\">yield</code> 문을 사용하여 값을 하나씩 반환한다. <code class=\"language-text\">yield</code> 를 사용하면 함수는 해당 상태에서 실행을 일시 정지하고 다음 값이 요청될 때까지 대기 상태가 된다. </p>\n<h3>생성기 표현식 (Generator expression)</h3>\n<p>리스트 컴프리헨션과 유사하지만 괄호를 사용하여 정의한다. 이 방식은 단순한 경우에 대한 생성기를 간결하게 작성할 수 있게 해준다. </p>\n<h2>예제</h2>\n<h3>생성기 함수 예제</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">countdown</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Starting to count from\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">yield</span> n\n        n <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done!\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 생성기 객체를 생성</span>\ncd <span class=\"token operator\">=</span> countdown<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 생성기를 사용</span>\n<span class=\"token keyword\">for</span> count <span class=\"token keyword\">in</span> cd<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 코드를 실행하면 3, 2, 1이 출력되고 각 숫자 사이에 다른 코드를 실행할 수 있는 기회가 주어진다. 각 yield 문마다 함수의 상태는 일시 중단되고 다음 반복에서 계속된다. </p>\n<h3>생성기 표현식 예제</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">squares <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 생성기를 사용</span>\n<span class=\"token keyword\">for</span> square <span class=\"token keyword\">in</span> squares<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 코드는 0부터 9까지의 숫자에 대한 제곱을 출력한다. 반복(iteration)할 때마다 다음 제곱값이 생성되고 모든 값이 한 번에 메모리에 저장되지 않는다. </p>\n<h2>yield</h2>\n<p>yield는 함수가 값을 반환(return)하면서도 그 상태를 기억하고 일시 중지(pause)되는 것을 가능하게 한다. 이는 함수의 실행을 중단시키지만 함수의 로컬 변수와 실행 상태가 유지되어 나중에 이 함수가 다시 호출될 때 이전 상태에서부터 실행을 재개할 수 있다. </p>\n<p>일반적인 return은 함수의 실행을 완전히 종료하고 해당 함수의 모든 상태(로컬 변수, 실행 컨텍스트)를 버리지만 yeild는 함수가 여전히 살아있다는 점에서 return과 다르다. yeild를 통해 반환된 함수(즉 생성기)는 <code class=\"language-text\">__next__()</code> 메소드를 호출함으로써 (또는 <code class=\"language-text\">next()</code> 함수를 사용하여) 다시 실행될 수 있으며, yield문 바로 다음부터 실행이 이어진다. </p>\n<h2>이터러블(iterable) 객체</h2>\n<h3>소개</h3>\n<p>멤버를 한 번에 하나씩 반환할 수 있는 객체로, 파이썬에선 주로 순회 가능한 모든 객체를 의미한다. 이터러블 객체는 for 루프와 같은 반복문을 사용해 순회할 수 있으며 이는 그 객체가 반복 가능한(iterable) 인터페이스를 구현하고 있기 때문이다. </p>\n<p>이터러블 객체가 되기 위해서는 객체 내에 <code class=\"language-text\">__iterm__()</code> 메소드를 구현해야 한다. 이 메소드는 이터레이터를 반환하고 이터레이터는 <code class=\"language-text\">__next__()</code> 메소드를 구현하여 순차적으로 값을 반환할 수 있어야 한다. <code class=\"language-text\">topIteration</code> 예외는 이터레이터가 더 이상 반환할 값이 없을 때 발생시켜 반복이 끝났음을 알린다.  </p>\n<h3>파이썬의 이터러블 객체</h3>\n<p>리스트, 튜플, 문자열, 딕셔너리, 집합 등이 있다. 또한 파일(file) 객체도 이러터블하며 파일의 각 줄을 순회할 수 있다. </p>\n<h3>예제</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">my_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 리스트는 이터러블 객체입니다.</span>\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> my_list<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1, 2, 3, 4가 순차적으로 출력됩니다.</span></code></pre></div>\n<p>직접 이터러블 객체를 만들고 싶다면 <code class=\"language-text\">__iter__()</code> 메소드를 포함하는 클래스를 정의할 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> low\n        self<span class=\"token punctuation\">.</span>high <span class=\"token operator\">=</span> high\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__iter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self  <span class=\"token comment\"># self.__next__()를 호출할 이터레이터로 자신을 반환합니다.</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__next__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>high<span class=\"token punctuation\">:</span>\n            num <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current\n            self<span class=\"token punctuation\">.</span>current <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">return</span> num\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> StopIteration\n\n<span class=\"token comment\"># Counter 인스턴스는 이터러블 객체입니다.</span>\ncounter <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> counter<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1, 2, 3이 출력됩니다.</span></code></pre></div>\n<p>위는 사용자 정의 이터러블 객체이다. </p>\n<p>위의 <code class=\"language-text\">Counter</code> 클래스는 <code class=\"language-text\">__iter__()</code>와 <code class=\"language-text\">__next__()</code> 메소드를 정의하여 이터러블 인터페이스를 구현한다. <code class=\"language-text\">Counter</code> 인스턴스를 순회할 때마다 <code class=\"language-text\">__next__()</code> 메소드가 호출되어 숫자를 하나씩 반환하고, 더 이상 반환할 숫자가 없을 때 <code class=\"language-text\">StopIteration</code> 예외가 발생한다.</p>","frontmatter":{"title":"생성기(generate) 패턴","date":"November 03, 2023","update":"February 02, 2024","tags":["Python"],"series":null},"fields":{"slug":"/생성기generate-패턴/","readingTime":{"minutes":7.325}}},"seriesList":{"edges":[{"node":{"id":"0b1c2d5a-2b50-5b66-afbf-b01926c0dd54","fields":{"slug":"/화상상담을-위한-Janus-구성/"},"frontmatter":{"title":"화상상담을 위한 Janus 구성"}}},{"node":{"id":"ba0f5f4f-cf7f-5445-b72d-26423452c314","fields":{"slug":"/JavaScript의-특징-브라우저-동작-원리/"},"frontmatter":{"title":"JavaScript의 특징, 브라우저 동작 원리"}}},{"node":{"id":"865e05e1-e5c6-526f-92e6-4f2d31e585c0","fields":{"slug":"/JavaScript-기본-문법/"},"frontmatter":{"title":"JavaScript 기본 문법"}}},{"node":{"id":"7923e0b3-15b2-59cd-b418-b200395d7e13","fields":{"slug":"/JavaScript의-변수/"},"frontmatter":{"title":"JavaScript의 변수"}}},{"node":{"id":"9bbc5bf0-245d-53a4-8d96-76d51c912484","fields":{"slug":"/JavaScript의-타입-변환과-단축-평가/"},"frontmatter":{"title":"JavaScript의 타입 변환과 단축 평가"}}},{"node":{"id":"10b4111d-0724-57fb-97fd-db82c36877c8","fields":{"slug":"/JavaScript-클로저/"},"frontmatter":{"title":"JavaScript 클로저"}}},{"node":{"id":"a7f609aa-6669-5a16-8d61-79ff5de2a850","fields":{"slug":"/NestJS-소개/"},"frontmatter":{"title":"NestJS 소개"}}},{"node":{"id":"b7249e32-01e2-5eff-814e-dc0329a9a4be","fields":{"slug":"/DB-튜닝-경험/"},"frontmatter":{"title":"DB 튜닝 경험"}}},{"node":{"id":"4b0285f5-399e-5287-bc09-43732b05ab0a","fields":{"slug":"/MORETHAN-LOG-설치/"},"frontmatter":{"title":"MORETHAN-LOG 설치"}}},{"node":{"id":"0571e650-66d9-5b4a-ac9d-af8e59996f3c","fields":{"slug":"/RDB관계형-데이터베이스-RDBMS/"},"frontmatter":{"title":"RDB(관계형 데이터베이스) + RDBMS"}}},{"node":{"id":"89a07626-c378-5eef-ab25-298f0289a6c4","fields":{"slug":"/var와-letconst/"},"frontmatter":{"title":"var와 let,const"}}},{"node":{"id":"83f7fa8f-6731-55b5-a1da-4751de4ecf8d","fields":{"slug":"/MORETHAN-LOG-수정/"},"frontmatter":{"title":"MORETHAN-LOG 수정"}}},{"node":{"id":"eaf49eaa-1b96-520c-80ae-bce85fa3dd50","fields":{"slug":"/NestJS-설치/"},"frontmatter":{"title":"NestJS 설치"}}},{"node":{"id":"296115be-6c25-52e7-ae91-d0d9894fbf83","fields":{"slug":"/NestJS의-디렉토리-구조/"},"frontmatter":{"title":"NestJS의 디렉토리 구조"}}},{"node":{"id":"f26e28a5-93cd-598d-8c25-f164890ce172","fields":{"slug":"/웹-사이트-프로젝트-vs-웹-응용-프로그램-프로젝트/"},"frontmatter":{"title":"웹 사이트 프로젝트 vs 웹 응용 프로그램 프로젝트"}}},{"node":{"id":"136d8a02-7e41-5953-a5ff-5b398c56b949","fields":{"slug":"/무료-웹-호스팅-비교/"},"frontmatter":{"title":"무료 웹 호스팅 비교"}}},{"node":{"id":"b658ac7d-3769-5129-921f-e7cc0ae0bf0b","fields":{"slug":"/Nuget-패키지-dll-추출/"},"frontmatter":{"title":"Nuget 패키지 dll 추출"}}},{"node":{"id":"37c3e0bc-d4eb-50d5-908e-006f907ab976","fields":{"slug":"/정규화와-역정규화/"},"frontmatter":{"title":"정규화와 역정규화"}}},{"node":{"id":"4766b3f5-2e94-5215-b60c-2a4c9efdf85c","fields":{"slug":"/트래픽-튜닝/"},"frontmatter":{"title":"트래픽 튜닝"}}},{"node":{"id":"342535ab-e5ea-5f97-96aa-7b7083802c91","fields":{"slug":"/PRG-패턴-PostRedirectGet/"},"frontmatter":{"title":"PRG 패턴 (Post/Redirect/Get)"}}},{"node":{"id":"b9e5b3f8-0cbb-5df9-96f2-57c7b9432a5a","fields":{"slug":"/print와-pprint/"},"frontmatter":{"title":"print와 pprint"}}},{"node":{"id":"a2b877f8-8776-52e2-9dfb-7f2284382d7b","fields":{"slug":"/Python-venv-Windows/"},"frontmatter":{"title":"Python venv (Windows)"}}},{"node":{"id":"95b80c29-860e-50fb-a858-299c5302851d","fields":{"slug":"/npx/"},"frontmatter":{"title":"npx"}}},{"node":{"id":"cf8d56a0-7ddf-55c2-8307-224c70fda0b8","fields":{"slug":"/Branch/"},"frontmatter":{"title":"Branch"}}},{"node":{"id":"dcb582da-6cbc-50b3-8186-ddc11fc17b08","fields":{"slug":"/DataTable-클래스/"},"frontmatter":{"title":"DataTable 클래스"}}},{"node":{"id":"9298e625-ce38-505d-b91e-707c01b1f87b","fields":{"slug":"/Typescript-시작하기/"},"frontmatter":{"title":"Typescript 시작하기"}}},{"node":{"id":"93dffdfc-ea33-54e1-b695-128fe51dcfef","fields":{"slug":"/gitignore/"},"frontmatter":{"title":"gitignore"}}},{"node":{"id":"d7e56701-b302-5321-8e5d-0f1c8cfbb6f0","fields":{"slug":"/네이밍-규칙naming-conventions/"},"frontmatter":{"title":"네이밍 규칙(naming conventions)"}}},{"node":{"id":"d64bb483-1570-5916-8f9b-ef8dbadd8463","fields":{"slug":"/Factory-Pattern/"},"frontmatter":{"title":"Factory Pattern"}}},{"node":{"id":"7f6655fd-5e49-5465-8b07-15ddc1b904d4","fields":{"slug":"/Serverless/"},"frontmatter":{"title":"Serverless"}}},{"node":{"id":"d3de4626-da0e-57de-bead-ea20a1ffbec8","fields":{"slug":"/ColdStart/"},"frontmatter":{"title":"ColdStart"}}},{"node":{"id":"92a4a9cf-53b4-50d9-af6e-c91877b291be","fields":{"slug":"/AWS-API-Gateway/"},"frontmatter":{"title":"AWS API Gateway"}}},{"node":{"id":"0e1b304d-0cc9-5113-8c00-daca0b6edeb8","fields":{"slug":"/Dynamo-DB/"},"frontmatter":{"title":"Dynamo DB"}}},{"node":{"id":"93226ec3-15ec-5e8b-bf3c-010d555895f2","fields":{"slug":"/NoSQL/"},"frontmatter":{"title":"NoSQL"}}},{"node":{"id":"805c968c-8b1e-534a-892b-da2c9f204ebb","fields":{"slug":"/REST/"},"frontmatter":{"title":"REST"}}},{"node":{"id":"56eb36b0-fd1a-52dd-863c-2975d103b0a3","fields":{"slug":"/TypeError-non-default-argument-content-follows-default-argument/"},"frontmatter":{"title":"TypeError: non-default argument 'content' follows default argument"}}},{"node":{"id":"088f281f-5b0a-5b02-9258-ac82c873bbed","fields":{"slug":"/브랜치-관리-전략/"},"frontmatter":{"title":"브랜치 관리 전략"}}},{"node":{"id":"9ef4592a-7d74-5de4-aa09-c4db1c303e56","fields":{"slug":"/Unit-Test단위-테스트/"},"frontmatter":{"title":"Unit Test(단위 테스트)"}}},{"node":{"id":"4f8e8e4d-42af-50a8-9cbc-5e516c833924","fields":{"slug":"/__post_init__/"},"frontmatter":{"title":"__post_init__"}}},{"node":{"id":"dcb54926-ac77-580e-bd41-109318aacde8","fields":{"slug":"/dataclass/"},"frontmatter":{"title":"dataclass"}}},{"node":{"id":"8b41a2d7-97b5-5ccd-8e10-32cc16787599","fields":{"slug":"/FastAPI와-DDD/"},"frontmatter":{"title":"FastAPI와 DDD"}}},{"node":{"id":"a12b9ab7-9525-563c-bcef-a51f1dc34c68","fields":{"slug":"/vercel-배포-자동화/"},"frontmatter":{"title":"vercel 배포 자동화"}}},{"node":{"id":"087cee46-3588-557e-926c-721aa25a85e5","fields":{"slug":"/AWS-ECSElastic-Container-Service/"},"frontmatter":{"title":"AWS ECS(Elastic Container Service)"}}},{"node":{"id":"36e71563-f275-5b66-a735-9bca8e77be70","fields":{"slug":"/CloudFront/"},"frontmatter":{"title":"CloudFront"}}},{"node":{"id":"5dd36c68-ebe7-5947-8632-4df2aa441c10","fields":{"slug":"/Blue-Green-Deploy-전략/"},"frontmatter":{"title":"Blue Green Deploy 전략"}}},{"node":{"id":"95b90c95-4fe9-5183-a2b8-ac11c913709a","fields":{"slug":"/Poetry/"},"frontmatter":{"title":"Poetry"}}},{"node":{"id":"9ac81ae8-f2d6-5d58-b563-c3c4f2654a87","fields":{"slug":"/DynamoDB의-동시성-제어Concurrency-Control/"},"frontmatter":{"title":"DynamoDB의 동시성 제어(Concurrency Control)"}}},{"node":{"id":"92de3e48-5133-5d3d-9535-f8e144681d9c","fields":{"slug":"/FastAPI/"},"frontmatter":{"title":"FastAPI"}}},{"node":{"id":"39985c94-a202-5791-a9e7-9c0570dd6f17","fields":{"slug":"/Pydantic-모델/"},"frontmatter":{"title":"Pydantic 모델"}}},{"node":{"id":"4e0bb11a-ea1e-59b3-8be1-0854a8b62285","fields":{"slug":"/생성기generate-패턴/"},"frontmatter":{"title":"생성기(generate) 패턴"}}},{"node":{"id":"64c425f1-1e03-5e21-a968-09ac10bb9c69","fields":{"slug":"/FastAPI의-데코레이터/"},"frontmatter":{"title":"FastAPI의 데코레이터"}}},{"node":{"id":"5892a2b8-8e43-5d98-a45b-9dea3b735a4b","fields":{"slug":"/FastAPI에서-데코레이터와-Dependency/"},"frontmatter":{"title":"FastAPI에서 데코레이터와 Dependency"}}},{"node":{"id":"79c5176e-a451-50a0-b279-97494de5723c","fields":{"slug":"/FastAPI와-asyncio/"},"frontmatter":{"title":"FastAPI와 asyncio"}}},{"node":{"id":"77e03930-3b70-5238-b971-7f8698b5b20d","fields":{"slug":"/aiohttp/"},"frontmatter":{"title":"aiohttp"}}},{"node":{"id":"d2f7ae9a-25ac-5e41-a864-ec2a92e9d03c","fields":{"slug":"/단축어로-SLACK-프로필-변경하기/"},"frontmatter":{"title":"단축어로 SLACK 프로필 변경하기"}}},{"node":{"id":"cd6d5ba0-d547-54b2-a3cc-d0334ad8b495","fields":{"slug":"/PynamoDB와-boto3-PynamoDB의-커넥션/"},"frontmatter":{"title":"PynamoDB와 boto3, PynamoDB의 커넥션"}}},{"node":{"id":"ea2342d7-c522-5677-9291-561c9335c798","fields":{"slug":"/FastAPI에서-Postgresql의-커넥션-관리/"},"frontmatter":{"title":"FastAPI에서 Postgresql의 커넥션 관리"}}},{"node":{"id":"c2f4e2af-2288-5a39-ac38-cd91a7695044","fields":{"slug":"/Sqlalchemy-비동기-엔진에서의-Postgresql-Pooler/"},"frontmatter":{"title":"Sqlalchemy 비동기 엔진에서의 Postgresql Pooler"}}},{"node":{"id":"43b92004-acc9-5076-b40b-3db770d558b5","fields":{"slug":"/SqlAlchemy의-QueuePool/"},"frontmatter":{"title":"SqlAlchemy의 QueuePool"}}},{"node":{"id":"6ae58778-9c0a-5ab1-9953-509e3c2f1c55","fields":{"slug":"/Pydantic-Model의-응용/"},"frontmatter":{"title":"Pydantic Model의 응용"}}},{"node":{"id":"17975177-0174-5179-a7c0-62a08a95069f","fields":{"slug":"/Union-Type/"},"frontmatter":{"title":"Union Type"}}},{"node":{"id":"b03c889e-3ff8-53ae-816d-24fbbd5f0bc1","fields":{"slug":"/우분투-용량-관리/"},"frontmatter":{"title":"우분투 용량 관리"}}},{"node":{"id":"ef6593f1-fa14-5b7e-8ae4-fa9f252ea4b5","fields":{"slug":"/Sqlalchemy에서의-트랜잭션-격리-수준-구현/"},"frontmatter":{"title":"Sqlalchemy에서의 트랜잭션 격리 수준 구현"}}},{"node":{"id":"a94c5f4c-8873-581a-9098-31d9ee8c312a","fields":{"slug":"/트랜잭션-격리-수준Transaction-Isolation-Level/"},"frontmatter":{"title":"트랜잭션 격리 수준(Transaction Isolation Level)"}}},{"node":{"id":"b4c0942d-b89b-5a3d-bf07-27ecfb413030","fields":{"slug":"/Sqlalchemy의-func/"},"frontmatter":{"title":"Sqlalchemy의 func"}}},{"node":{"id":"c6d453c8-6c2d-5df6-b2cc-c5e90214c848","fields":{"slug":"/동시성-제어문제-해결/"},"frontmatter":{"title":"동시성 제어문제 해결"}}},{"node":{"id":"c6d9101c-c735-5ab0-8813-2ebc71a90dec","fields":{"slug":"/PostgreSQL-Advisory-Locks-트랜잭션-레벨에서-구현/"},"frontmatter":{"title":"PostgreSQL Advisory Locks 트랜잭션 레벨에서 구현"}}},{"node":{"id":"aaef2c0a-831d-5bf6-b1bd-7a7208f3e0d9","fields":{"slug":"/vscode-quick-Suggestions/"},"frontmatter":{"title":"vscode-quick Suggestions"}}},{"node":{"id":"1788468a-a058-5b9e-8b9c-457a04951c79","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅10/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(10)"}}},{"node":{"id":"b92fcc1f-ac7a-55ba-b5dc-eeef8264b2c5","fields":{"slug":"/Typescript의-열거형/"},"frontmatter":{"title":"Typescript의 열거형"}}}]},"previous":{"fields":{"slug":"/Pydantic-모델/"},"frontmatter":{"title":"Pydantic 모델"}},"next":{"fields":{"slug":"/FastAPI의-데코레이터/"},"frontmatter":{"title":"FastAPI의 데코레이터"}}},"pageContext":{"id":"4e0bb11a-ea1e-59b3-8be1-0854a8b62285","series":null,"previousPostId":"39985c94-a202-5791-a9e7-9c0570dd6f17","nextPostId":"64c425f1-1e03-5e21-a968-09ac10bb9c69"}},"staticQueryHashes":[],"slicesMap":{}}