{"componentChunkName":"component---src-templates-post-jsx","path":"/NotionAPI를-활용한-자동-포스팅9/","result":{"data":{"site":{"siteMetadata":{"title":"SharkniA"}},"markdownRemark":{"id":"9578cb37-cba5-5b4d-9871-e69d1951cd13","excerpt":"지난시간 지난시간, 신나게 자동 배포를 만들었다.  이제 새로 생성된 문서들에 대해서 자동으로 한시간마다 배포가 되어 글이 포스팅된다.  근데, 이런 경우 글을 어떻게 삭제하지? 현재 타이틀이 키 값인데 타이틀 명이 바뀌면 내용은 똑같은데 제목만 다른 글이 두 개?  그렇다, 삭제 및 수정 기능이 구현되어야 하는 것이다.  설계 어떤걸 키 값으로 해야 하…","html":"<h2>지난시간</h2>\n<p>지난시간, 신나게 자동 배포를 만들었다. </p>\n<p>이제 새로 생성된 문서들에 대해서 자동으로 한시간마다 배포가 되어 글이 포스팅된다. </p>\n<p><strong>근데, 이런 경우 글을 어떻게 삭제하지?</strong></p>\n<p><strong>현재 타이틀이 키 값인데 타이틀 명이 바뀌면 내용은 똑같은데 제목만 다른 글이 두 개?</strong> </p>\n<p>그렇다, 삭제 및 수정 기능이 구현되어야 하는 것이다. </p>\n<h2>설계</h2>\n<p>어떤걸 키 값으로 해야 하나 고민이 많았는데, 답은 간단했다. 노션에 ID를 추가하는 기능이 있었다. 이렇게 되면, 내 노션 블로그를 위한 필수 속성은 타이틀, 상태, ID 세 가지가 된다. 이런게 너무 많이 생기는걸 원하지 않지만 어쩔 수 없는 부분이라고 생각이 든다. </p>\n<p>계획은 다음과 같다. </p>\n<ul>\n<li>노션 글들에 ID 속성을 추가해 키값으로 삼는다. </li>\n<li>상태값에 ToBeDeleted, Deleted를 추가한다. </li>\n<li>키 값 - 저장된 디렉토리가 매핑된 메타데이터 json 파일을 생성한다. </li>\n<li>ToBeDeleted를 쿼리해와서, 매핑 테이블을 참조해 데이터를 삭제 후 매핑 정보도 삭제하고 Deleted 상태로 바꿔준다. </li>\n<li>Ready를 쿼리해와서 매핑 테이블을 참조해 기존 데이터를 삭제 후 매핑 정보를 갱신하고 마크다운을 다시 저장한다. </li>\n</ul>\n<p>이렇게 하면 수정과 삭제에 모두 대응이 가능해보인다!</p>\n<h2>구현</h2>\n<p>우선, 전역적으로 메타데이터를 읽어오고, 메모리에 데이터를 저장한 다음 프로그램 종료 직전에 메타 데이터를 한 번에 수정해주는 역할을 할 클래스를 생성했다. </p>\n<details>\n<summary>metadataManager.ts</summary>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> promises <span class=\"token keyword\">as</span> fs <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fs'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">METADATA_FILE_PATH</span> <span class=\"token operator\">=</span> <span class=\"token string\">'./pageMetadata.json'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PageMetadata</span> <span class=\"token punctuation\">{</span>\n    url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Metadata</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>pageId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> PageMetadata<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MetadataManager</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> instance<span class=\"token operator\">:</span> MetadataManager<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> metadata<span class=\"token operator\">:</span> Metadata <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>metadata <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 인스턴스를 반환하는 메서드입니다.\n     * @returns {MetadataManager} MetadataManager 인스턴스\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> MetadataManager <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MetadataManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 메타데이터를 로드합니다.\n     * @returns {Promise&lt;void>} Promise 객체\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">loadMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token constant\">METADATA_FILE_PATH</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>metadata <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Metadata<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'메타데이터 파일 읽기 오류:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>metadata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 메타데이터를 반환합니다.\n     * @returns 메타데이터 객체 또는 null\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Metadata <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>metadata<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 페이지 메타데이터를 업데이트합니다.\n     *\n     * @param pageId 페이지 식별자\n     * @param pageData 페이지 메타데이터\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">updatePageMetadata</span><span class=\"token punctuation\">(</span>pageId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> pageData<span class=\"token operator\">:</span> PageMetadata<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>metadata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>metadata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>metadata<span class=\"token punctuation\">[</span>pageId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pageData<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 페이지 메타데이터를 삭제합니다.\n     * @param pageId 삭제할 페이지의 ID\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">deletePageMetadata</span><span class=\"token punctuation\">(</span>pageId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>metadata <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>metadata<span class=\"token punctuation\">[</span>pageId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">delete</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>metadata<span class=\"token punctuation\">[</span>pageId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 메타데이터를 파일에 저장합니다.\n     * @returns 메타데이터가 성공적으로 저장될 때 해결되는 Promise입니다.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">saveMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>metadata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token constant\">METADATA_FILE_PATH</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>metadata<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'메타데이터 파일 저장 오류:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</details>\n<p>이 클래스는 프로그램 시작과 동시에 초기화되며, 끝날 때 메타데이터 파일을 갱신하는 역할을 할 것이다. </p>\n<p>정확한 매개변수는 아직 정하지 않았으며, 초안만 짜뒀다. </p>\n<p>이제 내일, 이 클래스를 명확히 정의하고 이 클래스를 사용해 수정/삭제를 구현하면 된다. </p>","frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(9)","date":"February 02, 2024","update":"February 02, 2024","tags":["Blogging","Typescript","Hobby","Notion-API"],"series":"GitHub Pages와 Notion API 연동"},"fields":{"slug":"/NotionAPI를-활용한-자동-포스팅9/","readingTime":{"minutes":4.615}}},"seriesList":{"edges":[{"node":{"id":"6b823011-f4ee-564b-9bd2-1fd97f52c42a","fields":{"slug":"/Notion-API1/"},"frontmatter":{"title":"Notion API(1)"}}},{"node":{"id":"09f8fd32-26e0-5a52-8ede-e14ffdaaf560","fields":{"slug":"/githubio를-이용한-블로그/"},"frontmatter":{"title":"github.io를 이용한 블로그"}}},{"node":{"id":"d010a89e-4473-5753-aaf3-f7922debcba1","fields":{"slug":"/githubio-자동배포/"},"frontmatter":{"title":"github.io 자동배포"}}},{"node":{"id":"b165881c-d15e-57f0-a697-dfc416607285","fields":{"slug":"/Notion-API2/"},"frontmatter":{"title":"Notion API(2)"}}},{"node":{"id":"5f70e270-91df-52dd-87a0-14923a1eb340","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅"}}},{"node":{"id":"73f01dea-ec1f-5e8a-8eac-87112810be50","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅2/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(2)"}}},{"node":{"id":"6f909200-5e34-5498-b75a-027a07c8de61","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅3/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(3)"}}},{"node":{"id":"4db310b8-3437-5938-ac47-22aad4204559","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅4/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(4)"}}},{"node":{"id":"5dcb73b9-f91e-554f-888c-6c8183a8b74a","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅5/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(5)"}}},{"node":{"id":"53fa48e0-5c1f-5401-85bc-1627e52e6ffd","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅6/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(6)"}}},{"node":{"id":"411d959a-7988-5fed-af68-ca055e1d1823","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅7/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(7)"}}},{"node":{"id":"87ec1cfb-0d3c-589c-892e-edf6d04f51fd","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅8/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(8)"}}},{"node":{"id":"9578cb37-cba5-5b4d-9871-e69d1951cd13","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅9/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(9)"}}}]},"previous":{"fields":{"slug":"/NotionAPI를-활용한-자동-포스팅10/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(10)"}},"next":{"fields":{"slug":"/Typescript의-열거형/"},"frontmatter":{"title":"Typescript의 열거형"}}},"pageContext":{"id":"9578cb37-cba5-5b4d-9871-e69d1951cd13","series":"GitHub Pages와 Notion API 연동","previousPostId":"1788468a-a058-5b9e-8b9c-457a04951c79","nextPostId":"b92fcc1f-ac7a-55ba-b5dc-eeef8264b2c5"}},"staticQueryHashes":[],"slicesMap":{}}