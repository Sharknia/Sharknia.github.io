{"componentChunkName":"component---src-templates-post-jsx","path":"/FastAPI에서-Postgresql의-커넥션-관리/","result":{"data":{"site":{"siteMetadata":{"title":"SharkniA"}},"markdownRemark":{"id":"f15732ca-1b29-5230-aa8f-d32fd8ce5769","excerpt":"현재 회사의 서비스에서 RDB를 사용하지 않고 NoSQL(DynamoDB)만 사용해서 어플리케이션 서비스를 하고 있었다.  필연적으로 RDB를 도입하게 되었고, supabase를 사용해보고 싶어서 DB는 깊은 고찰 없이 아무도 사용해본 적이 없었던 Postgresql을 고르게 되었다. 이것이 고생의 시작이었다.  그 고생을 기록해둔다.  1. 커넥션 직접…","html":"<p>현재 회사의 서비스에서 RDB를 사용하지 않고 NoSQL(DynamoDB)만 사용해서 어플리케이션 서비스를 하고 있었다. </p>\n<p>필연적으로 RDB를 도입하게 되었고, supabase를 사용해보고 싶어서 DB는 깊은 고찰 없이 아무도 사용해본 적이 없었던 Postgresql을 고르게 되었다.</p>\n<p>이것이 고생의 시작이었다. </p>\n<p>그 고생을 기록해둔다. </p>\n<h3>1. 커넥션 직접 연결</h3>\n<p>MySQL, Oracle, MsSQL등을 사용해봤지만 Postgresql은 처음이었다. 아무 생각없이 커넥션을 바로 연결했고 곧장 문제가 발생했다. </p>\n<p>supabase에서 사용하는 요금제에서 커넥션을 65개까지 만들 수 있게끔 되어있었는데, 수시로 이 수치를 넘어버렸다. 작업 시작 당시 테스트 서버에서는 인스턴스를 5개를 사용하고 있었고, 기본값으로 인스턴스 하나 당 연결 5개를 사용하고 있었서 단순히 산술적으로는 65개를 넘어서는 안되는데 계속해서 65개를 넘겨서 DB 서버가 지속적으로 죽고 있었다. </p>\n<h3>2. 커넥션 폭증, 첫번째 추측</h3>\n<p>첫번째 추측으로는 세션의 생명주기를 관리하는 코드가 정상적으로 작동하는지 여부를 의심했다. 비동기에서의 세션 관리를 위해 의존성 주입 방식을 통한 세션 관리 방법을 선택하고 있었는데, 해당 코드를 다음과 같이 강화해주었다. </p>\n<h4>수정 전 코드</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_db_session</span><span class=\"token punctuation\">(</span>db_conn<span class=\"token punctuation\">:</span> Engine <span class=\"token operator\">=</span> Depends<span class=\"token punctuation\">(</span>get_db_connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> AsyncIterable<span class=\"token punctuation\">[</span>Session<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> sessionmaker<span class=\"token punctuation\">(</span>db_conn<span class=\"token punctuation\">,</span> class_<span class=\"token operator\">=</span>AsyncSession<span class=\"token punctuation\">,</span> expire_on_commit<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> session<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">yield</span> session</code></pre></div>\n<h4>수정 후 코드</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_db_session</span><span class=\"token punctuation\">(</span>db_conn<span class=\"token punctuation\">:</span> Engine <span class=\"token operator\">=</span> Depends<span class=\"token punctuation\">(</span>get_db_connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> AsyncIterable<span class=\"token punctuation\">[</span>Session<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> sessionmaker<span class=\"token punctuation\">(</span>db_conn<span class=\"token punctuation\">,</span> class_<span class=\"token operator\">=</span>AsyncSession<span class=\"token punctuation\">,</span> expire_on_commit<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> session<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">yield</span> session\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"[get_db_session] </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">await</span> session<span class=\"token punctuation\">.</span>rollback<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">raise</span>\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">await</span> session<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이론적으로는 위 코드만 사용해도 정상적으로 세션의 생명주기가 관리가 되어야 하는데, 해외에도 나와 같은 이슈를 겪는 사람이 있는 것으로 보였다. 아래처럼 수정 후에 눈에 띄게 커넥션 숫자가 줄었지만 여전히 DB 서버는 개복치 그 자체였다. 조금 나아지긴 했지만 숨만 쉬면 죽어나가는 상황이 반복되었고 여전히 실사용이 불가능한 심각한 상태의 환자였다. </p>\n<h3>3. 커넥션 폭증, 두번째 추측</h3>\n<p>두번째 추측으로는 dev는 테스트를 위해서 인스턴스 재생성이 꽤 잦았는데, 이 과정에서 Connection이 계속해서 다시 만들어지면서 연결이 폭증하는 것으로 보였다. </p>\n<p>Postgresql 설정에서 IDLE 상태로 들어간지 오래된 커넥션은 강제로 죽이는 옵션도 찾았는데, supabase에서는 해당 옵션값 설정은 지원하지 않았다. 아무래도 일반적인 대응 방법은 아닌것으로 보였다.\n인스턴스가 재생성 될때마다 연결이 안끊긴다면? 애초에 연결을 많이 안만들면 되는게 아닌가? 라는 결론에 다다랐다. 따라서 자연스럽게 Pooler를 사용하기로 했다. Supabase에서도 공식적으로 Pooler를 (당연히) 지원하므로 이는 완벽한 해결책으로 생각됐다. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    Pooler란?</code></pre></div>\n<p>데이터베이스 서버와 클라이언트 애플리케이션 간의 연결을 관리하는 소프트웨어이다. 이는 데이터베이스 서버에 대한 연결 요청을 효율적으로 처리하고 성능을 최적화하는 데 도움을 준다. </p>\n<h4>연결 재사용</h4>\n<p>풀러는 데이터베이스 서버에 대한 연결을 재사용 할 수 있게 함으로써 매번 새로운 연결을 생성하는 오버헤드를 감소시킨다. </p>\n<h4>부하 관리</h4>\n<p>동시에 많은 클라이언트 요청을 처리할 수 있도록 도와주며 데이터베이스 서버에 가해지는 부하를 분산시킨다. </p>\n<h4>성능 최적화</h4>\n<p>연결 설정과 해제에 소요되는 시간을 줄임으로써 전반적인 애플리케이션 성능을 향상시킨다. </p>\n<h4>자원 관리</h4>\n<p>데이터베이스 연결에 사용되는 리소스를 효율적으로 관리한다. </p>\n<h4>스케일링</h4>\n<p>애플리케이션 확장성을 지원하며 사용자 요청 증가 시에도 안정적인 서비스 제공을 돕는다. </p>\n<p>풀러의 사용은 특히 많은 수의 동시 사용자와 트랜잭션이 있는 대규모 시스템에서 매우 중요하다. 데이터베이스에 대한 연결을 효과적으로 관리함으로써 시스템의 안정성, 성능, 그리고 확장성을 향상시킬 수 있다. </p>\n<h3>4. Pooler 도입</h3>\n<p>supabase의 pooler는 PgBouncer를 제공하며, 사용법이 매우 간단했다. 기존에 사용하던 5432번 포트 대신 6543 포트로 바꿔서 연결해주기만 하면 됐다. </p>\n<p>또 다시 곧장 문제가 발생했다. Supabase의 PgBouncer  Poolmode는 기본적으로 Transation 모드였는데, 해당 모드에서는 SqlAlchemy의 비동기 엔진의 캐싱 기능을 지원하지 않았다. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    Pgbouncer의 Pool Mode</code></pre></div>\n<h4>Session</h4>\n<p>가장 기본적인 풀링 모드로 클라이언트가 연결을 끊을 때까지 PgBouncer는 해당 클라이언트 연결을 데이터베이스 서버에 계속 연결 상태로 유지한다. </p>\n<h4>Transaction</h4>\n<p>이 모드에서 PgBouncer는 각 SQL 트랜잭션이 완료될 때마다 연결을 풀로 반환한다. 이는 트랜잭션간에 서버 세션 상태를 유지하지 않아므로 세션 수준의 상태 설정이 트랜잭션간에 유지되지 않는다. Supabase의 Postgresql의 Pool mode는 기본적으로 Transacion 모드로 설정되어있다. </p>\n<h4>Statement</h4>\n<p>가장 제한적인 풀링 모드로 각 SQL 문(statement)이 완료될 때마다 연결을 풀로 반환한다. Supabase의 Postgresql은 해당 모드를 지원하지 않는다. </p>\n<h3>5. Pooler 사용시 인스턴스 생성 에러 발생</h3>\n<p>이번엔 문제가 바로 발생하지는 않았다. 당일은 지나갔으나 다음날이 되어서야 발견했다. 인스턴스 오류가 발생해서 항사 연결이 끊기는 것도 아니고 간헐적으로 연결이 끊기고 있었다. </p>\n<h4>당시 발생한 인스턴스 생성 에러</h4>\n<div class=\"gatsby-highlight\" data-language=\"plaintext\"><pre class=\"language-plaintext\"><code class=\"language-plaintext\">Log ID\n5c0963cf-d16a-4cf3-b3fe-33c99147f879\nLog Timestamp (UTC)\n2023-12-11T02:36:52.732Z\nLog Event Message\npassword authentication failed for user \"postgres\"\nLog Metadata\n[\n  {\n    \"file\": null,\n    \"host\": \"db-fskkusemekciragirqyd\",\n    \"metadata\": [],\n    \"parsed\": [\n      {\n        \"application_name\": null,\n        \"backend_type\": \"client backend\",\n        \"command_tag\": \"authentication\",\n        \"connection_from\": \"61.1.172.3:56746\",\n        \"context\": null,\n        \"database_name\": \"postgres\",\n        \"detail\": \"Connection matched pg_hba.conf line 91: \\\"host  all  all  0.0.0.0/0     scram-sha-256\\\"\",\n        \"error_severity\": \"FATAL\",\n        \"hint\": null,\n        \"internal_query\": null,\n        \"internal_query_pos\": null,\n        \"leader_pid\": null,\n        \"location\": null,\n        \"process_id\": 89111,\n        \"query\": null,\n        \"query_id\": 0,\n        \"query_pos\": null,\n        \"session_id\": \"657675c4.15c17\",\n        \"session_line_num\": 2,\n        \"session_start_time\": \"2023-12-11 02:36:52 UTC\",\n        \"sql_state_code\": \"28P01\",\n        \"timestamp\": \"2023-12-11 02:36:52.732 UTC\",\n        \"transaction_id\": 0,\n        \"user_name\": \"postgres\",\n        \"virtual_transaction_id\": \"47/2627\"\n      }\n    ],\n    \"parsed_from\": null,\n    \"project\": null,\n    \"source_type\": null\n  }\n]</code></pre></div>\n<p>같은 설정에 같은 서버인데 뜬금없이 간헐적으로 패스워드 에러가 발생하니 죽을맛이었다. </p>\n<p>그러면 안되지만, 오류의 빈도수라도 적다면 그냥 무시하고 넘어갈텐데 무시하기엔 높은 빈도로 에러가 발생했다. PgBouncer의 지원이 2024년 1월로 끝난다고 하니 애초에 비동기와의 호환성 자체가 좋지 않아보였다. 이 시점에서 Pooler 사용을 포기하고 다른 방법을 찾기로 했다. </p>\n<p>PgBouncer 지원이 끊기고 대안으로 Superbase에서는 <a href=\"https://github.com/supabase/supavisor\">https://github.com/supabase/supavisor</a>를 제시하고 있었는데, 아직 그다지 완성도가 높지 않아보였으며(본인들의 공식 문서에도 없으므로) 시간이 넉넉하지 않아 도입이 망설여졌다. 그래서 다시 커넥션 직접 연결을 선택하고, 커넥션이 폭증하는 문제 자체를 해결하기로 했다. </p>\n<h3>6. 커넥션 직접 연결로 회귀</h3>\n<p>여담으로, 일을 하면서 챗지피티의 도움을 참 많이 받는다. 그런데 이번 업무를 처리하면서 Deep한 업무일수록 챗지피티가 4.0이라도 헛소리를 많이 한다는 사실을 알게됐다. 어떻게 알았냐고? 나도 알고 싶지 않았다. </p>\n<p>아예 처음으로 돌아와서 커넥션 폭증에 대해서 다시 한 번 알아보기로 했다. 이쯤에서 이미 실서버는 오픈을 해야 했기 때문에, 커넥션 직접 연결로 바꾸고 추가 결제를 해서 커넥션 총 개수를 200여개로 늘려버렸다. 실서버에서는 인스턴스가 바뀌는 일이 자주 있는 일이 아니었으므로, 모니터링 결과 IDLE 상태로 접어든 죽은 커넥션도 12시간 안에 종료가 되는 것을 경험적으로 확인했으므로 실서버에서는 200개 정도로 커넥션 연결 가능 개수를 늘려두면 어쨌건 서비스가 가능했다. </p>\n<p>이렇게 실서버를 열어두고 문제를 해결하기 위해 시간을 녹이기 시작했다. </p>\n<p>커넥션 자체의 관리는 이론적으로는 아주 간단했다. 앱을 시작할 때에 커넥션을 열며, 앱을 종료할 때 커넥션을 닫는다. 이를 위해서 FastAPI의 <code class=\"language-text\">on_event(”startup”)</code>과 <code class=\"language-text\">on_event(”shutdown”)</code> 을 사용했다. 챗지피티도 이 코드를 알려줬고, 어느 블로그를 봐도 모두 이 코드를 사용하고 있었다. </p>\n<p><a href=\"https://fastapi.tiangolo.com/advanced/events/#alternative-events-deprecated\">https://fastapi.tiangolo.com/advanced/events/#alternative-events-deprecated</a></p>\n<p>근데 충격적이게도 이 방법은 이미 지원이 중단된 방법이었다.  이 방법 대신 lifespan 방법을 선택해야 했는데, 이 방법에 대해서 챗지피티는 알고 있음에도 불구하고 여전히 지원 중단된 방법을 추천하는 것을 보고  이 시점에서 챗지피티에 대한 신뢰를 상당 부분 잃어버리고 사용 빈도가 확 줄게 되었다. 나중에 알게 되지만 이 코드의 문제는 아니었지만! 아무튼 신뢰가 엄청나게 없어져버렸다. </p>\n<p>해당 코드를 lifespan을 활용한 코드로도 변경하고도 여전히 문제는 반복됐다. 앱이 시작될 때는 코드가 정상적으로 작동했지만, 컨테이너 안에서 앱이 종료될 때에는 종료 코드가 정상적으로 작동하지 않았다. </p>\n<p>이를 위해서 sigterm을 활용해 직접 종료 코드를 잡아서 실행하는 방법도 고려했지만 이 방법 역시 작동하지 않았다. </p>\n<p>하지만 아주 삽질은 아니어서, 로컬에서 실행한 경우에는 정상적으로 종료 코드가 작동하고 커넥션이 끊어지는 것을 확인해버렸다. </p>\n<h3>7. 문제 해결</h3>\n<p>힞;민 모드를 바꿨음에도 캐싱은 여전히 작동하지 않아서 캐싱을 강제로 꺼야 했고 잘 꺼지지도 않았는지 이후에도 Sqlalchemy의 캐싱 과정에서 키값이 중복되게 생성되는 문제가 있어 해당 부분을 오버라이드 해서 키 값이 중복되지 않게 만들게 해주는 등 문제가 있었지만 일단은 연결이 끊기거나 커넥션이 폭증하지 않아 해결이 된 것으로 보였다. </p>\n<p>사실 이 전에 종료 신호가 정상적으로 어플리케이션에 도달하지 못하는 것이 아닌가? 에 대해서 인지를 하고 있었다. 도커 컨테이너를 강제 종료 하면 기본적으로 docker는 1번 프로세스에만 종료 명령을 정상적으로 전달하고 나머지 프로세스에게는 종료 명령을 정상 전달하지 않는다. 도커 작업은 다른 개발자가 진행했는데, 컨테이너 안에서 실행되는 작업이라곤 Uvicorn 하나이므로 당연히 1번 프로세스일것이다 라는 말을 들어서 이 부분을 점검해볼 생각을 못하고 있었다. </p>\n<p>근데, 로컬에서 실행했을때에는 정상적으로 커넥션이 끊어지는데 도커 컨테이너를 통해서 실행한 경우에는 정상 종료가 되지 않는다? 이 문제를 확인하고 나서야 이 부분을 점검해볼 생각이 들었고, 점검 결과 충격적이게도 Uvicorn이 1번 프로세스로 실행되지 않고 있었다. </p>\n<p>Dumb-init이라는 Docker 컨테이너의 모든 프로세스에게 종료 신호를 보내주는 소프트웨어도 잠깐 고려했지만, 간단하게 Docker exec 부분을 수정해 Uvicorn이 1번 프로세스로 컨테이너 안에서 실행되게끔 하자 거짓말처럼 모든 문제가 해결되었다. </p>\n<h3>8. 회고</h3>\n<p>전 회사에서도 이미 만들어진 커넥션을 쓰거나, 그냥 가이드대로 연결하면 대충 됐기 때문에 DB와 서버의 연결에 관해서 깊게 고찰해본 적이 없었다. 이번 일을 겪으면서 일단 DB와 서버의 연결에 대해.. 대충 알고 있던 부분들에 대해서 깊은 학습이 되었다. </p>\n<p>문제해결 방법을 가장 마지막에 발견했지만, 사실 꼼꼼히 살폈다면 초장에 해결할 수 있던 간단한 문제였다. 돌고 돌아 삥 돌아 해결을 했지만 최종적인 코드 수정은 굉장히 적었다. 공부 했으니 한잔해~ 하고 넘어가기에는 무보수 야근이 너무 잦았기 때문에 (덕분인지 시원하게 A형 독감도 걸렸다. 아무튼 야근 탓이다. ) 억울한 부분이 크다. </p>\n<p>챗지피티에 대한 신뢰가 컸는데, 이번 일을 진행하면서는 챗지피티 때문에 뱅뱅 돌아가게 된 부분이 많았다. 확실히 겉핥기 부분만 챗지피티에게 기대야 하며(또는 반복적인 일) 딥 한 문제나 조금이라도 인터넷에 자료가 적은 문제들에 대해서는 공식문서를 신뢰해야 한다는 사실을 다시 한 번 뼈저리게 느꼈다. 이후로 나는 예전처럼 챗지피티를 많이 쓰지는 않는다.. 쓰더라도 조심히 사용한다. </p>\n<p>한편으로, 커넥션 직접 연결 방법을 선택해 문제를 해결했지만 이게 완벽히 올바른 방법이라고는 생각이 들지 않는다. 아직은 서비스의 크기가 완벽하게 크지는 않기 때문에 이 방법으로도 가능하지만, Pooler를 사용하는 것이 올바른 해결 방법이 아닐까? 지금도 단순히 문제를 피해 도망친 것이라고밖에 생각이 들지 않는다. 특히 Pooler로 인해 발생한 문제들은 풀리지 않은 미스테리가 너무 많이 남았다. </p>\n<p>추후 기회가 있다면 supavisor를 기반으로 다시 만들어보고 싶은 생각이 있다. 아니, 반드시 그래야 한다고 생각이 든다.</p>","frontmatter":{"title":"FastAPI에서 Postgresql의 커넥션 관리","date":"December 15, 2023","update":"February 02, 2024","tags":["Python","FastAPI","DataBase","Work","Postgresql"],"series":null},"fields":{"slug":"/FastAPI에서-Postgresql의-커넥션-관리/","readingTime":{"minutes":19.39}}},"seriesList":{"edges":[{"node":{"id":"b1fa34d8-79a6-5920-b77c-fbf3bc57100b","fields":{"slug":"/화상상담을-위한-Janus-구성/"},"frontmatter":{"title":"화상상담을 위한 Janus 구성"}}},{"node":{"id":"36ed6446-4d80-5d51-87fe-7cbb02582980","fields":{"slug":"/JavaScript의-특징-브라우저-동작-원리/"},"frontmatter":{"title":"JavaScript의 특징, 브라우저 동작 원리"}}},{"node":{"id":"1890a1d7-34c1-53bd-a8bd-9bdfd39e91c3","fields":{"slug":"/JavaScript-기본-문법/"},"frontmatter":{"title":"JavaScript 기본 문법"}}},{"node":{"id":"61ba989b-e166-5573-a895-1f71aa176358","fields":{"slug":"/JavaScript의-변수/"},"frontmatter":{"title":"JavaScript의 변수"}}},{"node":{"id":"09afa1c5-5d39-532c-8dbb-5ba9e4af5b42","fields":{"slug":"/JavaScript의-타입-변환과-단축-평가/"},"frontmatter":{"title":"JavaScript의 타입 변환과 단축 평가"}}},{"node":{"id":"a81f1c25-10c3-52c4-8594-54806409ea15","fields":{"slug":"/JavaScript-클로저/"},"frontmatter":{"title":"JavaScript 클로저"}}},{"node":{"id":"6f1a58a9-6d27-5238-a531-618fc2d38f6a","fields":{"slug":"/NestJS-소개/"},"frontmatter":{"title":"NestJS 소개"}}},{"node":{"id":"b1b9709f-6909-592c-b003-7ff67d3ca0fe","fields":{"slug":"/DB-튜닝-경험/"},"frontmatter":{"title":"DB 튜닝 경험"}}},{"node":{"id":"6a1bda4f-ebe2-5b4f-980e-0484f92834f9","fields":{"slug":"/MORETHAN-LOG-설치/"},"frontmatter":{"title":"MORETHAN-LOG 설치"}}},{"node":{"id":"192dff3e-aa73-5307-a245-65393ab4e1d9","fields":{"slug":"/RDB관계형-데이터베이스-RDBMS/"},"frontmatter":{"title":"RDB(관계형 데이터베이스) + RDBMS"}}},{"node":{"id":"7ac316a8-f6ea-52cc-a790-b5be80f2bec7","fields":{"slug":"/var와-letconst/"},"frontmatter":{"title":"var와 let,const"}}},{"node":{"id":"e86672d9-847c-55f9-a249-42b4d896508f","fields":{"slug":"/MORETHAN-LOG-수정/"},"frontmatter":{"title":"MORETHAN-LOG 수정"}}},{"node":{"id":"6a5ef575-d133-5b56-b0b6-4db4af7aa70d","fields":{"slug":"/NestJS-설치/"},"frontmatter":{"title":"NestJS 설치"}}},{"node":{"id":"c9c69060-c0a8-5657-b744-46feb11aa3bd","fields":{"slug":"/NestJS의-디렉토리-구조/"},"frontmatter":{"title":"NestJS의 디렉토리 구조"}}},{"node":{"id":"6c0e93ce-fab2-5cd8-b369-8c7e35114bd4","fields":{"slug":"/웹-사이트-프로젝트-vs-웹-응용-프로그램-프로젝트/"},"frontmatter":{"title":"웹 사이트 프로젝트 vs 웹 응용 프로그램 프로젝트"}}},{"node":{"id":"e6017a82-883c-5533-b084-e4d128fba3f5","fields":{"slug":"/Nuget-패키지-dll-추출/"},"frontmatter":{"title":"Nuget 패키지 dll 추출"}}},{"node":{"id":"0747e4e2-4d9c-5f2e-9ad4-db4690dc2756","fields":{"slug":"/무료-웹-호스팅-비교/"},"frontmatter":{"title":"무료 웹 호스팅 비교"}}},{"node":{"id":"dec52422-f02f-5520-bfe2-d277ddc7a455","fields":{"slug":"/PRG-패턴-PostRedirectGet/"},"frontmatter":{"title":"PRG 패턴 (Post/Redirect/Get)"}}},{"node":{"id":"ef3f3ed5-f90e-552f-8c1a-f24d1eeb0573","fields":{"slug":"/Python-venv-Windows/"},"frontmatter":{"title":"Python venv (Windows)"}}},{"node":{"id":"73f61a9c-4b13-5f3c-b288-9f971499e1c9","fields":{"slug":"/print와-pprint/"},"frontmatter":{"title":"print와 pprint"}}},{"node":{"id":"42d9a8c0-c330-548e-a36c-c8b97811df23","fields":{"slug":"/정규화와-역정규화/"},"frontmatter":{"title":"정규화와 역정규화"}}},{"node":{"id":"8bcc825c-89ec-552c-9144-ac6b2afced1e","fields":{"slug":"/트래픽-튜닝/"},"frontmatter":{"title":"트래픽 튜닝"}}},{"node":{"id":"1f906753-4b2c-58e9-8b1d-65dbacd5a5ed","fields":{"slug":"/npx/"},"frontmatter":{"title":"npx"}}},{"node":{"id":"90f8d06a-0a5c-5fa2-bcb7-7ac1b4fccbdc","fields":{"slug":"/Branch/"},"frontmatter":{"title":"Branch"}}},{"node":{"id":"3e072448-1152-518b-89a4-0154bf7ed441","fields":{"slug":"/DataTable-클래스/"},"frontmatter":{"title":"DataTable 클래스"}}},{"node":{"id":"4e96b425-fd44-57b0-a26c-205a2db9f3f9","fields":{"slug":"/Typescript-시작하기/"},"frontmatter":{"title":"Typescript 시작하기"}}},{"node":{"id":"825a1946-8a6a-559a-9e11-93447cdedcdf","fields":{"slug":"/gitignore/"},"frontmatter":{"title":"gitignore"}}},{"node":{"id":"c65d18a5-967b-591b-a184-2f380d3f7847","fields":{"slug":"/Factory-Pattern/"},"frontmatter":{"title":"Factory Pattern"}}},{"node":{"id":"ee0abcf0-eb6f-569e-a2df-26ef807ffd53","fields":{"slug":"/네이밍-규칙naming-conventions/"},"frontmatter":{"title":"네이밍 규칙(naming conventions)"}}},{"node":{"id":"b3e00fd2-84a2-5bbc-8976-a76d7948ba15","fields":{"slug":"/AWS-API-Gateway/"},"frontmatter":{"title":"AWS API Gateway"}}},{"node":{"id":"c1d28daf-f0b4-521c-926c-88c14a61a609","fields":{"slug":"/ColdStart/"},"frontmatter":{"title":"ColdStart"}}},{"node":{"id":"45a48b17-f235-5fcf-90c4-f186e96b788e","fields":{"slug":"/Serverless/"},"frontmatter":{"title":"Serverless"}}},{"node":{"id":"59b56ebf-8c53-5362-82a7-3deb113c9308","fields":{"slug":"/Dynamo-DB/"},"frontmatter":{"title":"Dynamo DB"}}},{"node":{"id":"b1e5d38b-5dfb-5406-a693-d18281ac16f8","fields":{"slug":"/NoSQL/"},"frontmatter":{"title":"NoSQL"}}},{"node":{"id":"97236b20-03d7-59be-b021-0cf4f12ba08f","fields":{"slug":"/REST/"},"frontmatter":{"title":"REST"}}},{"node":{"id":"67555ff4-c43d-50d6-91fc-7db62ae5324a","fields":{"slug":"/TypeError-non-default-argument-content-follows-default-argument/"},"frontmatter":{"title":"TypeError: non-default argument 'content' follows default argument"}}},{"node":{"id":"247e0d6c-cb1f-523b-a365-12fbdf26de54","fields":{"slug":"/브랜치-관리-전략/"},"frontmatter":{"title":"브랜치 관리 전략"}}},{"node":{"id":"fd68eada-5e64-5d6e-ad3e-e7cccc28c242","fields":{"slug":"/Unit-Test단위-테스트/"},"frontmatter":{"title":"Unit Test(단위 테스트)"}}},{"node":{"id":"8fc059ee-a057-5299-9416-e5fe9a21f3b5","fields":{"slug":"/__post_init__/"},"frontmatter":{"title":"__post_init__"}}},{"node":{"id":"facbb85b-b3b0-54f1-b2ac-5593cedf9d02","fields":{"slug":"/dataclass/"},"frontmatter":{"title":"dataclass"}}},{"node":{"id":"f517cf21-d25d-5ad1-90b2-7cd04bdc1de5","fields":{"slug":"/FastAPI와-DDD/"},"frontmatter":{"title":"FastAPI와 DDD"}}},{"node":{"id":"c76d3263-2674-5711-9753-c7b1884886a2","fields":{"slug":"/vercel-배포-자동화/"},"frontmatter":{"title":"vercel 배포 자동화"}}},{"node":{"id":"643a5e74-e453-5eaf-be99-4fe90007fc0d","fields":{"slug":"/AWS-ECSElastic-Container-Service/"},"frontmatter":{"title":"AWS ECS(Elastic Container Service)"}}},{"node":{"id":"295a3a5e-5f68-53dd-a096-99c650a09f85","fields":{"slug":"/Blue-Green-Deploy-전략/"},"frontmatter":{"title":"Blue Green Deploy 전략"}}},{"node":{"id":"ef099c50-5b09-5374-b773-1646367f1a07","fields":{"slug":"/CloudFront/"},"frontmatter":{"title":"CloudFront"}}},{"node":{"id":"f2c13448-7669-5227-8e74-c0db79f8efa6","fields":{"slug":"/Poetry/"},"frontmatter":{"title":"Poetry"}}},{"node":{"id":"327528cd-aa5a-5ecb-9d02-1747c311b92a","fields":{"slug":"/DynamoDB의-동시성-제어Concurrency-Control/"},"frontmatter":{"title":"DynamoDB의 동시성 제어(Concurrency Control)"}}},{"node":{"id":"c61f89ee-7345-5822-a5bb-1ee417382592","fields":{"slug":"/FastAPI/"},"frontmatter":{"title":"FastAPI"}}},{"node":{"id":"6fde18dc-7c77-5d99-8142-13ade8537ae3","fields":{"slug":"/Pydantic-모델/"},"frontmatter":{"title":"Pydantic 모델"}}},{"node":{"id":"f97d2d57-9678-56e0-a700-2bd7ef00aca3","fields":{"slug":"/FastAPI의-데코레이터/"},"frontmatter":{"title":"FastAPI의 데코레이터"}}},{"node":{"id":"9b37002b-b912-5345-b81b-46951cc4a970","fields":{"slug":"/생성기generate-패턴/"},"frontmatter":{"title":"생성기(generate) 패턴"}}},{"node":{"id":"483a498b-b542-5587-989a-52dab4c1214c","fields":{"slug":"/FastAPI에서-데코레이터와-Dependency/"},"frontmatter":{"title":"FastAPI에서 데코레이터와 Dependency"}}},{"node":{"id":"80de20ad-d374-517c-ac92-d2877e4c06a8","fields":{"slug":"/FastAPI와-asyncio/"},"frontmatter":{"title":"FastAPI와 asyncio"}}},{"node":{"id":"87a218c9-82b0-5f05-90fa-a0d9da888853","fields":{"slug":"/aiohttp/"},"frontmatter":{"title":"aiohttp"}}},{"node":{"id":"222a8a91-8da9-500a-9074-4dd115cbe21f","fields":{"slug":"/단축어로-SLACK-프로필-변경하기/"},"frontmatter":{"title":"단축어로 SLACK 프로필 변경하기"}}},{"node":{"id":"75fcb75f-0a52-533f-a038-0a8460398f25","fields":{"slug":"/PynamoDB와-boto3-PynamoDB의-커넥션/"},"frontmatter":{"title":"PynamoDB와 boto3, PynamoDB의 커넥션"}}},{"node":{"id":"f15732ca-1b29-5230-aa8f-d32fd8ce5769","fields":{"slug":"/FastAPI에서-Postgresql의-커넥션-관리/"},"frontmatter":{"title":"FastAPI에서 Postgresql의 커넥션 관리"}}},{"node":{"id":"e0b43964-5998-5379-becc-614d8c62f076","fields":{"slug":"/Sqlalchemy-비동기-엔진에서의-Postgresql-Pooler/"},"frontmatter":{"title":"Sqlalchemy 비동기 엔진에서의 Postgresql Pooler"}}},{"node":{"id":"ef31575e-f174-58f7-84b7-832d38e952f9","fields":{"slug":"/FastAPI의-Pagenation/"},"frontmatter":{"title":"FastAPI의 Pagenation"}}},{"node":{"id":"c661de9c-fcb1-5bc6-b987-28d7cd303acb","fields":{"slug":"/SqlAlchemy의-QueuePool/"},"frontmatter":{"title":"SqlAlchemy의 QueuePool"}}},{"node":{"id":"7591133a-cdeb-5c9a-ab49-4ca7c8f3dea7","fields":{"slug":"/Pydantic-Model의-응용/"},"frontmatter":{"title":"Pydantic Model의 응용"}}},{"node":{"id":"cf792859-1afc-5118-bf50-0752527a6569","fields":{"slug":"/Union-Type/"},"frontmatter":{"title":"Union Type"}}},{"node":{"id":"c2c531ea-1018-5ad8-87b3-c1c027e8f2ee","fields":{"slug":"/우분투-용량-관리/"},"frontmatter":{"title":"우분투 용량 관리"}}},{"node":{"id":"ccff0278-8778-54c6-a28a-ffad6d97612d","fields":{"slug":"/Sqlalchemy에서의-트랜잭션-격리-수준-구현/"},"frontmatter":{"title":"Sqlalchemy에서의 트랜잭션 격리 수준 구현"}}},{"node":{"id":"ee1bfa9e-9eeb-52a2-a33a-88916dcc9119","fields":{"slug":"/트랜잭션-격리-수준Transaction-Isolation-Level/"},"frontmatter":{"title":"트랜잭션 격리 수준(Transaction Isolation Level)"}}},{"node":{"id":"acd438b5-e05c-5772-9da1-3ea3a67cefe0","fields":{"slug":"/Sqlalchemy의-func/"},"frontmatter":{"title":"Sqlalchemy의 func"}}},{"node":{"id":"a7292f80-7079-5082-9645-3def2d6750b8","fields":{"slug":"/PostgreSQL-Advisory-Locks-트랜잭션-레벨에서-구현/"},"frontmatter":{"title":"PostgreSQL Advisory Locks 트랜잭션 레벨에서 구현"}}},{"node":{"id":"8221080c-9128-57cc-b79e-c8a9e7959a90","fields":{"slug":"/동시성-제어문제-해결/"},"frontmatter":{"title":"동시성 제어문제 해결"}}},{"node":{"id":"4e23a734-8707-55b2-824e-d120641e8f1a","fields":{"slug":"/vscode-quick-Suggestions/"},"frontmatter":{"title":"vscode-quick Suggestions"}}},{"node":{"id":"1f589451-3bb6-501a-a892-6492654e760c","fields":{"slug":"/Typescript의-열거형/"},"frontmatter":{"title":"Typescript의 열거형"}}},{"node":{"id":"a5babc02-b843-5c39-85e7-1b34cce43cdd","fields":{"slug":"/Github-Action-Output/"},"frontmatter":{"title":"Github Action Output"}}},{"node":{"id":"8b1f5d89-c5ae-52b6-b3c7-19a8d6afda7a","fields":{"slug":"/Github-Actions/"},"frontmatter":{"title":"Github Actions"}}},{"node":{"id":"b81485d3-7cab-52c0-adf9-f489724dc88f","fields":{"slug":"/Github-Actions-Job---needs/"},"frontmatter":{"title":"Github Actions Job - needs"}}},{"node":{"id":"72e50b04-cb8a-55a6-b4ac-636d3dce4b78","fields":{"slug":"/Github-Actions-Workflow-수동으로-실행하기/"},"frontmatter":{"title":"Github Actions Workflow 수동으로 실행하기"}}},{"node":{"id":"2b53a4ed-50b1-5166-bde5-00f56edc9436","fields":{"slug":"/Typescript의-Testcode-맛보기/"},"frontmatter":{"title":"Typescript의 Testcode 맛보기"}}},{"node":{"id":"dbdceb4a-2ed6-5dbc-aa20-7dc961d63f54","fields":{"slug":"/시맨틱-버전-관리/"},"frontmatter":{"title":"시맨틱 버전 관리"}}},{"node":{"id":"6e6deb6d-e36d-5d2f-b11a-55fbc674c2ea","fields":{"slug":"/SQLAlchemy-create_all-메소드로-데이터베이스-테이블-자동-생성하기/"},"frontmatter":{"title":"SQLAlchemy create_all() 메소드로 데이터베이스 테이블 자동 생성하기"}}},{"node":{"id":"dd65c1da-59ff-5d58-a092-3ecc81bdb4fd","fields":{"slug":"/Sqlalchemy의-index/"},"frontmatter":{"title":"Sqlalchemy의 index"}}},{"node":{"id":"2de5adbd-b426-5f30-8811-ebd7fc04ff66","fields":{"slug":"/위치-기반-검색-기능의-구현/"},"frontmatter":{"title":"위치 기반 검색 기능의 구현"}}},{"node":{"id":"50b9db01-3888-5f30-80bc-b2d8ffd25486","fields":{"slug":"/인앱결제에서-백엔드는-무엇을-준비해야-할까/"},"frontmatter":{"title":"인앱결제에서 백엔드는 무엇을 준비해야 할까?"}}},{"node":{"id":"bb95007b-56db-5930-a9b8-4c09e2e118c4","fields":{"slug":"/식별-관계와-비식별-관계-그리고-CASCADE-옵션의-이해/"},"frontmatter":{"title":"식별 관계와 비식별 관계, 그리고 CASCADE 옵션의 이해"}}},{"node":{"id":"f76f95c7-1554-5431-a30b-7d03c93ac41c","fields":{"slug":"/arc-browser/"},"frontmatter":{"title":"arc browser"}}},{"node":{"id":"ae4611cf-ac19-58f9-be47-e8452f25a2df","fields":{"slug":"/Apple-Silicon과-pyenv/"},"frontmatter":{"title":"Apple Silicon과 pyenv"}}},{"node":{"id":"fe32f546-1476-5dc1-99f4-355cd81fba19","fields":{"slug":"/FastAPI-프로젝트의-시작/"},"frontmatter":{"title":"FastAPI 프로젝트의 시작"}}},{"node":{"id":"7edd7ada-7dda-553b-b007-2e7eacdc0c25","fields":{"slug":"/Geocoder와-Reverse-Geocoder/"},"frontmatter":{"title":"Geocoder와 Reverse Geocoder"}}},{"node":{"id":"ef7e194d-396d-5189-87b2-9905aa8edea4","fields":{"slug":"/Postgresql의-JSON과-JSONB/"},"frontmatter":{"title":"Postgresql의 JSON과 JSONB"}}},{"node":{"id":"ad9ce5f7-33b5-5f19-9087-52c928903f92","fields":{"slug":"/SQLModel에서-unique_constraints-설정하기/"},"frontmatter":{"title":"SQLModel에서 unique_constraints 설정하기"}}},{"node":{"id":"fbd5faae-ec78-5d51-ac80-d809dc5137d2","fields":{"slug":"/Supabase-Local-Dev-환경-꾸미기/"},"frontmatter":{"title":"Supabase Local Dev 환경 꾸미기"}}},{"node":{"id":"939d0130-e4ea-5ae4-a169-be69c0f404f9","fields":{"slug":"/Supabase와-Row-Level-Security-RLS/"},"frontmatter":{"title":"Supabase와 Row-Level Security (RLS) "}}},{"node":{"id":"6c085c2e-fa7b-5dcc-a26f-df91cf9354ea","fields":{"slug":"/Supabase-Local-개발-환경-꾸미기---DB-세팅/"},"frontmatter":{"title":"Supabase Local 개발 환경 꾸미기 - DB 세팅"}}},{"node":{"id":"2a0b1ae0-7af6-5ce1-90ad-57af39dc2085","fields":{"slug":"/Supabase-EdgeFunction---Deno-개발환경-꾸미기/"},"frontmatter":{"title":"Supabase EdgeFunction  - Deno 개발환경 꾸미기"}}},{"node":{"id":"f1f51fb0-adac-5433-9a00-912141ff3182","fields":{"slug":"/Supabase-CLI-db-migration-이력-초기화하기/"},"frontmatter":{"title":"Supabase CLI db migration 이력 초기화하기"}}},{"node":{"id":"bbfd7494-2deb-5de4-88dd-5ffbdd240cf6","fields":{"slug":"/Postgresql-Function-Trigger-생성-쿼리문-확인하기/"},"frontmatter":{"title":"Postgresql Function, Trigger 생성 쿼리문 확인하기"}}},{"node":{"id":"e2d90afb-f1f2-5e1f-aab6-820a0d5cf41c","fields":{"slug":"/postgresql의-pg_jsonschema/"},"frontmatter":{"title":"postgresql의 pg_jsonschema"}}},{"node":{"id":"a692b906-efe4-5b06-a108-de1a09926ea9","fields":{"slug":"/Postgresql에서-ENUM-타입에서-값-삭제하기/"},"frontmatter":{"title":"Postgresql에서 ENUM 타입에서 값 삭제하기"}}},{"node":{"id":"d48736cc-957e-53f5-9f48-aac53d5598e4","fields":{"slug":"/PostgreSQL에서-테이블-로우를-JSON으로-변환하기/"},"frontmatter":{"title":"PostgreSQL에서 테이블 로우를 JSON으로 변환하기"}}},{"node":{"id":"02ae12df-41b7-5333-a060-ecc60974fbab","fields":{"slug":"/RLS에-대한-궁금증-모음/"},"frontmatter":{"title":"RLS에 대한 궁금증 모음"}}},{"node":{"id":"78c2562a-631b-572d-8dee-132c9ff9b074","fields":{"slug":"/Deno에서-URL의-쿼리-스트링Query-String-다루기/"},"frontmatter":{"title":" Deno에서 URL의 쿼리 스트링(Query String) 다루기"}}},{"node":{"id":"bab930ba-913e-596b-a917-bdd124dd36db","fields":{"slug":"/Supabase에서-뷰에도-RLS-적용하기/"},"frontmatter":{"title":"Supabase에서 뷰에도 RLS 적용하기"}}},{"node":{"id":"d6698c34-32be-55f0-94d2-50b66aef1073","fields":{"slug":"/Supabase를-위한-Bitbucket-Pipelines-CICD-워크플로우-구축하기/"},"frontmatter":{"title":"Supabase를 위한 Bitbucket Pipelines CI/CD 워크플로우 구축하기"}}},{"node":{"id":"bc763a45-0f35-5420-9eed-9e6387ff48ee","fields":{"slug":"/Pyenv-local-실행을-했는데-파이썬-버전이-바뀌지-않는다/"},"frontmatter":{"title":"Pyenv local 실행을 했는데 파이썬 버전이 바뀌지 않는다"}}},{"node":{"id":"60b158b5-de2c-56a7-a158-53f3648b2889","fields":{"slug":"/Django-설치/"},"frontmatter":{"title":"Django 설치"}}},{"node":{"id":"711d4b8d-3afb-59f8-a47e-efe8b52f1665","fields":{"slug":"/docker-compose를-활용한-postgresql과-django-커넥션-만들기/"},"frontmatter":{"title":"docker-compose를 활용한 postgresql과 django 커넥션 만들기"}}},{"node":{"id":"3c997249-c541-501d-9479-558a653fc409","fields":{"slug":"/Nextjs-소개와-설치-간단-예제/"},"frontmatter":{"title":"Next.js 소개와 설치, 간단 예제"}}},{"node":{"id":"e04ee4b2-2742-5601-a3f7-147ad7074bc1","fields":{"slug":"/ngrok-로컬-서버를-쉽게-공개하는-도구/"},"frontmatter":{"title":"ngrok: 로컬 서버를 쉽게 공개하는 도구"}}},{"node":{"id":"286a5830-d62e-5ddd-99e9-d237161a5838","fields":{"slug":"/Django-Discord-소셜-회원가입-및-로그인-구현/"},"frontmatter":{"title":"Django Discord 소셜 회원가입 및 로그인 구현"}}},{"node":{"id":"e2facd8b-fe1b-5d7e-8134-327a36c58230","fields":{"slug":"/Nextjs-Supabase-회원가입-구현/"},"frontmatter":{"title":"Next.js + Supabase 회원가입 구현"}}},{"node":{"id":"987a5340-8662-50df-85c0-6b7c3732d791","fields":{"slug":"/Django-프로젝트에-Swagger-설정하기/"},"frontmatter":{"title":"Django 프로젝트에 Swagger 설정하기"}}},{"node":{"id":"989746e1-cdef-5498-8c00-2087bbb27bd7","fields":{"slug":"/Django-Rest-Framework에서-JWT를-이용한-사용자-인증-구현/"},"frontmatter":{"title":"Django Rest Framework에서 JWT를 이용한 사용자 인증 구현"}}},{"node":{"id":"11691347-100c-5676-9729-f22ce8a43272","fields":{"slug":"/Django의-Serializers/"},"frontmatter":{"title":"Django의 Serializers"}}},{"node":{"id":"910235bb-5188-5a17-a705-a552a6684e7d","fields":{"slug":"/Go-입문/"},"frontmatter":{"title":"Go 입문"}}},{"node":{"id":"a1ef6dd3-d896-5758-8f72-9e378dcab0f3","fields":{"slug":"/Go를-활용한-OAuth-20-구현/"},"frontmatter":{"title":"Go를 활용한 OAuth 2.0 구현"}}},{"node":{"id":"55e2a5f0-e2c2-5f20-9bc1-e6f52142b1ab","fields":{"slug":"/Django의-사용자-인증-시스템-커스터마이징/"},"frontmatter":{"title":"Django의 사용자 인증 시스템 커스터마이징"}}},{"node":{"id":"27fc9be6-e48b-52a8-bf6d-c0c664700209","fields":{"slug":"/DRF의-API-View/"},"frontmatter":{"title":"DRF의 API View"}}},{"node":{"id":"19273a3e-a109-5cb0-a53a-102a2c1f1f74","fields":{"slug":"/AWS-활용-테스트-서버-구현-1/"},"frontmatter":{"title":"AWS 활용 테스트 서버 구현 (1)"}}},{"node":{"id":"b443bdc5-d571-57ac-a75f-e433dc12f651","fields":{"slug":"/AWS에서-EC2-인스턴스-생성-및-Visual-Studio-Code로-원격-연결하기/"},"frontmatter":{"title":"AWS에서 EC2 인스턴스 생성 및 Visual Studio Code로 원격 연결하기"}}},{"node":{"id":"88f3a1cc-7ec0-50be-a43d-d969e27c4529","fields":{"slug":"/Django-REST-Framework에서-가상-필드-추가하기/"},"frontmatter":{"title":"Django REST Framework에서 가상 필드 추가하기"}}},{"node":{"id":"ae529d5f-12b2-59f1-89bc-e832cde40652","fields":{"slug":"/Mock과-Stub-Fixture/"},"frontmatter":{"title":"Mock과 Stub, Fixture"}}},{"node":{"id":"388f1fc6-4ef9-5391-ad7c-03a8e88d99e3","fields":{"slug":"/Install-Tailwind-CSS-with-Nextjs/"},"frontmatter":{"title":"Install Tailwind CSS with Next.js"}}},{"node":{"id":"dbba3bc0-4c3c-5d9d-87fa-c9c9650907df","fields":{"slug":"/Ubuntu-DLNA-서버-설정/"},"frontmatter":{"title":"Ubuntu DLNA 서버 설정"}}},{"node":{"id":"626fd5b3-36c4-5633-8916-46f9aeba4756","fields":{"slug":"/GitHub-Container-Registry-vs-Docker-Hub/"},"frontmatter":{"title":"GitHub Container Registry vs Docker Hub"}}},{"node":{"id":"a0117df3-8740-55e0-b9e9-d14f35c4e2a9","fields":{"slug":"/N1-문제/"},"frontmatter":{"title":"N+1 문제"}}},{"node":{"id":"e925ca86-1d32-5737-b469-6b04e049b5be","fields":{"slug":"/N1-문제의-해결방법/"},"frontmatter":{"title":"N+1 문제의 해결방법"}}},{"node":{"id":"7caa9886-de89-5549-a331-43a790e9be9d","fields":{"slug":"/Django의-관리자-페이지-만들기/"},"frontmatter":{"title":"Django의 관리자 페이지 만들기"}}},{"node":{"id":"4a03fdbb-525f-5955-a2f4-d2e3f37dab34","fields":{"slug":"/Django의-startapp/"},"frontmatter":{"title":"Django의 startapp"}}},{"node":{"id":"d02a3ccb-149b-5f4e-b724-2a5c694d9dd6","fields":{"slug":"/SD-카드-기반-디스크-오류-및-해결-과정/"},"frontmatter":{"title":"SD 카드 기반 디스크 오류 및 해결 과정"}}},{"node":{"id":"bd6bfd1a-0643-5893-b4fe-19074e66dee3","fields":{"slug":"/Docker에서-Python-환경-변수-관리/"},"frontmatter":{"title":"Docker에서 Python 환경 변수 관리"}}},{"node":{"id":"0baf5600-7bc6-5104-b434-352d0e8cf8fb","fields":{"slug":"/Python-Mocking시-patch-경로-문제-해결하기/"},"frontmatter":{"title":"Python Mocking시 patch 경로 문제 해결하기"}}}]},"previous":{"fields":{"slug":"/PynamoDB와-boto3-PynamoDB의-커넥션/"},"frontmatter":{"title":"PynamoDB와 boto3, PynamoDB의 커넥션"}},"next":{"fields":{"slug":"/Sqlalchemy-비동기-엔진에서의-Postgresql-Pooler/"},"frontmatter":{"title":"Sqlalchemy 비동기 엔진에서의 Postgresql Pooler"}}},"pageContext":{"id":"f15732ca-1b29-5230-aa8f-d32fd8ce5769","series":null,"previousPostId":"75fcb75f-0a52-533f-a038-0a8460398f25","nextPostId":"e0b43964-5998-5379-becc-614d8c62f076"}},"staticQueryHashes":[],"slicesMap":{}}