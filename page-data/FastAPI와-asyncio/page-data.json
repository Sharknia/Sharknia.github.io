{"componentChunkName":"component---src-templates-post-jsx","path":"/FastAPI와-asyncio/","result":{"data":{"site":{"siteMetadata":{"title":"SharkniA"}},"markdownRemark":{"id":"19a83676-7ebb-5df2-89ee-aad5db0ac510","excerpt":"asyncio란? 소개 파이썬에서 비동기 프로그래밍을 위한 표준 라이브러리이다. 이 라이브러리는  을 사용하여 동시성 코드를 작성하는 데 필요한 구조를 제공한다. 단일 스레드 내에서도 여러 I/O 바운드 작업과 고수준의 구조화된 네트워크 코드를 동시에 실행할 수 있으며, 이는 효율성과 속도에서 큰 이점을 제공한다.  주요 컴포넌트 Event Loop 프로…","html":"<h2>asyncio란?</h2>\n<h3>소개</h3>\n<p>파이썬에서 비동기 프로그래밍을 위한 표준 라이브러리이다. 이 라이브러리는 <code class=\"language-text\">coroutine</code> 을 사용하여 동시성 코드를 작성하는 데 필요한 구조를 제공한다. 단일 스레드 내에서도 여러 I/O 바운드 작업과 고수준의 구조화된 네트워크 코드를 동시에 실행할 수 있으며, 이는 효율성과 속도에서 큰 이점을 제공한다. </p>\n<h3>주요 컴포넌트</h3>\n<h4>Event Loop</h4>\n<p>프로그램의 진입점으로써, 비동기적으로 실행될 다양한 작업들을 관리한다. 작업이 실행 준비가 되면 이벤트 루프는 해당 작업을 실행하고 완료되기를 기다리는 다른 작업으로 제어를 전환한다. </p>\n<h4>Coroutine</h4>\n<p>코루틴은 <code class=\"language-text\">async def</code> 로 정의되는 비동기 함수이다. 코루틴은 <code class=\"language-text\">await</code>  키워드를 사용하여 실행을 일시 중지하고 이벤트 루프에 제어를 반환할 수 있어 다른 코루틴이 실행될 수 있게 한다. </p>\n<h4>Future</h4>\n<p>아직 완료되지 않은 작업을 의미한다. 코루틴이 완료될 때 결과를 저장하거나 예외를 전달할 수 있는데 이를 통해 비동기 작업의 최종 상태를 알 수 있다. </p>\n<h4>Task</h4>\n<p><code class=\"language-text\">Future</code> 를 상속한다. 이는 이벤트 루프에서 코루틴의 실행을 가능하게 한다. Task는 코루틴을 스케줄링하고 실행 결과를 추적한다. </p>\n<h3>사용 예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> asyncio\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">await</span> asyncio<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, World!'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 이벤트 루프 실행</span>\nasyncio<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 예제에서 <code class=\"language-text\">asyncio.run()</code> 함수는 <code class=\"language-text\">main()</code> 코루틴을 이벤트 루프에서 실행한다. <code class=\"language-text\">main()</code> 내부에서 <code class=\"language-text\">asyncio.sleep(1)</code> 은 비동기적으로 1초간 대기하도록 한다. 이 대기 시간동안 이벤트 루프는 다른 코루틴을 실행할 수 있다. </p>\n<h3>동기화 기능</h3>\n<p>asyncio는 비동기 프로그래밍 환경에서 동기화를 위한 여러 도구를 제공한다. asyncio.Lock은 공유 리소스에 대한 동시 액세스를 방지하고 asyncio.Event, asyncio.Condition, asyncio.Semaphore와 같은 다른 동기화 기본 요소도 사용할 수 있다. </p>\n<h3>네트워킹 지원</h3>\n<p>TCP, UDP, SSL, TLS 등을 비롯한 다양한 네트워크 프로토콜에 대한 지원을 제공한다. asyncio 스트림을 사용하여 비동기적으로 네트워크 I/O 작업을 할 수 있으며 이를 통해 서버와 클라이언트 양쪽 모두에서 비동기 네트워크 어플리케이션을 만들 수 있다. </p>\n<h3>성능과 제한 사항</h3>\n<p>입출력 바운드 작업과 고수준 구조화된 네트워크 코드를 실행하는데 효율적이다. 입출력 작업이 블로킹 되는 것을 피하면서 동시에 여러 입출력 작업을 관리할 수 있기 때문이다. </p>\n<p>예를 들어 웹서버는 많은 수의 동시 http 요청을 처리해야 하며 각 요청은 네트워크 입출력에 의존적이다. asyncio는 각 네트워크 연산이 완료되기를 기다리는 동안 다른 연산으로 전환하여 리소스를 효율적으로 사용할 수 있다. </p>\n<p>그러나 계산을 많이 요구 하는 작업(CPU 바운드 작업)에는 적압하지 않다. 이 작업은 병렬 처리가 필요한데, 이는 프로세스나 스레드를 여러개 사용해야 함을 의미한다. asyncio는 싱글 스레드, 싱글 프로세스 디자인이므로 병렬 CPU 작업을 위해서는 별도의 모듈이나 멀티 스레딩을 사용해야 한다. </p>\n<h3>생명 주기</h3>\n<h4>이벤트 루프 생성</h4>\n<p>asyncio 프로그램은 이벤트 루프라는 중앙 실행기를 사용하여 실행된다. 이벤트 루프는 프로그램의 진입점에서 생성된다. 특히 아래의 함수를 사용하면 적절한 이벤트 루프를 설정하고 프로그램을 실행할 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">asyncio<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>코루틴 실행</h4>\n<p><code class=\"language-text\">async def</code> 를 통해 코루틴을 생성하고 <code class=\"language-text\">await</code> 를 사용하여 실행을 스케줄한다. 코루틴은 이벤트 루프에 의해 실행될 태스크로 변환된다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 코루틴 실행</span>\n    result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> some_async_function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>태스크 스케쥴링</h4>\n<p>이벤트 루프는 <code class=\"language-text\">await</code> 표현식을 만날 때마다 실행을 일시 중지하고 다른 태스크로 제어를 전환한다. 이를 통해 CPU가 I/O 작업으로 인해 차단되는 것을 방지하고 다른 태스크의 실행을 계속할 수 있다. </p>\n<h4>비동기 I/O 처리</h4>\n<p><code class=\"language-text\">asyncio</code>는 네트워크 I/O, 파일 I/O와 같은 비동기 작업을 효율적으로 관리한다. 이벤트 루프는 모든 I/O 이벤트에 대해 비블로킹 소켓과 파일 디스크립터를 사용한다. </p>\n<h4>이벤트와 콜백 처리</h4>\n<p>이벤트 루프는 등록된 이벤트가 발생했을 때 적절한 콜백 함수를 실행한다. 콜백은 완료된 I/O 작업의 결과를 다루거나 타이머 이벤트 같은 다른 유형의 이벤트를 처리하기 위해 사용된다. </p>\n<h4>종료 처리</h4>\n<p>모든 태스크가 완료되거나 특정 조건을 만족하면 이벤트 루프는 종료될 수 있다. 이벤트 루프를 종료하기 전에 <code class=\"language-text\">close()</code> 함수를 호출하여 자원을 정리할 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">loop <span class=\"token operator\">=</span> asyncio<span class=\"token punctuation\">.</span>get_event_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    loop<span class=\"token punctuation\">.</span>run_until_complete<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n    loop<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">asyncio.run()</code> 을 사용하는 경우에는 이벤트 루프의 생성과 종료가 자동으로 관리된다. </p>\n<h4>예외 처리</h4>\n<p><code class=\"language-text\">asyncio</code> 는 예외가 발생할 경우 적절한 예외 처리를 위한 매커니즘을 제공한다. 코루틴 내부에서 발생한 예외는 해당 코루틴을 호출한 곳으로 전파되고 이벤트 루프는 처리되지 않은 예외를 포착하여 프로그래머에게 알린다. </p>\n<h2>FastAPI와 Async 함수</h2>\n<p>FastAP의 가장 큰 특징 중 하나는 asyncio 라이브러리를 기반으로 한 비동기 프로그래밍 지원이다. 이를 통해 개발자는 비동기 파이썬 코드를 작성할 수 있으며 이는 특히 I/O 바운드 작업(네트워크 요청 처리, 디스크에서의 데이터 읽기 /쓰기 등)을 비동기적으로 처리하는데 유리하다. </p>\n<h3>비동기 함수의 장점</h3>\n<h4>성능 향상</h4>\n<p>I/O 작업이 완료되기를 기다리는 동안 다른 코드를 실행할 수 있으므로 I/O 바운드 시스템에서 동시성을 크게 향상시킬 수 있다. </p>\n<h4>스케일성</h4>\n<p>적은 수의 워커로 많은 수의 요청을 처리할 수 있으므로 더 효율적으로 리소스를 사용하고 스케일링 할 수 있다. </p>\n<h4>비용 효율성</h4>\n<p>리소스 사용의 효율성은 특히 클라우드 환경에서 환경 절감으로 이어질 수 있다. </p>\n<h4>응답성 향상</h4>\n<p>서버가 요청에 더 빨리 응답할 수 있기 때문에 사용자 경험이 향상된다. </p>\n<h3>언제 비동기 함수를 쓰는 것이 더 유리할까?</h3>\n<h4>네트워크 요청 처리</h4>\n<p>웹 API 호출, 원격 데이터베이스 쿼리 등 네트워크 I/O 관련 작업을 처리할 때</p>\n<h4>고비용 I/O 작업</h4>\n<p>디스크 작업이나 네트워크를 통한 파일 전송과 같은 I/O 집중적인 작업을 비동기적으로 실행할 때 </p>\n<h4>동시성이 필요한 작업</h4>\n<p>다수의 클라이언트나 서비스로부터 오는 동시 요청을 효과적으로 처리해야 할 때</p>\n<h4>WebSocket을 사용할 때</h4>\n<p>실시간 통신을 위해 WebSocket 연결을 관리하는 경우 </p>\n<h3>비동기 함수 사용 시 주의할 점</h3>\n<h4>데드락</h4>\n<p>비동기 프로그래밍은 데드락에 빠질 위험이 있으므로 올바른 <code class=\"language-text\">await</code> 사용과 태스크 관리가 필요하다. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    데드락이란?</code></pre></div>\n<p>두 개 이상의 프로세스나 스레드가 서로의 작업 완료를 무한히 기다리게 되는 상태</p>\n<h4>에러 핸들링</h4>\n<p>비동기 코드에서는 예외 처리가 더 복잡해질 수 있으므로 주의가 필요하다. </p>\n<h4>디버깅의 복잡성</h4>\n<p>비동기 코드는 디버깅이 더 어려울 수 있다. </p>\n<h4>블로킹 코드와의 혼용</h4>\n<p>비동기 코드 내에서 블로킹 동기 코드를 호출하면 성능이 저하될 수 있으므로 주의해야 한다. </p>\n<h3><code class=\"language-text\">async</code></h3>\n<p>이 키워드는 두 가지 주요 상황에서 사용된다. </p>\n<h4>코루틴 함수를 정의할 때</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">fetch_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 비동기 작업을 수행하는 코드</span></code></pre></div>\n<p><code class=\"language-text\">async def</code> 는 이 함수가 코루틴 함수임을 나타낸다. 코루틴 함수는 호출될 때 즉시 실행되지 않고 대신에 코루틴 객체를 반환한다. 이 객체는 나중에 이벤트 루프에 의해 실행된다. </p>\n<h4>async with와 async for를 사용할 때</h4>\n<p>비동기 컨텍스트 매니저와 비동기 이터레이터를 사용할 때 필요하다. </p>\n<h3><code class=\"language-text\">await</code></h3>\n<p>이 키워드는 코루틴의 실행을 일시 중지하고 코루틴의 결과가 준비될 때까지 기다린다. 코루틴, 태스크, 미래 객체 등이 뒤에 올 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">fetch_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> some_async_function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> data</code></pre></div>\n<p>여기서 await는 some<em>async</em>function이 완료될 때까지 fetch_data 코루틴의 실행을 중지시킨다. 완료되면 그 결과값을 data에 할당하고 실행을 계속한다. </p>\n<p>이러한 비동기 프로그래밍 방식의 장점은 I/O 작업이 완료되기를 기다리는 동안 프로그램이 다른 작업을 계속할 수 있어 프로그램의 전반적인 실행 효율을 개선한다는 것이다.</p>","frontmatter":{"title":"FastAPI와 asyncio","date":"November 07, 2023","update":"January 31, 2024","tags":["Python","FastAPI"],"series":null},"fields":{"slug":"/FastAPI와-asyncio/","readingTime":{"minutes":12.65}}},"seriesList":{"edges":[{"node":{"id":"4d7b1074-b3ac-5c36-a73e-a6ed1a202a07","fields":{"slug":"/화상상담을-위한-Janus-구성/"},"frontmatter":{"title":"화상상담을 위한 Janus 구성"}}},{"node":{"id":"be7886e5-3159-5c98-a6f3-04c7a2cb00f1","fields":{"slug":"/JavaScript의-특징-브라우저-동작-원리/"},"frontmatter":{"title":"JavaScript의 특징, 브라우저 동작 원리"}}},{"node":{"id":"9a2c7ec4-7e91-5e89-ba8c-370cbcc12df1","fields":{"slug":"/JavaScript-기본-문법/"},"frontmatter":{"title":"JavaScript 기본 문법"}}},{"node":{"id":"e54de3fc-18b6-547e-b09b-1f53e9088c5c","fields":{"slug":"/JavaScript의-변수/"},"frontmatter":{"title":"JavaScript의 변수"}}},{"node":{"id":"b91beb4b-9e88-5fcc-8c2a-c17cfe8901e8","fields":{"slug":"/JavaScript의-타입-변환과-단축-평가/"},"frontmatter":{"title":"JavaScript의 타입 변환과 단축 평가"}}},{"node":{"id":"92c32653-4965-51f9-844b-e2240edb82a0","fields":{"slug":"/JavaScript-클로저/"},"frontmatter":{"title":"JavaScript 클로저"}}},{"node":{"id":"ce5dde98-2a05-5571-8fa3-0142001310e8","fields":{"slug":"/NestJS-소개/"},"frontmatter":{"title":"NestJS 소개"}}},{"node":{"id":"0067c3b8-3361-56fa-8334-a282f0483dba","fields":{"slug":"/DB-튜닝-경험/"},"frontmatter":{"title":"DB 튜닝 경험"}}},{"node":{"id":"6ae7a6a0-7b5c-5841-878c-6d7a3e1ca05e","fields":{"slug":"/MORETHAN-LOG-설치/"},"frontmatter":{"title":"MORETHAN-LOG 설치"}}},{"node":{"id":"05f5432c-a8e7-5f94-a5f2-3f53ee688f7e","fields":{"slug":"/RDB관계형-데이터베이스-RDBMS/"},"frontmatter":{"title":"RDB(관계형 데이터베이스) + RDBMS"}}},{"node":{"id":"994cd992-ad07-50c1-a53f-51327e2718ed","fields":{"slug":"/var와-letconst/"},"frontmatter":{"title":"var와 let,const"}}},{"node":{"id":"b3eaf950-be62-583c-901d-64b231ea1a4e","fields":{"slug":"/MORETHAN-LOG-수정/"},"frontmatter":{"title":"MORETHAN-LOG 수정"}}},{"node":{"id":"dbb851fb-ea02-5fee-9765-511909593b42","fields":{"slug":"/NestJS-설치/"},"frontmatter":{"title":"NestJS 설치"}}},{"node":{"id":"71fda05f-affe-57c1-a82f-b7e0cc751098","fields":{"slug":"/NestJS의-디렉토리-구조/"},"frontmatter":{"title":"NestJS의 디렉토리 구조"}}},{"node":{"id":"d6a60bda-2a50-57da-96b2-b93e35f8dcb5","fields":{"slug":"/웹-사이트-프로젝트-vs-웹-응용-프로그램-프로젝트/"},"frontmatter":{"title":"웹 사이트 프로젝트 vs "}}},{"node":{"id":"ce6456e3-d3a3-51a7-b579-9f3c5f527ccc","fields":{"slug":"/Nuget-패키지-dll-추출/"},"frontmatter":{"title":"Nuget 패키지 dll 추출"}}},{"node":{"id":"a87e2b15-536a-5ca0-b900-e74918dec21f","fields":{"slug":"/무료-웹-호스팅-비교/"},"frontmatter":{"title":"무료 웹 호스팅 비교"}}},{"node":{"id":"d98289b5-f9c9-507e-9dcf-a159fa9a3a68","fields":{"slug":"/PRG-패턴-PostRedirectGet/"},"frontmatter":{"title":"PRG 패턴 (Post/Redirect/Get)"}}},{"node":{"id":"3308bd5e-b7b6-5be9-92d9-fe7476c6402d","fields":{"slug":"/Python-venv-Windows/"},"frontmatter":{"title":"Python venv (Windows)"}}},{"node":{"id":"b0b4f379-3003-5d6c-99b9-6d77e851ef0f","fields":{"slug":"/print와-pprint/"},"frontmatter":{"title":"print와 pprint"}}},{"node":{"id":"94dcf7a2-c028-5af8-a636-eeb08ffcabc0","fields":{"slug":"/정규화와-역정규화/"},"frontmatter":{"title":"정규화와 역정규화"}}},{"node":{"id":"5cb3526c-9ea8-5a35-99d9-0c158d432255","fields":{"slug":"/트래픽-튜닝/"},"frontmatter":{"title":"트래픽 튜닝"}}},{"node":{"id":"a137a64e-c66b-5557-b12d-3d767b828c5b","fields":{"slug":"/npx/"},"frontmatter":{"title":"npx"}}},{"node":{"id":"43386ca5-6d01-5b87-8f92-2696879f9b7b","fields":{"slug":"/Branch/"},"frontmatter":{"title":"Branch"}}},{"node":{"id":"88bcc3b2-d382-561b-8659-7978ed002a5f","fields":{"slug":"/DataTable-클래스/"},"frontmatter":{"title":"DataTable 클래스"}}},{"node":{"id":"4207210d-f1de-5875-97ec-0e7af80ad71e","fields":{"slug":"/Typescript-시작하기/"},"frontmatter":{"title":"Typescript 시작하기"}}},{"node":{"id":"48ba652d-3d02-50d5-b950-ae26be40f119","fields":{"slug":"/gitignore/"},"frontmatter":{"title":"gitignore"}}},{"node":{"id":"8d70bf78-f023-56e8-b297-15d68fdcf917","fields":{"slug":"/Factory-Pattern/"},"frontmatter":{"title":"Factory Pattern"}}},{"node":{"id":"44fc92b7-3ec8-559c-8f3c-7b73aba0f890","fields":{"slug":"/네이밍-규칙naming-conventions/"},"frontmatter":{"title":"네이밍 규칙(naming conventions)"}}},{"node":{"id":"cd5da1fd-9f44-5c6f-96b1-a07978bfbc1d","fields":{"slug":"/AWS-API-Gateway/"},"frontmatter":{"title":"AWS API Gateway"}}},{"node":{"id":"5b5a9934-3d6b-5d4f-919e-d6c81cd9883b","fields":{"slug":"/ColdStart/"},"frontmatter":{"title":"ColdStart"}}},{"node":{"id":"4d66fd32-495b-53b7-a5e6-0b4352890ad6","fields":{"slug":"/Serverless/"},"frontmatter":{"title":"Serverless"}}},{"node":{"id":"cf58cd45-e5c1-5cdc-beb9-e020f0c196c2","fields":{"slug":"/Dynamo-DB/"},"frontmatter":{"title":"Dynamo DB"}}},{"node":{"id":"b28d0ff6-a8f2-57fb-8424-2338940e34f1","fields":{"slug":"/NoSQL/"},"frontmatter":{"title":"NoSQL"}}},{"node":{"id":"75004652-bd2c-508c-a7db-04db313b1921","fields":{"slug":"/REST/"},"frontmatter":{"title":"REST"}}},{"node":{"id":"56f7be0e-73aa-5dad-98d8-f9ac6348bf1a","fields":{"slug":"/TypeError-non-default-argument-content-follows-default-argument/"},"frontmatter":{"title":"TypeError: non-default argument 'content' follows default argument"}}},{"node":{"id":"e5695f18-889e-587d-a870-634628d77470","fields":{"slug":"/브랜치-관리-전략/"},"frontmatter":{"title":"브랜치 관리 전략"}}},{"node":{"id":"d30c0163-0c3a-5b50-bf43-415f6c40b205","fields":{"slug":"/Unit-Test단위-테스트/"},"frontmatter":{"title":"Unit Test(단위 테스트)"}}},{"node":{"id":"8ec56025-47e8-50a0-b09d-bcebf7f5f38f","fields":{"slug":"/__post_init__/"},"frontmatter":{"title":"__post_init__"}}},{"node":{"id":"de1d75f6-399b-5a3a-b601-5a03f25b235d","fields":{"slug":"/dataclass/"},"frontmatter":{"title":"dataclass"}}},{"node":{"id":"a35d8a33-bdfd-5002-a95d-5864be533e04","fields":{"slug":"/FastAPI와-DDD/"},"frontmatter":{"title":"FastAPI와 DDD"}}},{"node":{"id":"a66f0e3d-4d3f-54ac-9189-5ae58e2f030d","fields":{"slug":"/vercel-배포-자동화/"},"frontmatter":{"title":"vercel 배포 자동화"}}},{"node":{"id":"f5b436db-918e-5d7a-9a05-6f44804bf7a4","fields":{"slug":"/AWS-ECSElastic-Container-Service/"},"frontmatter":{"title":"AWS ECS(Elastic Container Service)"}}},{"node":{"id":"f3769235-6b0c-590e-a146-9db1a2921b37","fields":{"slug":"/Blue-Green-Deploy-전략/"},"frontmatter":{"title":"Blue Green Deploy 전략"}}},{"node":{"id":"ea674275-fe3d-5860-a6d2-ac5fd6bbbd63","fields":{"slug":"/CloudFront/"},"frontmatter":{"title":"CloudFront"}}},{"node":{"id":"24501bbd-a049-5cde-b25d-91f5d6d81ad0","fields":{"slug":"/Poetry/"},"frontmatter":{"title":"Poetry"}}},{"node":{"id":"9363605d-e029-574d-850d-fe8e3d772c14","fields":{"slug":"/DynamoDB의-동시성-제어Concurrency-Control/"},"frontmatter":{"title":"DynamoDB의 동시성 제어(Concurrency Control)"}}},{"node":{"id":"f6954f71-a760-58ae-8db7-b7d7dbab417b","fields":{"slug":"/FastAPI/"},"frontmatter":{"title":"FastAPI"}}},{"node":{"id":"22d5ecd2-8499-51ec-bcee-10e7c6a65e0c","fields":{"slug":"/Pydantic-모델/"},"frontmatter":{"title":"Pydantic 모델"}}},{"node":{"id":"1430f86d-737b-54d9-ad6e-ed0da064204b","fields":{"slug":"/FastAPI의-데코레이터/"},"frontmatter":{"title":"FastAPI의 데코레이터"}}},{"node":{"id":"09aa2640-b779-5d7e-821e-fdcbc810306e","fields":{"slug":"/생성기generate-패턴/"},"frontmatter":{"title":"생성기(generate) 패턴"}}},{"node":{"id":"19a83676-7ebb-5df2-89ee-aad5db0ac510","fields":{"slug":"/FastAPI와-asyncio/"},"frontmatter":{"title":"FastAPI와 asyncio"}}},{"node":{"id":"a46250f3-70a4-51a8-99dc-7f8a19e25f30","fields":{"slug":"/FastAPI에서-데코레이터와-Dependency/"},"frontmatter":{"title":"FastAPI에서 데코레이터와 Dependency"}}},{"node":{"id":"e73d2f23-e559-5fd0-b823-3a905a7b23bc","fields":{"slug":"/aiohttp/"},"frontmatter":{"title":"aiohttp"}}},{"node":{"id":"e1614069-fb05-50dc-b571-09619b8b3812","fields":{"slug":"/단축어로-SLACK-프로필-변경하기/"},"frontmatter":{"title":"단축어로 SLACK 프로필 변경하기"}}},{"node":{"id":"e54bc742-9cf7-5c9e-bf8c-7c89cdc68f03","fields":{"slug":"/PynamoDB와-boto3-PynamoDB의-커넥션/"},"frontmatter":{"title":"PynamoDB와 boto3, PynamoDB의 커넥션"}}},{"node":{"id":"56d966ae-83d3-5173-96bb-1656a67b886e","fields":{"slug":"/FastAPI에서-Postgresql의-커넥션-관리/"},"frontmatter":{"title":"FastAPI에서 Postgresql의 커넥션 관리"}}},{"node":{"id":"ffa35bb9-59f6-5d00-a171-3df68d55bc94","fields":{"slug":"/Sqlalchemy-비동기-엔진에서의-Postgresql-Pooler/"},"frontmatter":{"title":"Sqlalchemy 비동기 엔진에서의 Postgresql Pooler"}}},{"node":{"id":"ac6be9fb-f651-5a8b-abe8-875e5c9c5e86","fields":{"slug":"/SqlAlchemy의-QueuePool/"},"frontmatter":{"title":"SqlAlchemy의 QueuePool"}}},{"node":{"id":"c58328fc-45ee-535d-bbd0-11c63e6f91d3","fields":{"slug":"/Union-Type/"},"frontmatter":{"title":"Union Type"}}},{"node":{"id":"3d7c4789-600c-5652-baf1-072ee0673b52","fields":{"slug":"/우분투-용량-관리/"},"frontmatter":{"title":"우분투 용량 관리"}}},{"node":{"id":"2f0bdc06-8ac6-5591-952a-2fa5601cb02c","fields":{"slug":"/Sqlalchemy에서의-트랜잭션-격리-수준-구현/"},"frontmatter":{"title":"Sqlalchemy에서의 트랜잭션 격리 수준 구현"}}},{"node":{"id":"1f5f9a99-fd2f-5150-b295-3ce29b5ab2ad","fields":{"slug":"/트랜잭션-격리-수준Transaction-Isolation-Level/"},"frontmatter":{"title":"트랜잭션 격리 수준(Transaction Isolation Level)"}}},{"node":{"id":"8e27233b-d081-512d-9e66-3fe55b19003e","fields":{"slug":"/PostgreSQL-Advisory-Locks-트랜잭션-레벨에서-구현/"},"frontmatter":{"title":"PostgreSQL Advisory Locks 트랜잭션 레벨에서 구현"}}},{"node":{"id":"eec75730-fbf0-5ffb-a69c-7e5d33807c69","fields":{"slug":"/Sqlalchemy의-func/"},"frontmatter":{"title":"Sqlalchemy의 func"}}},{"node":{"id":"5a91da05-b806-550d-9ec8-cc7981485589","fields":{"slug":"/동시성-제어문제-해결/"},"frontmatter":{"title":"동시성 제어문제 해결"}}},{"node":{"id":"ecef9814-4c6f-5617-9bb1-1c5f56e0b5f7","fields":{"slug":"/vscode-quick-Suggestions/"},"frontmatter":{"title":"vscode-quick Suggestions"}}}]},"previous":{"fields":{"slug":"/생성기generate-패턴/"},"frontmatter":{"title":"생성기(generate) 패턴"}},"next":{"fields":{"slug":"/FastAPI에서-데코레이터와-Dependency/"},"frontmatter":{"title":"FastAPI에서 데코레이터와 Dependency"}}},"pageContext":{"id":"19a83676-7ebb-5df2-89ee-aad5db0ac510","series":null,"previousPostId":"09aa2640-b779-5d7e-821e-fdcbc810306e","nextPostId":"a46250f3-70a4-51a8-99dc-7f8a19e25f30"}},"staticQueryHashes":[],"slicesMap":{}}