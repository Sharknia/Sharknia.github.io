{"componentChunkName":"component---src-templates-post-jsx","path":"/NotionAPI를-활용한-자동-포스팅2/","result":{"data":{"site":{"siteMetadata":{"title":"SharkniA"}},"markdownRemark":{"id":"ea79504b-7f4b-5185-a504-018bbe1ca05d","excerpt":"지난 시간 지난시간에는 DataBase를 불러오는 비동기 로직 때문에 Factory Method를 사용해서 노션의 DataBase를 불러오는 코드를 작성했다.  기능만 점검 후, 전체적인 설계를 다시 하고 프로젝트의 디렉토리 구조도 다시 짰다.  새로운 설계 일단, 크게 네 가지의 클래스를 만들기로 했다.  DataBase 클래스 생성시에 날짜를 입력 받…","html":"<h2>지난 시간</h2>\n<p>지난시간에는 DataBase를 불러오는 비동기 로직 때문에 Factory Method를 사용해서 노션의 DataBase를 불러오는 코드를 작성했다. </p>\n<p>기능만 점검 후, 전체적인 설계를 다시 하고 프로젝트의 디렉토리 구조도 다시 짰다. </p>\n<h2>새로운 설계</h2>\n<p>일단, 크게 네 가지의 클래스를 만들기로 했다. </p>\n<h3>DataBase 클래스</h3>\n<ul>\n<li>생성시에 날짜를 입력 받아 파라미터마다 다른 조건으로 쿼리 하여 노션 API에서 결과값을 받아오는 필터링 기능을 가진다. </li>\n</ul>\n<h3>Page 클래스</h3>\n<ul>\n<li>Page 타입의 Block이다. </li>\n<li>해당 페이지를 마크다운으로 저장(Print)하는 메소드를 가지고 있다. </li>\n<li>Property들을 가지고 있다. (페이지의 속성)</li>\n</ul>\n<h3>Content 클래스</h3>\n<ul>\n<li>Page에 귀속된다. </li>\n<li>종류가 여러가지이다. h1, h2, h3.. 등등 직접적으로 포스팅의 내용이 될 블록이다.</li>\n<li>가장 상위의 Content는 부모가 Page이다. </li>\n<li>자기 자신을 마크다운으로 변환하여 부모에게 리턴하는 method를 가지고 있다. 만약 child가 있다면, 해당 child도 함께 변환하여 부모에게 리턴한다. </li>\n<li>\n<p>일단 기본적으로 다음의 속성을 가진다. </p>\n<ul>\n<li><strong>id</strong> : idx</li>\n<li><strong>parent</strong> : 부모 ID</li>\n<li><strong>hasChidren</strong> : 자식 요소가 있는지 여부 (true, false)</li>\n<li><strong>type</strong> : <code class=\"language-text\">heading_1</code> 등등 블록의 종류. 종류마다 마크다운 변환 전략이 달라야 하므로 중요하다. </li>\n<li><strong>is_toggleable</strong> : **** 토글 여부</li>\n</ul>\n</li>\n</ul>\n<h3>Posting 클래스</h3>\n<ul>\n<li>생성자에 날짜를 넣어서 생성하면 해당하는 DataBase를 조회하고, Page → Content 를 돌면서 마크다운으로 페이지를 변환하여 저장하는 클래스들의 메소드를 모두 여기서 실행한다. 메인함수 같은 개념이다. </li>\n</ul>\n<p>위 내용은 언제든지 달라질 수 있다. 실제로 매일매일 하루하루 숨 쉬듯이 달라지고 있다. </p>\n<h2>디렉토리 구조</h2>\n<p>src/models 디렉토리를 새로 만들고 여기에 모든 클래스, 비즈니스 로직을 넣기로 했다. </p>\n<h2>database.ts</h2>\n<p>일단 이번에는 database.ts를 1차적으로 완성했다. </p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Client <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@notionhq/client\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> QueryDatabaseResponse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@notionhq/client/build/src/api-endpoints\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> dotenv <span class=\"token keyword\">from</span> <span class=\"token string\">\"dotenv\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataBase</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> notion<span class=\"token operator\">:</span> Client<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> databaseId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> database<span class=\"token operator\">:</span> QueryDatabaseResponse<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> pageIds<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> pageId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>notion<span class=\"token operator\">:</span> Client<span class=\"token punctuation\">,</span> databaseId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>notion <span class=\"token operator\">=</span> notion<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>databaseId <span class=\"token operator\">=</span> databaseId<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>database <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> QueryDatabaseResponse<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>filterUdate<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>DataBase<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        dotenv<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> path<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>__dirname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/../../.env</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> notionkey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NOTION_KEY</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> databaseid<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NOTION_DATABASE_ID</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>notionkey <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>databaseid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NOTION_KEY or NOTION_DATABASE_ID is missing in the environment variables.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">const</span> notion <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> auth<span class=\"token operator\">:</span> notionkey <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataBase</span><span class=\"token punctuation\">(</span>notion<span class=\"token punctuation\">,</span> databaseid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filterUdate <span class=\"token operator\">==</span> <span class=\"token string\">\"lastest\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> today <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 현재 날짜와 시간을 가져옵니다.</span>\n            today<span class=\"token punctuation\">.</span><span class=\"token function\">setDate</span><span class=\"token punctuation\">(</span>today<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 날짜를 하루 전으로 설정합니다.</span>\n\n            <span class=\"token comment\">// YYYY-MM-DD 형식의 문자열로 날짜를 가져옵니다.</span>\n            filterUdate <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>today<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>today<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>today<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        instance<span class=\"token punctuation\">.</span>database <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">queryDatabase</span><span class=\"token punctuation\">(</span>filterUdate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">queryDatabase</span><span class=\"token punctuation\">(</span>filterUdate<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>QueryDatabaseResponse<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>notion<span class=\"token punctuation\">.</span>databases<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                database_id<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>databaseId<span class=\"token punctuation\">,</span>\n                filter<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    and<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                        <span class=\"token punctuation\">{</span>\n                            property<span class=\"token operator\">:</span> <span class=\"token string\">'상태'</span><span class=\"token punctuation\">,</span>\n                            select<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                                equals<span class=\"token operator\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n                            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>filterUdate <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n                            property<span class=\"token operator\">:</span> <span class=\"token string\">'update'</span><span class=\"token punctuation\">,</span>\n                            date<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> on_or_after<span class=\"token operator\">:</span> filterUdate <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">]</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                sorts<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                    <span class=\"token punctuation\">{</span>\n                        property<span class=\"token operator\">:</span> <span class=\"token string\">'update'</span><span class=\"token punctuation\">,</span>\n                        direction<span class=\"token operator\">:</span> <span class=\"token string\">'descending'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// pageId 리스트 업데이트</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pageIds <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>page <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> pageId<span class=\"token operator\">:</span> page<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error querying the database:\"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>전에 제작한 클래스를 수정하여 만들었으며, 필터 기능을 추가하였다. </p>\n<p>Notion 서버에는 반드시 세계공통시? 로 저장이 되는 문제가 있다. 서울 시간대가 달라서 필터에도 현재 시간을 변환하여 조회하는 로직을 짜야 할 것 같다. </p>\n<p><code class=\"language-text\">pageIds</code> 속성으로 DataBase에 저장된 페이지들의 ID를 받을 수 있다. </p>\n<h2>코드 작성시 고려한 점</h2>\n<h3>DataBase 클래스가 Page 인스턴스 리스트 관리 책임을 가진다면?</h3>\n<ul>\n<li>SRP(Single Responsibility Principle) 원칙에 의거해 하나의 클래스는 하나의 책임만을 져야 한다. DataBase 클래스가 Page 인스턴스 리스트 관리 책임도 가진다면 이 원칙에 어긋날 수 있다. </li>\n<li>두 클래스가 강한 연결성을 가지게 되어 유연성이 떨어질 수 있다. </li>\n<li>코드가 더 직관적으로 보일 수 있다. (추적이 쉽다)</li>\n</ul>\n<p>결론적으로, DataBase 클래스와 Page 클래스의 연결을 줄이고(유연성을 늘리고) SRP를 준수하기 위해 현재의 방식을 선택했다. </p>\n<h3><code class=\"language-text\">databaseId</code> , <code class=\"language-text\">notionkey</code> 를 생성자의 파라미터로 전달한다면?</h3>\n<ul>\n<li>해당 값을 생성자의 파라미터로 값을 전달할 경우 코드가 길어지는 단점이 있다. 또한, 다양한 notionkey나 databaseid로 클래스를 생성할 수 있다. </li>\n<li>하지만, 해당 프로젝트에서 Database는 여러개를 생성하거나 값을 바꿔가면서 클래스를 생성할 일이 없으므로 현재의 방법을 택했다. </li>\n<li>다만 지금처럼 할 경우 클래스 내부에서 외부 환경 변수에 직접 접근하므로 캡슐화 원칙에 어긋나기는 한다. 하지만 앞서 언급한대로 해당 변수가 바뀔일은 거의 없다고 여겨지므로 지금의 방법을 택했다. </li>\n</ul>\n<h2>추가 수정</h2>\n<h3>고려사항</h3>\n<ul>\n<li>DataBase는 여러개일 필요가 없으므로, Singleton 패턴을 고려한다.</li>\n<li><code class=\"language-text\">DataBase</code> 클래스는 Notion과의 통신 뿐만 아니라, 환경 변수의 로딩 및 데이터베이스 ID 및 키의 유효성 검사까지 담당하고 있다. 이러한 기능들을 분리하여 각각의 책임을 명확히 하는 것이 좋다. </li>\n<li>Typings: 현재 코드에서는 TypeScript를 사용하고 있다. 가능한 한 모든 변수, 함수 매개변수 및 반환 타입에 타입 주석을 추가하는 것이 좋다.</li>\n</ul>\n<h2>완성코드</h2>\n<p>위의 문제를 고려해 Notion과의 통신을 NotionAPI 클래스로 분리했다. Page나 Block 같은 다른 클래스에서도 동일한 Notion Client를 사용해야 하므로, 이는 아주 타당한 선택이었다. 또 하나의 프로젝트에 API는 유일하므로 싱글톤 패턴을 사용했다. 다음은 이를 위해 만들어진 notionapi.ts 코드이다. </p>\n<h3>notionapi.ts</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Client <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@notionhq/client\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NotionAPI</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> instance<span class=\"token operator\">:</span> NotionAPI <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> client<span class=\"token operator\">:</span> Client<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>notionKey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> auth<span class=\"token operator\">:</span> notionKey <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>notionKey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>notionKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NOTION_KE is missing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NotionAPI</span><span class=\"token punctuation\">(</span>notionKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>최초 클래스 생성시에만 notionKey가 필요하도록 해두었다. 나중에 이 클래스를 호출할 때에는 번거롭게 환경변수를 조회할 필요가 없다. </p>\n<h3>database.ts</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Client <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@notionhq/client\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> QueryDatabaseResponse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@notionhq/client/build/src/api-endpoints\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> dotenv <span class=\"token keyword\">from</span> <span class=\"token string\">\"dotenv\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NotionAPI <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./notionapi\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataBase</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> instance<span class=\"token operator\">:</span> DataBase <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> notion<span class=\"token operator\">:</span> Client<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> databaseId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> database<span class=\"token operator\">:</span> QueryDatabaseResponse<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> pageIds<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> pageId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>notion<span class=\"token operator\">:</span> Client<span class=\"token punctuation\">,</span> databaseId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>notion <span class=\"token operator\">=</span> notion<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>databaseId <span class=\"token operator\">=</span> databaseId<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>database <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> QueryDatabaseResponse<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>filterUdate<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>DataBase<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            dotenv<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> path<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>__dirname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/../../.env</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> notionkey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NOTION_KEY</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> databaseid<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NOTION_DATABASE_ID</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>notionkey <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>databaseid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NOTION_KEY or NOTION_DATABASE_ID is missing in the environment variables.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">const</span> notionApi<span class=\"token operator\">:</span> NotionAPI <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> NotionAPI<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>notionkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataBase</span><span class=\"token punctuation\">(</span>notionApi<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">,</span> databaseid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filterUdate <span class=\"token operator\">===</span> <span class=\"token string\">\"lastest\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> today<span class=\"token operator\">:</span> Date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                today<span class=\"token punctuation\">.</span><span class=\"token function\">setDate</span><span class=\"token punctuation\">(</span>today<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                filterUdate <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>today<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>today<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>today<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>database <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">queryDatabase</span><span class=\"token punctuation\">(</span>filterUdate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">queryDatabase</span><span class=\"token punctuation\">(</span>filterUdate<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>QueryDatabaseResponse<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> response<span class=\"token operator\">:</span> QueryDatabaseResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>notion<span class=\"token punctuation\">.</span>databases<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                database_id<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>databaseId<span class=\"token punctuation\">,</span>\n                filter<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    and<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                        <span class=\"token punctuation\">{</span>\n                            property<span class=\"token operator\">:</span> <span class=\"token string\">'상태'</span><span class=\"token punctuation\">,</span>\n                            select<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                                equals<span class=\"token operator\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n                            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>filterUdate <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n                            property<span class=\"token operator\">:</span> <span class=\"token string\">'update'</span><span class=\"token punctuation\">,</span>\n                            date<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> on_or_after<span class=\"token operator\">:</span> filterUdate <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">]</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                sorts<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                    <span class=\"token punctuation\">{</span>\n                        property<span class=\"token operator\">:</span> <span class=\"token string\">'update'</span><span class=\"token punctuation\">,</span>\n                        direction<span class=\"token operator\">:</span> <span class=\"token string\">'descending'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// pageId 리스트 업데이트</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pageIds <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>page <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> pageId<span class=\"token operator\">:</span> page<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error querying the database:\"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>타입 주석을 모두 추가해주었고, 싱글톤 패턴으로 변경되었다. Notion Client의 생성부가 다른 곳으로 분리되었다. </p>\n<p>환경변수 역시 분리하는것을 고려중이지만, </p>\n<p>일단은 database.ts를 이 정도로 완성 하려고 한다. </p>\n<p>database.ts 완성!</p>\n<p><a href=\"https://github.com/Sharknia/Notion-to-Markdown/tree/database-class-complete\">https://github.com/Sharknia/Notion-to-Markdown/tree/database-class-complete</a></p>","frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(2)","date":"September 04, 2023","update":"February 02, 2024","tags":["Notion-API","Blogging","Hobby","Typescript"],"series":"GitHub Pages와 Notion API 연동"},"fields":{"slug":"/NotionAPI를-활용한-자동-포스팅2/","readingTime":{"minutes":10.19}}},"seriesList":{"edges":[{"node":{"id":"cf782302-a534-55e4-9607-9ba22069ba6d","fields":{"slug":"/Notion-API1/"},"frontmatter":{"title":"Notion API(1)"}}},{"node":{"id":"3a290e6d-b6bb-5ad3-b93c-646dd6597d8b","fields":{"slug":"/githubio를-이용한-블로그/"},"frontmatter":{"title":"github.io를 이용한 블로그"}}},{"node":{"id":"96b463ae-d648-5426-a574-faa73a2daf4d","fields":{"slug":"/githubio-자동배포/"},"frontmatter":{"title":"github.io 자동배포"}}},{"node":{"id":"a38352f2-1a18-57cb-988e-c685e392175d","fields":{"slug":"/Notion-API2/"},"frontmatter":{"title":"Notion API(2)"}}},{"node":{"id":"66bbbd52-9b37-5eea-9c37-1de08fc608f7","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅"}}},{"node":{"id":"ea79504b-7f4b-5185-a504-018bbe1ca05d","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅2/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(2)"}}},{"node":{"id":"613f37b4-2fd9-5208-9d9d-16174c9d3180","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅3/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(3)"}}},{"node":{"id":"81e99043-692d-5112-8edc-5d43774968a0","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅4/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(4)"}}},{"node":{"id":"e35e71eb-8137-5b3d-a497-988e2554e292","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅5/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(5)"}}},{"node":{"id":"ee22bc46-0f12-56ec-9e8a-8cd3b3fe4451","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅6/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(6)"}}},{"node":{"id":"814f77a8-f23a-5f6b-9562-cbab62343d0f","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅7/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(7)"}}},{"node":{"id":"b61dee75-4a5f-5a2d-a782-a5dfc8b65fb6","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅8/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(8)"}}},{"node":{"id":"ff71aedb-1637-5d59-812e-38da46dbaf77","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅9/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(9)"}}},{"node":{"id":"11e3ce39-5b5d-5164-8a1d-f034614e34d4","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅10/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(10)"}}},{"node":{"id":"8aeec2a3-8c02-5cf6-81c2-d98f08e09fd3","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅11/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(11)"}}},{"node":{"id":"f9e23df5-9e1f-5d92-b4b7-0f37d54560f2","fields":{"slug":"/Readme/"},"frontmatter":{"title":"Readme"}}}]},"previous":{"fields":{"slug":"/네이밍-규칙naming-conventions/"},"frontmatter":{"title":"네이밍 규칙(naming conventions)"}},"next":{"fields":{"slug":"/Serverless/"},"frontmatter":{"title":"Serverless"}}},"pageContext":{"id":"ea79504b-7f4b-5185-a504-018bbe1ca05d","series":"GitHub Pages와 Notion API 연동","previousPostId":"ee0abcf0-eb6f-569e-a2df-26ef807ffd53","nextPostId":"45a48b17-f235-5fcf-90c4-f186e96b788e"}},"staticQueryHashes":[],"slicesMap":{}}