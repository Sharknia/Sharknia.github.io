{"componentChunkName":"component---src-templates-post-jsx","path":"/NotionAPI를-활용한-자동-포스팅3/","result":{"data":{"site":{"siteMetadata":{"title":"SharkniA"}},"markdownRemark":{"id":"613f37b4-2fd9-5208-9d9d-16174c9d3180","excerpt":"지난시간 https://sharknia.github.io/Notion-Api-2/ 문제점 아무것도.. 기억이 나지 않는다.. 지난날의 나는 무엇이었나? 5개월만의 복귀가 이렇게 어렵다. 이래서 사람은 꾸준해야 한다.  잡설 최근 업무에 약~간의 여유가 생기면서 IDE를 파이참에서 vs code로 갈아탔다. 파이썬만 할 때에는 파이참이 유리한 것이 사실이지…","html":"<h2>지난시간</h2>\n<p><a href=\"https://sharknia.github.io/Notion-Api-2/\">https://sharknia.github.io/Notion-Api-2/</a></p>\n<h2>문제점</h2>\n<p>아무것도.. 기억이 나지 않는다.. 지난날의 나는 무엇이었나? 5개월만의 복귀가 이렇게 어렵다. 이래서 사람은 꾸준해야 한다. </p>\n<h2>잡설</h2>\n<p>최근 업무에 약~간의 여유가 생기면서 IDE를 파이참에서 vs code로 갈아탔다. 파이썬만 할 때에는 파이참이 유리한 것이 사실이지만(심지어 속도도 파이참이 더 빠르다고 느꼈다. ) 추후 여러 언어를 다루게 될 경우 vs code가 유리한 점이 있다고 생각되어 갈아탔고, 환경 세팅을 다시 했다. </p>\n<p>formatter나 기타 여러가지 등등.. 그리고 타입스크립트 코드를 오랜만에 보면서 여기에도 formatter 설정을 추가해주었다. </p>\n<h2>설계 되새김질</h2>\n<p>코드를 다시 읽는데에만 시간을 꽤 투자했다. 예전의 나는 코드를 꽤 잘 짠 것 같다. </p>\n<p>블로그 글을 복습하지 않고 코드를 읽고 설계를 다시 했는데 오늘의 나는 예전의 나와 의견이 똑같다. <del>(진작 복습할걸)</del></p>\n<h3>그래서 어떻게 할 것이냐?</h3>\n<p>노션은 블록 기반의 구조로 이루어져있다. 그래서 나는 노션의 메인 데이터베이스를 블로그 홈이라고 가정하고, 그 안에 있는 블록들의 리스트는 페이지라고 정의하여, 페이지의 양식이나 속성은 고정해두려고 한다. 그리고 비로소 페이지안의 컨텐츠, 블록들을 마크다운으로 변환하려고 한다. </p>\n<p>그래서, Page.ts에서 페이지 들을 관리하고, Block.ts에서 블록들을 관리하려고 한다. 블록들은 각자 하위 블록을 다시 가질 수 있는 재귀적 형태를 가진다. </p>\n<p>콘텐츠들은 문단, 이미지, 리스트 등 여러 타입을 가지므로 경우에 따라서 block 클래스를 상속한 하위 클래스가 생길수도 있겠다. </p>\n<p>각자 블록들은 자신의 내용들을 마크다운으로 변환해서 상위 블록에게 전달하는 메소드를 갖는다. 가장 하위 블록부터 전달된 변경된 마크다운 내용들은 상위로 타고 올라가 결국 페이지 클래스에 전달된다. </p>\n<p>페이지 클래스는 이 마크다운들을 모아 파일로 저장한다. </p>\n<p>계획은 완벽해 보인다. </p>\n<p>하지만, 타입이 아주 많고 이걸 마크다운으로 변환하는 작업은 노가다 그 자체일것이다.. </p>\n<p>그래서 일단은 제한된 타입들에 대해서만 변환을 지원하려고 한다. </p>\n<h2>그래서 오늘 작업은?</h2>\n<p>일단 코드를 읽었고, 분석했고, 설계를 굳이 다시 하고 예전의 나와 의견이 같다는 점을 뒤늦게 확인했으며, </p>\n<p>block.ts의 초안을 작성했다. </p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Client <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@notionhq/client'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BlockObjectResponse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@notionhq/client/build/src/api-endpoints'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GetBlockResponse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@notionhq/client/build/src/api-endpoints'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Block</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> notion<span class=\"token operator\">:</span> Client<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> blockId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> blockData<span class=\"token operator\">?</span><span class=\"token operator\">:</span> GetBlockResponse<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>notion<span class=\"token operator\">:</span> Client<span class=\"token punctuation\">,</span> blockId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>notion <span class=\"token operator\">=</span> notion<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>blockId <span class=\"token operator\">=</span> blockId<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">getMarkdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>blockData <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchBlockData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">processBlock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>blockData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> <span class=\"token function\">fetchBlockData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>GetBlockResponse<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>notion<span class=\"token punctuation\">.</span>blocks<span class=\"token punctuation\">.</span><span class=\"token function\">retrieve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> block_id<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>blockId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> <span class=\"token function\">processBlock</span><span class=\"token punctuation\">(</span>block<span class=\"token operator\">:</span> BlockObjectResponse<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> markdown <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'paragraph'</span><span class=\"token operator\">:</span>\n                markdown <span class=\"token operator\">+=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">convertParagraph</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>paragraph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'heading_1'</span><span class=\"token operator\">:</span>\n                markdown <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"># </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>block<span class=\"token punctuation\">.</span>heading_1<span class=\"token punctuation\">.</span>rich_text\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>plain_text<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 다른 블록 유형에 대한 처리를 여기에 추가...</span>\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Unsupported block type: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>block<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 하위 블록 처리 (재귀적)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>has_children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            markdown <span class=\"token operator\">+=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">processChildBlocks</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> markdown<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> <span class=\"token function\">processChildBlocks</span><span class=\"token punctuation\">(</span>blockId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>notion<span class=\"token punctuation\">.</span>blocks<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            block_id<span class=\"token operator\">:</span> blockId<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> markdown <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> child <span class=\"token keyword\">of</span> children<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            markdown <span class=\"token operator\">+=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">processBlock</span><span class=\"token punctuation\">(</span>child <span class=\"token keyword\">as</span> BlockObjectResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> markdown<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">convertParagraph</span><span class=\"token punctuation\">(</span>paragraph<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'paragraph:'</span> <span class=\"token operator\">+</span> paragraph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> paragraph<span class=\"token punctuation\">.</span>rich_text<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// return paragraph.text.map((t) => t.plain_text).join('') + '\\n\\n';</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 기타 블록 유형에 대한 변환 함수를 여기에 추가...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>완전히 지극히 초안 그 자체이다. 기초적인 형태만 잡았다. 아직 리턴값에 대한 이해가 충분하지 않아, 해당 부분에 대한 조정이 필요하다. (심지어 오류가 나는 상태이다)</p>\n<p>블록의 타입이 모두 정의가 되어있으므로, 해당 타입에 따른 각 클래스를 따로 생성할 필요도 느낀다. 모두 여기에 집중된다면 코드가 너무 길어질 것 같다. </p>\n<h2>결론</h2>\n<p>결국 오늘은 한 일이 별로 없다.. 복귀에 의의를 두자. </p>","frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(3)","date":"January 26, 2024","update":"February 02, 2024","tags":["Blogging","Notion-API","Hobby"],"series":"GitHub Pages와 Notion API 연동"},"fields":{"slug":"/NotionAPI를-활용한-자동-포스팅3/","readingTime":{"minutes":5.66}}},"seriesList":{"edges":[{"node":{"id":"cf782302-a534-55e4-9607-9ba22069ba6d","fields":{"slug":"/Notion-API1/"},"frontmatter":{"title":"Notion API(1)"}}},{"node":{"id":"3a290e6d-b6bb-5ad3-b93c-646dd6597d8b","fields":{"slug":"/githubio를-이용한-블로그/"},"frontmatter":{"title":"github.io를 이용한 블로그"}}},{"node":{"id":"96b463ae-d648-5426-a574-faa73a2daf4d","fields":{"slug":"/githubio-자동배포/"},"frontmatter":{"title":"github.io 자동배포"}}},{"node":{"id":"a38352f2-1a18-57cb-988e-c685e392175d","fields":{"slug":"/Notion-API2/"},"frontmatter":{"title":"Notion API(2)"}}},{"node":{"id":"66bbbd52-9b37-5eea-9c37-1de08fc608f7","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅"}}},{"node":{"id":"ea79504b-7f4b-5185-a504-018bbe1ca05d","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅2/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(2)"}}},{"node":{"id":"613f37b4-2fd9-5208-9d9d-16174c9d3180","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅3/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(3)"}}},{"node":{"id":"81e99043-692d-5112-8edc-5d43774968a0","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅4/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(4)"}}},{"node":{"id":"e35e71eb-8137-5b3d-a497-988e2554e292","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅5/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(5)"}}},{"node":{"id":"ee22bc46-0f12-56ec-9e8a-8cd3b3fe4451","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅6/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(6)"}}},{"node":{"id":"814f77a8-f23a-5f6b-9562-cbab62343d0f","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅7/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(7)"}}},{"node":{"id":"b61dee75-4a5f-5a2d-a782-a5dfc8b65fb6","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅8/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(8)"}}},{"node":{"id":"ff71aedb-1637-5d59-812e-38da46dbaf77","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅9/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(9)"}}},{"node":{"id":"11e3ce39-5b5d-5164-8a1d-f034614e34d4","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅10/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(10)"}}},{"node":{"id":"8aeec2a3-8c02-5cf6-81c2-d98f08e09fd3","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅11/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(11)"}}},{"node":{"id":"f9e23df5-9e1f-5d92-b4b7-0f37d54560f2","fields":{"slug":"/Readme/"},"frontmatter":{"title":"Readme"}}}]},"previous":{"fields":{"slug":"/SqlAlchemy의-QueuePool/"},"frontmatter":{"title":"SqlAlchemy의 QueuePool"}},"next":{"fields":{"slug":"/Pydantic-Model의-응용/"},"frontmatter":{"title":"Pydantic Model의 응용"}}},"pageContext":{"id":"613f37b4-2fd9-5208-9d9d-16174c9d3180","series":"GitHub Pages와 Notion API 연동","previousPostId":"c661de9c-fcb1-5bc6-b987-28d7cd303acb","nextPostId":"7591133a-cdeb-5c9a-ab49-4ca7c8f3dea7"}},"staticQueryHashes":[],"slicesMap":{}}