{"componentChunkName":"component---src-templates-post-jsx","path":"/UnionType/","result":{"data":{"site":{"siteMetadata":{"title":"SharkniA"}},"markdownRemark":{"id":"af937084-85d1-57e2-b953-7dfc2a0ec69f","excerpt":"타입스크립트의 Union Type 타입스크립트에는 유니언 타입이라는게 있다. 쉽게 말해 값이 여러 타입을 or 로 가질 수 있는 것이다. *막나간다. * 두 개의 이상의 타입을  기호를 사용해 결합하면 유니언 타입이 된다. 이를 통해 변수가 함수 매개변수가 여러 타입 중 하나의 타입을 가질 수 있음을 나타낼 수 있다.  장점 유연성 다양한 타입을 하나의 …","html":"<h2>타입스크립트의 Union Type</h2>\n<p>타입스크립트에는 유니언 타입이라는게 있다. 쉽게 말해 값이 여러 타입을 or 로 가질 수 있는 것이다. <del>*막나간다. *</del></p>\n<p>두 개의 이상의 타입을 <code class=\"language-text\">|</code> 기호를 사용해 결합하면 유니언 타입이 된다. 이를 통해 변수가 함수 매개변수가 여러 타입 중 하나의 타입을 가질 수 있음을 나타낼 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">StringOrNumber</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> value<span class=\"token operator\">:</span> StringOrNumber<span class=\"token punctuation\">;</span>\n\nvalue <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 유효함</span>\nvalue <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 유효함</span></code></pre></div>\n<h3>장점</h3>\n<h4>유연성</h4>\n<p>다양한 타입을 하나의 변수에 할당할 수 있어 다양한 시나리오에 대응할 수 있다. </p>\n<h4>타입 안정성 보장</h4>\n<p>유니언 타입을 사용하면 타입스크립트 컴파일러가 타입 안정성을 체크해준다. 즉, 할당된 값이 유니언 타입에 명시된 타입 중 하나와 일치하지 않으면 오류를 발생시킨다. </p>\n<h4>코드 간결성</h4>\n<p>복잡한 조건에 대한 타입을 간결하게 표현할 수 있다. </p>\n<h3>유니언 타입 사용 시 고려할 사항</h3>\n<h4>타입 가드</h4>\n<p>유니언 타입은 여러 타입을 허용하기 때문에 실행 시점에 정확한 타입을 확인하기 위해 타입 가드를 사용해야 한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> StringOrNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// value는 여기서 string 타입입니다.</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// value는 여기서 number 타입입니다.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>공통 필드 사용</h4>\n<p>유니언 타입의 모든 구성원이 공통으로 가진 필드나 메소드에만 접근할 수 있다. 공통되지 않은 필드에 접근하려면 타입 가드를 사용해야 한다. </p>\n<h4>복잡한 유니언 타입</h4>\n<p>유니언 타입이 복잡해질 수록 그 타입을 사용하는 코드는 더 복잡해질 수 있다. 따라서 타입을 너무 복잡하게 만들지 않도록 주의해야 한다. </p>\n<h2>파이썬의 Union Type</h2>\n<p>여기까지 알아보다가 파이썬에서도 왠지 비슷한게 있을 것 같다는 생각이 들어서 찾아봤고, 역시 있음을 알게 됐다. </p>\n<p>파이썬은 타입스크립트와 다르게 동적 타이핑 언어이지만 3.5 이상에서는 타입 힌팅을 사용하여 비슷한 기능을 구현할 수 있고, 3.10 이상에서는 <code class=\"language-text\">Union</code> 대신 <code class=\"language-text\">|</code> 연산자를 이용하여 유니언 타입을 정의할 수 있다. </p>\n<h3>파이썬 3.9 이전</h3>\n<p>typing 모듈의 Union 을 사용하여 나타낼 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Union\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>파이썬 3.10 이상</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>타입스크립트의 Union Type과 다른 점</h3>\n<p>파이썬은 동적 타이핑 언어이므로 이 제약은 파이썬의 실행에 영향을 미치지 않는다. 즉 런타임에서 타입 안전을 강제하지 않는다. </p>\n<p>단순히 개발자의 가독성 향상, IDE의 자동완성 지원, mypy등 정적 타입 체킹 도구를 위한 것이다. </p>\n<p>저렇게 해두어도 런타임에서 다른 타입의 값이 할당될 수 있음을 주의해야 한다. </p>\n<h2>사담</h2>\n<p>노션 API를 활용한 블로그 쉽게 하는걸 만들다가 타입이 복잡하게 선언되어있는걸 보고 혹시나 해서 찾아봤더니 내 예상이 맞았다. </p>\n<p>C로 개발을 시작했어서 그런지 처음에 자바스크립트를 접하고 아주 재미있고 자유도가 높다고 생각했는데, 갈 수록 나 자신에게 쇠사슬이 묶여있는게 오히려 편하다고 느낀다. </p>\n<p>프로젝트 크기가 커질수록 더 그렇게 느끼는 것 같다. </p>\n<p>물론 이런 기능을 잘 활용하면 더 편할때도 많긴 하다. 코드가 짧아지는 것도 맞고..</p>\n<p>결국 내 자신이 잘하면 아무일도 안생길거라는 생각도 든다. </p>","frontmatter":{"title":"Union Type","date":"January 28, 2024","update":"January 28, 2024","tags":["Typescript","Python"],"series":""},"fields":{"slug":"/UnionType/","readingTime":{"minutes":5.11}}},"seriesList":{"edges":[{"node":{"id":"316f5f75-904d-5cb4-a123-4b1b516fbd3e","fields":{"slug":"/Sqlalchemy비동기엔진에서의PostgresqlPooler/"},"frontmatter":{"title":"Sqlalchemy 비동기 엔진에서의 Postgresql Pooler"}}},{"node":{"id":"9c514d1b-1232-536a-b7a6-62031885c954","fields":{"slug":"/SqlAlchemy의QueuePool/"},"frontmatter":{"title":"SqlAlchemy의 QueuePool"}}},{"node":{"id":"af937084-85d1-57e2-b953-7dfc2a0ec69f","fields":{"slug":"/UnionType/"},"frontmatter":{"title":"Union Type"}}},{"node":{"id":"278ac944-e748-5e43-a5c2-fad5caec4f8e","fields":{"slug":"/우분투용량관리/"},"frontmatter":{"title":"우분투 용량 관리"}}}]},"previous":{"fields":{"slug":"/NotionAPI를활용한자동포스팅5/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(5)"}},"next":{"fields":{"slug":"/우분투용량관리/"},"frontmatter":{"title":"우분투 용량 관리"}}},"pageContext":{"id":"af937084-85d1-57e2-b953-7dfc2a0ec69f","series":"","previousPostId":"0b5dc163-12bd-55ab-bbad-29b3f36bb716","nextPostId":"278ac944-e748-5e43-a5c2-fad5caec4f8e"}},"staticQueryHashes":[],"slicesMap":{}}