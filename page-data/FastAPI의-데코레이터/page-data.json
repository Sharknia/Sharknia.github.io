{"componentChunkName":"component---src-templates-post-jsx","path":"/FastAPI의-데코레이터/","result":{"data":{"site":{"siteMetadata":{"title":"SharkniA"}},"markdownRemark":{"id":"1430f86d-737b-54d9-ad6e-ed0da064204b","excerpt":"개요 FastAPI의 데코레이터는 파이썬 데코레이터 패턴을 활용하여 FastAPI 프레임워크에서 제공하는 여러 기능을 함수나 클래스에 적용하는 구문이다. 이 데코레이터들은 FastAPI에서 매우 중요한 역할을 한다.  데코레이터는  기호를 사용하여 함수나 클래스의 위에 선언된다. 데코레이터는 그 아래에 정의된 함수에 추가적인 기능을 부여하거나 특정 작업을…","html":"<h2>개요</h2>\n<p>FastAPI의 데코레이터는 파이썬 데코레이터 패턴을 활용하여 FastAPI 프레임워크에서 제공하는 여러 기능을 함수나 클래스에 적용하는 구문이다. 이 데코레이터들은 FastAPI에서 매우 중요한 역할을 한다. </p>\n<p>데코레이터는 <code class=\"language-text\">@</code> 기호를 사용하여 함수나 클래스의 위에 선언된다. 데코레이터는 그 아래에 정의된 함수에 추가적인 기능을 부여하거나 특정 작업을 수행하도록 지시한다. </p>\n<p>데코레이터를 사용하여 개발자는 복잡한 로직을 함수에 직접 쓰지 않고 프레임워크가 제공하는 데코레이터를 사용하여 빠르고 쉽게 웹 애플리케이션을 구현할 수 있다. </p>\n<h2>주요 데코레이터</h2>\n<h3><code class=\"language-text\">@app.middleware(\"http\")</code></h3>\n<p>HTTP 요청-응답 사이클에 관여하는 미들웨어를 등록하는데 사용된다.  이 데코레이터 아래에 정의된 함수는 애플리케이션으로 들어오는 모든 http 요청에 대해 처리되고 그리고 해당 요청에 대한 응답을 반환하기 전에 호출된다. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    미들웨어란?</code></pre></div>\n<p>요청과 응답을 처리하는 과정 사이에 위치하여 들어오는 요청을 가로채 그 요청에 대해 특정 작업을 수행하거나 응답을 조작하는 구성 요소이다. </p>\n<h4>예제</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>middleware</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">custom_middleware</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">:</span> Request<span class=\"token punctuation\">,</span> call_next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 요청 전에 실행할 코드</span>\n    response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> call_next<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 응답 전에 실행할 코드</span>\n    <span class=\"token keyword\">return</span> response</code></pre></div>\n<p>크게 두 부분으로 나눠진다. </p>\n<ul>\n<li>요청 전에 실행할 코드 : <code class=\"language-text\">call_next</code> 함수에 요청을 전달하기 전에 실행할 코드를 작성한다. </li>\n<li>응답 전에 실행할 코드 : <code class=\"language-text\">await call_next(request)</code> 는 다음 미들웨어나 실제 요청을 처리하는 엔드포인트를 호출한다. 이후 응답이 반환되면 그 응답에 추가적인 처리를 하고 싶을 때 사용할 수 있다. </li>\n</ul>\n<h4>미들웨어 체인</h4>\n<p>만약 <code class=\"language-text\">@app.middleware(\"http\")</code> 가 여러개 정의되어 있다면 FastAPI는 그것을 선언된 순서대로 실행한다. 각 미들웨어는 이전 미들웨어에서 <code class=\"language-text\">await call_next(request)</code> 를 호출한 후의 응답을 받아 처리한다. 이를 미들웨어 체인이라고 하며, 요청이 엔드포인트에 도달하기 전에 여러 미들웨어를 통과한다. </p>\n<p>따라서 미들웨어는 가벼운 로직을 수행하는 것이 좋으며, 무거운 작업은 미들웨어에서 피해야 한다. 또한 각 미들웨어는 만드시 <code class=\"language-text\">await call_next(request)</code> 를 호출하여 체인을 계속 진행할 수 있도록 해야 한다. </p>\n<h3><code class=\"language-text\">@app.get</code>, <code class=\"language-text\">@app.post</code>, <code class=\"language-text\">@app.put</code>, <code class=\"language-text\">@app.delete</code>, <code class=\"language-text\">@app.options</code>, <code class=\"language-text\">@app.head</code></h3>\n<p>HTTP 메소드에 맞게 라우트를 설정하는 데코레이터이다. </p>\n<p>각각의 데코레이터는 해당 함수가 지정된 HTTP 메서드의 요청을 처리하는 엔드포인트임을 알려준다. 엔드포인트 함수 내부에서는 파라미터 검증, 비즈니스 로직, 데이터 반환 등의 작업을 수행할 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/items/{item_id}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"item_id\"</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">}</span></code></pre></div>\n<h3><code class=\"language-text\">@app.api_route</code></h3>\n<p>모든 http 메소드를 하나의 함수로 라우트 할 수 있게 해주는 데코레이터이다. </p>\n<p>하나의 엔드포인트에 여러 http 메소드를 지정할 수 있도록 한다. 예를 들어 같은 경로에 대해 Get과 Post 요청을 모두 처리하고 싶은 경우에 사용할 수 있다. 이 데코레이터를 사용하면 각 메서드에 대한 처리 로직을 한 함수에서 정의할 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>api_route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/items/{item_id}\"</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">handle_item</span><span class=\"token punctuation\">(</span>item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 여기에 GET과 POST를 처리하는 로직을 구현</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<h3><code class=\"language-text\">@app.websocket</code></h3>\n<p>웹소켓 연결을 처리하는 엔드포인트를 선언하는 데코레이터이다. 클라이언트가 해당 경로로 웹소켓 연결을 시도하면 FastAPI는 해당 함수를 실행해 웹소켓 핸드셰이크를 처리하고 연결을 유지한다. </p>\n<h3><code class=\"language-text\">@app.on_event(\"startup\" | \"shutdown\")</code></h3>\n<p>애플리케이션의 시작 시 또는 종료 시 실행할 함수를 등록하는 데코레이터이다. </p>\n<h3><code class=\"language-text\">@app.exception_handler(Exc)</code></h3>\n<p>특정 예외를 처리하는 핸들러를 등록하는 데코레이터이다. 특정 예외 유형이 발생했을 때 실행될 커스텀 핸들러를 등록하는 데 사용된다. 표준 예외 로직을 오버라이드 하거나 특정 예외 유형에 대해 특별한 처리를 구현할 수 있다. </p>\n<p>예를 들어 ValueError가 발생했을 때, 표준 HTTP 500 Error 대신 더 구체적인 오류 메세지와 HTTP 400 코드를 반환할 수 있다. </p>\n<h4>예제</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI<span class=\"token punctuation\">,</span> HTTPException\n<span class=\"token keyword\">from</span> fastapi<span class=\"token punctuation\">.</span>responses <span class=\"token keyword\">import</span> JSONResponse\n<span class=\"token keyword\">from</span> starlette<span class=\"token punctuation\">.</span>requests <span class=\"token keyword\">import</span> Request\n\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>exception_handler</span><span class=\"token punctuation\">(</span>ValueError<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">value_error_exception_handler</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">:</span> Request<span class=\"token punctuation\">,</span> exc<span class=\"token punctuation\">:</span> ValueError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> JSONResponse<span class=\"token punctuation\">(</span>\n        status_code<span class=\"token operator\">=</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span>\n        content<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>exc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/items/{item_id}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> item_id <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Item ID must be positive\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"item_id\"</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이를 이용해 다음과 같은 이점을 얻을 수 있다. </p>\n<ol>\n<li>유저 친화적인 오류 메시지 제공</li>\n<li>로그 이록</li>\n<li>오류 리포팅</li>\n<li>커스텀 http 상태 코드 반환 : 기본적으로 변경된 메시지 대신 사용자에게 안내를 줄 수 있다. </li>\n</ol>\n<p>이러한 예외 핸들러는 API 의 로버스트성을 늘려준다. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    로버스트성이란?</code></pre></div>\n<p>소프트웨어가 예기치않은 입력이나 사용 상황에서도 안정적으로 작동하는 성질을 의미한다. </p>\n<h3><code class=\"language-text\">@app.dependency</code></h3>\n<p>함수가 종속성으로 작동하게 하며 해당 함수가 다른 경로 작업에서 호출될 때마다 실행되게 한다. 이를 이용해 공통 기능을 중앙에서 관리하고 경로 작업에서 필요한 데이터를 제공하거나 사전 처리를 수행할 수 있다. </p>\n<h4>예제</h4>\n<p>모든 경로에서 공통으로 사용되는 데이터베이스 세션을 생성하는 경우를 가정하자. 아래는 해당 데코레이터를 사용하여 데이터베이스 세션을 경로에 주입하는 예제이다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI<span class=\"token punctuation\">,</span> Depends\n\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DBSession</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># DBSession 클래스는 데이터베이스 세션을 관리합니다.</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>session <span class=\"token operator\">=</span> <span class=\"token string\">\"DB Connection\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>session <span class=\"token operator\">=</span> <span class=\"token string\">\"DB Connection Closed\"</span>\n\n<span class=\"token comment\"># 종속성으로 사용될 함수</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>dependency</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_db_session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    db_session <span class=\"token operator\">=</span> DBSession<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">yield</span> db_session<span class=\"token punctuation\">.</span>session\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        db_session<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 경로 작업에서 종속성 사용</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/items/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> Depends<span class=\"token punctuation\">(</span>get_db_session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"db_session\"</span><span class=\"token punctuation\">:</span> db<span class=\"token punctuation\">}</span></code></pre></div>\n<p>get<em>db</em>session 함수가 @app.dependency 데코레이터로 마크되어있다. 이 함수는 호출될 때마다 새로운 DBSession 인스턴스를 생성하고 요청 처리가 완료된 후 세션을 정리한다. </p>\n<p>이 함수는 경로 작업 함수 read_items에 Depends를 사용하여 주입된다. 경로 작업에서는 반환된 데이터베이스 세션을 db라는 변수로 받아 사용할 수 있다. </p>\n<p>Depends를 사용함으로써 FastAPI는 get<em>db</em>session 함수를 실행하고 그 반환값을 read_items 경로 작업의 매개변수로 전달한다. 이 패턴은 서비스 계층, 데이터 접근 계층 등에서 특히 유용하며 코드 중복을 줄이고 테스트 용이성을 높여준다. </p>\n<p>FastAPI에서 해당 데코레이터를 사용해 정의된 함수는 생성기(generator) 패턴을 사용한다. yield 키워드를 사용해 이 함수는 값을 반환하기 전과 후에 코드를 실행할 수 있다. </p>\n<ol>\n<li>yield를 만날 때까지 함수를 실행한다. 이 때, DBSession 인스턴스가 생성되고, 세션이 초기화된다. </li>\n<li>yield에서 함수는 호출한 측에 db_session.session 값을 넘겨주고 실행을 일시 중지(pause) 한다. </li>\n<li>이제 read_items 경로 함수의 본문을 실행한다. 이 때, db 매개변수로 전달된 값을 사용한다. </li>\n<li>read_items 함수가 완료되고 응답이 반환되면 yield문 이후의 코드가 실행된다. 이 코드에서는 finally 블록이다. </li>\n</ol>\n<p>즉 finally 블록은 http 요청 처리가 완전히 끝나고 응답이 클라이언트에게 전송된 후에 실행된다. 이는 DBSession 객체의 리소스를 안전하게 정리할 수 있게 해준다. yield를 사용하는 이 패턴은 파이썬의 컨텍스트 매니저와 유사한 방식으로 자원의 정리를 보장한다. </p>\n<h3><code class=\"language-text\">@Query</code>, <code class=\"language-text\">@Path</code>, <code class=\"language-text\">@Header</code>, <code class=\"language-text\">@Cookie</code>, <code class=\"language-text\">@Body</code>, <code class=\"language-text\">@Form</code></h3>\n<p>엔드포인트의 각 파라미터를 특정 데이터 위치(쿼리 파라미터, 경로 파라미터, 헤더, 쿠키, 요청 본문, 폼 데이터)에 연결한다. </p>\n<h3><code class=\"language-text\">@Response</code>, <code class=\"language-text\">@JSONResponse</code>, <code class=\"language-text\">@HTMLResponse</code>, <code class=\"language-text\">@FileResponse</code></h3>\n<p>특정 응답 클래스를 사용하여 응답을 반환한다. 예를 들어 <code class=\"language-text\">@JSONResponse</code>는 JSON 형식의 응답을 반환할 때 사용된다. </p>","frontmatter":{"title":"FastAPI의 데코레이터","date":"November 03, 2023","update":"January 31, 2024","tags":["FastAPI","Python"],"series":null},"fields":{"slug":"/FastAPI의-데코레이터/","readingTime":{"minutes":11.255}}},"seriesList":{"edges":[{"node":{"id":"4d7b1074-b3ac-5c36-a73e-a6ed1a202a07","fields":{"slug":"/화상상담을-위한-Janus-구성/"},"frontmatter":{"title":"화상상담을 위한 Janus 구성"}}},{"node":{"id":"be7886e5-3159-5c98-a6f3-04c7a2cb00f1","fields":{"slug":"/JavaScript의-특징-브라우저-동작-원리/"},"frontmatter":{"title":"JavaScript의 특징, 브라우저 동작 원리"}}},{"node":{"id":"9a2c7ec4-7e91-5e89-ba8c-370cbcc12df1","fields":{"slug":"/JavaScript-기본-문법/"},"frontmatter":{"title":"JavaScript 기본 문법"}}},{"node":{"id":"e54de3fc-18b6-547e-b09b-1f53e9088c5c","fields":{"slug":"/JavaScript의-변수/"},"frontmatter":{"title":"JavaScript의 변수"}}},{"node":{"id":"b91beb4b-9e88-5fcc-8c2a-c17cfe8901e8","fields":{"slug":"/JavaScript의-타입-변환과-단축-평가/"},"frontmatter":{"title":"JavaScript의 타입 변환과 단축 평가"}}},{"node":{"id":"92c32653-4965-51f9-844b-e2240edb82a0","fields":{"slug":"/JavaScript-클로저/"},"frontmatter":{"title":"JavaScript 클로저"}}},{"node":{"id":"ce5dde98-2a05-5571-8fa3-0142001310e8","fields":{"slug":"/NestJS-소개/"},"frontmatter":{"title":"NestJS 소개"}}},{"node":{"id":"0067c3b8-3361-56fa-8334-a282f0483dba","fields":{"slug":"/DB-튜닝-경험/"},"frontmatter":{"title":"DB 튜닝 경험"}}},{"node":{"id":"6ae7a6a0-7b5c-5841-878c-6d7a3e1ca05e","fields":{"slug":"/MORETHAN-LOG-설치/"},"frontmatter":{"title":"MORETHAN-LOG 설치"}}},{"node":{"id":"05f5432c-a8e7-5f94-a5f2-3f53ee688f7e","fields":{"slug":"/RDB관계형-데이터베이스-RDBMS/"},"frontmatter":{"title":"RDB(관계형 데이터베이스) + RDBMS"}}},{"node":{"id":"994cd992-ad07-50c1-a53f-51327e2718ed","fields":{"slug":"/var와-letconst/"},"frontmatter":{"title":"var와 let,const"}}},{"node":{"id":"b3eaf950-be62-583c-901d-64b231ea1a4e","fields":{"slug":"/MORETHAN-LOG-수정/"},"frontmatter":{"title":"MORETHAN-LOG 수정"}}},{"node":{"id":"dbb851fb-ea02-5fee-9765-511909593b42","fields":{"slug":"/NestJS-설치/"},"frontmatter":{"title":"NestJS 설치"}}},{"node":{"id":"71fda05f-affe-57c1-a82f-b7e0cc751098","fields":{"slug":"/NestJS의-디렉토리-구조/"},"frontmatter":{"title":"NestJS의 디렉토리 구조"}}},{"node":{"id":"d6a60bda-2a50-57da-96b2-b93e35f8dcb5","fields":{"slug":"/웹-사이트-프로젝트-vs-웹-응용-프로그램-프로젝트/"},"frontmatter":{"title":"웹 사이트 프로젝트 vs "}}},{"node":{"id":"ce6456e3-d3a3-51a7-b579-9f3c5f527ccc","fields":{"slug":"/Nuget-패키지-dll-추출/"},"frontmatter":{"title":"Nuget 패키지 dll 추출"}}},{"node":{"id":"a87e2b15-536a-5ca0-b900-e74918dec21f","fields":{"slug":"/무료-웹-호스팅-비교/"},"frontmatter":{"title":"무료 웹 호스팅 비교"}}},{"node":{"id":"d98289b5-f9c9-507e-9dcf-a159fa9a3a68","fields":{"slug":"/PRG-패턴-PostRedirectGet/"},"frontmatter":{"title":"PRG 패턴 (Post/Redirect/Get)"}}},{"node":{"id":"3308bd5e-b7b6-5be9-92d9-fe7476c6402d","fields":{"slug":"/Python-venv-Windows/"},"frontmatter":{"title":"Python venv (Windows)"}}},{"node":{"id":"b0b4f379-3003-5d6c-99b9-6d77e851ef0f","fields":{"slug":"/print와-pprint/"},"frontmatter":{"title":"print와 pprint"}}},{"node":{"id":"94dcf7a2-c028-5af8-a636-eeb08ffcabc0","fields":{"slug":"/정규화와-역정규화/"},"frontmatter":{"title":"정규화와 역정규화"}}},{"node":{"id":"5cb3526c-9ea8-5a35-99d9-0c158d432255","fields":{"slug":"/트래픽-튜닝/"},"frontmatter":{"title":"트래픽 튜닝"}}},{"node":{"id":"a137a64e-c66b-5557-b12d-3d767b828c5b","fields":{"slug":"/npx/"},"frontmatter":{"title":"npx"}}},{"node":{"id":"43386ca5-6d01-5b87-8f92-2696879f9b7b","fields":{"slug":"/Branch/"},"frontmatter":{"title":"Branch"}}},{"node":{"id":"88bcc3b2-d382-561b-8659-7978ed002a5f","fields":{"slug":"/DataTable-클래스/"},"frontmatter":{"title":"DataTable 클래스"}}},{"node":{"id":"4207210d-f1de-5875-97ec-0e7af80ad71e","fields":{"slug":"/Typescript-시작하기/"},"frontmatter":{"title":"Typescript 시작하기"}}},{"node":{"id":"48ba652d-3d02-50d5-b950-ae26be40f119","fields":{"slug":"/gitignore/"},"frontmatter":{"title":"gitignore"}}},{"node":{"id":"8d70bf78-f023-56e8-b297-15d68fdcf917","fields":{"slug":"/Factory-Pattern/"},"frontmatter":{"title":"Factory Pattern"}}},{"node":{"id":"44fc92b7-3ec8-559c-8f3c-7b73aba0f890","fields":{"slug":"/네이밍-규칙naming-conventions/"},"frontmatter":{"title":"네이밍 규칙(naming conventions)"}}},{"node":{"id":"cd5da1fd-9f44-5c6f-96b1-a07978bfbc1d","fields":{"slug":"/AWS-API-Gateway/"},"frontmatter":{"title":"AWS API Gateway"}}},{"node":{"id":"5b5a9934-3d6b-5d4f-919e-d6c81cd9883b","fields":{"slug":"/ColdStart/"},"frontmatter":{"title":"ColdStart"}}},{"node":{"id":"4d66fd32-495b-53b7-a5e6-0b4352890ad6","fields":{"slug":"/Serverless/"},"frontmatter":{"title":"Serverless"}}},{"node":{"id":"cf58cd45-e5c1-5cdc-beb9-e020f0c196c2","fields":{"slug":"/Dynamo-DB/"},"frontmatter":{"title":"Dynamo DB"}}},{"node":{"id":"b28d0ff6-a8f2-57fb-8424-2338940e34f1","fields":{"slug":"/NoSQL/"},"frontmatter":{"title":"NoSQL"}}},{"node":{"id":"75004652-bd2c-508c-a7db-04db313b1921","fields":{"slug":"/REST/"},"frontmatter":{"title":"REST"}}},{"node":{"id":"56f7be0e-73aa-5dad-98d8-f9ac6348bf1a","fields":{"slug":"/TypeError-non-default-argument-content-follows-default-argument/"},"frontmatter":{"title":"TypeError: non-default argument 'content' follows default argument"}}},{"node":{"id":"e5695f18-889e-587d-a870-634628d77470","fields":{"slug":"/브랜치-관리-전략/"},"frontmatter":{"title":"브랜치 관리 전략"}}},{"node":{"id":"d30c0163-0c3a-5b50-bf43-415f6c40b205","fields":{"slug":"/Unit-Test단위-테스트/"},"frontmatter":{"title":"Unit Test(단위 테스트)"}}},{"node":{"id":"8ec56025-47e8-50a0-b09d-bcebf7f5f38f","fields":{"slug":"/__post_init__/"},"frontmatter":{"title":"__post_init__"}}},{"node":{"id":"de1d75f6-399b-5a3a-b601-5a03f25b235d","fields":{"slug":"/dataclass/"},"frontmatter":{"title":"dataclass"}}},{"node":{"id":"a35d8a33-bdfd-5002-a95d-5864be533e04","fields":{"slug":"/FastAPI와-DDD/"},"frontmatter":{"title":"FastAPI와 DDD"}}},{"node":{"id":"a66f0e3d-4d3f-54ac-9189-5ae58e2f030d","fields":{"slug":"/vercel-배포-자동화/"},"frontmatter":{"title":"vercel 배포 자동화"}}},{"node":{"id":"f5b436db-918e-5d7a-9a05-6f44804bf7a4","fields":{"slug":"/AWS-ECSElastic-Container-Service/"},"frontmatter":{"title":"AWS ECS(Elastic Container Service)"}}},{"node":{"id":"f3769235-6b0c-590e-a146-9db1a2921b37","fields":{"slug":"/Blue-Green-Deploy-전략/"},"frontmatter":{"title":"Blue Green Deploy 전략"}}},{"node":{"id":"ea674275-fe3d-5860-a6d2-ac5fd6bbbd63","fields":{"slug":"/CloudFront/"},"frontmatter":{"title":"CloudFront"}}},{"node":{"id":"24501bbd-a049-5cde-b25d-91f5d6d81ad0","fields":{"slug":"/Poetry/"},"frontmatter":{"title":"Poetry"}}},{"node":{"id":"9363605d-e029-574d-850d-fe8e3d772c14","fields":{"slug":"/DynamoDB의-동시성-제어Concurrency-Control/"},"frontmatter":{"title":"DynamoDB의 동시성 제어(Concurrency Control)"}}},{"node":{"id":"f6954f71-a760-58ae-8db7-b7d7dbab417b","fields":{"slug":"/FastAPI/"},"frontmatter":{"title":"FastAPI"}}},{"node":{"id":"22d5ecd2-8499-51ec-bcee-10e7c6a65e0c","fields":{"slug":"/Pydantic-모델/"},"frontmatter":{"title":"Pydantic 모델"}}},{"node":{"id":"1430f86d-737b-54d9-ad6e-ed0da064204b","fields":{"slug":"/FastAPI의-데코레이터/"},"frontmatter":{"title":"FastAPI의 데코레이터"}}},{"node":{"id":"09aa2640-b779-5d7e-821e-fdcbc810306e","fields":{"slug":"/생성기generate-패턴/"},"frontmatter":{"title":"생성기(generate) 패턴"}}},{"node":{"id":"19a83676-7ebb-5df2-89ee-aad5db0ac510","fields":{"slug":"/FastAPI와-asyncio/"},"frontmatter":{"title":"FastAPI와 asyncio"}}},{"node":{"id":"a46250f3-70a4-51a8-99dc-7f8a19e25f30","fields":{"slug":"/FastAPI에서-데코레이터와-Dependency/"},"frontmatter":{"title":"FastAPI에서 데코레이터와 Dependency"}}},{"node":{"id":"e73d2f23-e559-5fd0-b823-3a905a7b23bc","fields":{"slug":"/aiohttp/"},"frontmatter":{"title":"aiohttp"}}},{"node":{"id":"e1614069-fb05-50dc-b571-09619b8b3812","fields":{"slug":"/단축어로-SLACK-프로필-변경하기/"},"frontmatter":{"title":"단축어로 SLACK 프로필 변경하기"}}},{"node":{"id":"e54bc742-9cf7-5c9e-bf8c-7c89cdc68f03","fields":{"slug":"/PynamoDB와-boto3-PynamoDB의-커넥션/"},"frontmatter":{"title":"PynamoDB와 boto3, PynamoDB의 커넥션"}}},{"node":{"id":"56d966ae-83d3-5173-96bb-1656a67b886e","fields":{"slug":"/FastAPI에서-Postgresql의-커넥션-관리/"},"frontmatter":{"title":"FastAPI에서 Postgresql의 커넥션 관리"}}},{"node":{"id":"ffa35bb9-59f6-5d00-a171-3df68d55bc94","fields":{"slug":"/Sqlalchemy-비동기-엔진에서의-Postgresql-Pooler/"},"frontmatter":{"title":"Sqlalchemy 비동기 엔진에서의 Postgresql Pooler"}}},{"node":{"id":"ac6be9fb-f651-5a8b-abe8-875e5c9c5e86","fields":{"slug":"/SqlAlchemy의-QueuePool/"},"frontmatter":{"title":"SqlAlchemy의 QueuePool"}}},{"node":{"id":"c58328fc-45ee-535d-bbd0-11c63e6f91d3","fields":{"slug":"/Union-Type/"},"frontmatter":{"title":"Union Type"}}},{"node":{"id":"3d7c4789-600c-5652-baf1-072ee0673b52","fields":{"slug":"/우분투-용량-관리/"},"frontmatter":{"title":"우분투 용량 관리"}}},{"node":{"id":"2f0bdc06-8ac6-5591-952a-2fa5601cb02c","fields":{"slug":"/Sqlalchemy에서의-트랜잭션-격리-수준-구현/"},"frontmatter":{"title":"Sqlalchemy에서의 트랜잭션 격리 수준 구현"}}},{"node":{"id":"1f5f9a99-fd2f-5150-b295-3ce29b5ab2ad","fields":{"slug":"/트랜잭션-격리-수준Transaction-Isolation-Level/"},"frontmatter":{"title":"트랜잭션 격리 수준(Transaction Isolation Level)"}}},{"node":{"id":"8e27233b-d081-512d-9e66-3fe55b19003e","fields":{"slug":"/PostgreSQL-Advisory-Locks-트랜잭션-레벨에서-구현/"},"frontmatter":{"title":"PostgreSQL Advisory Locks 트랜잭션 레벨에서 구현"}}},{"node":{"id":"eec75730-fbf0-5ffb-a69c-7e5d33807c69","fields":{"slug":"/Sqlalchemy의-func/"},"frontmatter":{"title":"Sqlalchemy의 func"}}},{"node":{"id":"5a91da05-b806-550d-9ec8-cc7981485589","fields":{"slug":"/동시성-제어문제-해결/"},"frontmatter":{"title":"동시성 제어문제 해결"}}},{"node":{"id":"ecef9814-4c6f-5617-9bb1-1c5f56e0b5f7","fields":{"slug":"/vscode-quick-Suggestions/"},"frontmatter":{"title":"vscode-quick Suggestions"}}}]},"previous":{"fields":{"slug":"/Pydantic-모델/"},"frontmatter":{"title":"Pydantic 모델"}},"next":{"fields":{"slug":"/생성기generate-패턴/"},"frontmatter":{"title":"생성기(generate) 패턴"}}},"pageContext":{"id":"1430f86d-737b-54d9-ad6e-ed0da064204b","series":null,"previousPostId":"22d5ecd2-8499-51ec-bcee-10e7c6a65e0c","nextPostId":"09aa2640-b779-5d7e-821e-fdcbc810306e"}},"staticQueryHashes":[],"slicesMap":{}}