{"componentChunkName":"component---src-templates-post-jsx","path":"/FastAPI의-데코레이터/","result":{"data":{"site":{"siteMetadata":{"title":"SharkniA"}},"markdownRemark":{"id":"e967fbe2-df8c-5d69-b5d6-13133817266e","excerpt":"개요 FastAPI의 데코레이터는 파이썬 데코레이터 패턴을 활용하여 FastAPI 프레임워크에서 제공하는 여러 기능을 함수나 클래스에 적용하는 구문이다. 이 데코레이터들은 FastAPI에서 매우 중요한 역할을 한다.  데코레이터는  기호를 사용하여 함수나 클래스의 위에 선언된다. 데코레이터는 그 아래에 정의된 함수에 추가적인 기능을 부여하거나 특정 작업을…","html":"<h2>개요</h2>\n<p>FastAPI의 데코레이터는 파이썬 데코레이터 패턴을 활용하여 FastAPI 프레임워크에서 제공하는 여러 기능을 함수나 클래스에 적용하는 구문이다. 이 데코레이터들은 FastAPI에서 매우 중요한 역할을 한다. </p>\n<p>데코레이터는 <code class=\"language-text\">@</code> 기호를 사용하여 함수나 클래스의 위에 선언된다. 데코레이터는 그 아래에 정의된 함수에 추가적인 기능을 부여하거나 특정 작업을 수행하도록 지시한다. </p>\n<p>데코레이터를 사용하여 개발자는 복잡한 로직을 함수에 직접 쓰지 않고 프레임워크가 제공하는 데코레이터를 사용하여 빠르고 쉽게 웹 애플리케이션을 구현할 수 있다. </p>\n<h2>주요 데코레이터</h2>\n<h3><code class=\"language-text\">@app.middleware(\"http\")</code></h3>\n<p>HTTP 요청-응답 사이클에 관여하는 미들웨어를 등록하는데 사용된다.  이 데코레이터 아래에 정의된 함수는 애플리케이션으로 들어오는 모든 http 요청에 대해 처리되고 그리고 해당 요청에 대한 응답을 반환하기 전에 호출된다. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    미들웨어란?</code></pre></div>\n<p>요청과 응답을 처리하는 과정 사이에 위치하여 들어오는 요청을 가로채 그 요청에 대해 특정 작업을 수행하거나 응답을 조작하는 구성 요소이다. </p>\n<h4>예제</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>middleware</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">custom_middleware</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">:</span> Request<span class=\"token punctuation\">,</span> call_next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 요청 전에 실행할 코드</span>\n    response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> call_next<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 응답 전에 실행할 코드</span>\n    <span class=\"token keyword\">return</span> response</code></pre></div>\n<p>크게 두 부분으로 나눠진다. </p>\n<ul>\n<li>요청 전에 실행할 코드 : <code class=\"language-text\">call_next</code> 함수에 요청을 전달하기 전에 실행할 코드를 작성한다. </li>\n<li>응답 전에 실행할 코드 : <code class=\"language-text\">await call_next(request)</code> 는 다음 미들웨어나 실제 요청을 처리하는 엔드포인트를 호출한다. 이후 응답이 반환되면 그 응답에 추가적인 처리를 하고 싶을 때 사용할 수 있다. </li>\n</ul>\n<h4>미들웨어 체인</h4>\n<p>만약 <code class=\"language-text\">@app.middleware(\"http\")</code> 가 여러개 정의되어 있다면 FastAPI는 그것을 선언된 순서대로 실행한다. 각 미들웨어는 이전 미들웨어에서 <code class=\"language-text\">await call_next(request)</code> 를 호출한 후의 응답을 받아 처리한다. 이를 미들웨어 체인이라고 하며, 요청이 엔드포인트에 도달하기 전에 여러 미들웨어를 통과한다. </p>\n<p>따라서 미들웨어는 가벼운 로직을 수행하는 것이 좋으며, 무거운 작업은 미들웨어에서 피해야 한다. 또한 각 미들웨어는 만드시 <code class=\"language-text\">await call_next(request)</code> 를 호출하여 체인을 계속 진행할 수 있도록 해야 한다. </p>\n<h3><code class=\"language-text\">@app.get</code><strong>,</strong> <code class=\"language-text\">@app.post</code><strong>,</strong> <code class=\"language-text\">@app.put</code><strong>,</strong> <code class=\"language-text\">@app.delete</code><strong>,</strong> <code class=\"language-text\">@app.options</code><strong>,</strong> <code class=\"language-text\">@app.head</code></h3>\n<p>HTTP 메소드에 맞게 라우트를 설정하는 데코레이터이다. </p>\n<p>각각의 데코레이터는 해당 함수가 지정된 HTTP 메서드의 요청을 처리하는 엔드포인트임을 알려준다. 엔드포인트 함수 내부에서는 파라미터 검증, 비즈니스 로직, 데이터 반환 등의 작업을 수행할 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/items/{item_id}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"item_id\"</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">}</span></code></pre></div>\n<h3><code class=\"language-text\">@app.api_route</code></h3>\n<p>모든 http 메소드를 하나의 함수로 라우트 할 수 있게 해주는 데코레이터이다. </p>\n<p>하나의 엔드포인트에 여러 http 메소드를 지정할 수 있도록 한다. 예를 들어 같은 경로에 대해 Get과 Post 요청을 모두 처리하고 싶은 경우에 사용할 수 있다. 이 데코레이터를 사용하면 각 메서드에 대한 처리 로직을 한 함수에서 정의할 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>api_route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/items/{item_id}\"</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">handle_item</span><span class=\"token punctuation\">(</span>item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 여기에 GET과 POST를 처리하는 로직을 구현</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<h3><code class=\"language-text\">@app.websocket</code></h3>\n<p>웹소켓 연결을 처리하는 엔드포인트를 선언하는 데코레이터이다. 클라이언트가 해당 경로로 웹소켓 연결을 시도하면 FastAPI는 해당 함수를 실행해 웹소켓 핸드셰이크를 처리하고 연결을 유지한다. </p>\n<h3><code class=\"language-text\">@app.on_event(\"startup\" | \"shutdown\")</code></h3>\n<p>애플리케이션의 시작 시 또는 종료 시 실행할 함수를 등록하는 데코레이터이다. </p>\n<h3><code class=\"language-text\">@app.exception_handler(Exc)</code></h3>\n<p>특정 예외를 처리하는 핸들러를 등록하는 데코레이터이다. 특정 예외 유형이 발생했을 때 실행될 커스텀 핸들러를 등록하는 데 사용된다. 표준 예외 로직을 오버라이드 하거나 특정 예외 유형에 대해 특별한 처리를 구현할 수 있다. </p>\n<p>예를 들어 ValueError가 발생했을 때, 표준 HTTP 500 Error 대신 더 구체적인 오류 메세지와 HTTP 400 코드를 반환할 수 있다. </p>\n<h4>예제</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI<span class=\"token punctuation\">,</span> HTTPException\n<span class=\"token keyword\">from</span> fastapi<span class=\"token punctuation\">.</span>responses <span class=\"token keyword\">import</span> JSONResponse\n<span class=\"token keyword\">from</span> starlette<span class=\"token punctuation\">.</span>requests <span class=\"token keyword\">import</span> Request\n\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>exception_handler</span><span class=\"token punctuation\">(</span>ValueError<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">value_error_exception_handler</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">:</span> Request<span class=\"token punctuation\">,</span> exc<span class=\"token punctuation\">:</span> ValueError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> JSONResponse<span class=\"token punctuation\">(</span>\n        status_code<span class=\"token operator\">=</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span>\n        content<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>exc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/items/{item_id}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> item_id <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Item ID must be positive\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"item_id\"</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이를 이용해 다음과 같은 이점을 얻을 수 있다. </p>\n<ol>\n<li>유저 친화적인 오류 메시지 제공</li>\n<li>로그 이록</li>\n<li>오류 리포팅</li>\n<li>커스텀 http 상태 코드 반환 : 기본적으로 변경된 메시지 대신 사용자에게 안내를 줄 수 있다. </li>\n</ol>\n<p>이러한 예외 핸들러는 API 의 로버스트성을 늘려준다. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    로버스트성이란?</code></pre></div>\n<p>소프트웨어가 예기치않은 입력이나 사용 상황에서도 안정적으로 작동하는 성질을 의미한다. </p>\n<h3><code class=\"language-text\">@app.dependency</code></h3>\n<p>함수가 종속성으로 작동하게 하며 해당 함수가 다른 경로 작업에서 호출될 때마다 실행되게 한다. 이를 이용해 공통 기능을 중앙에서 관리하고 경로 작업에서 필요한 데이터를 제공하거나 사전 처리를 수행할 수 있다. </p>\n<h4>예제</h4>\n<p>모든 경로에서 공통으로 사용되는 데이터베이스 세션을 생성하는 경우를 가정하자. 아래는 해당 데코레이터를 사용하여 데이터베이스 세션을 경로에 주입하는 예제이다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI<span class=\"token punctuation\">,</span> Depends\n\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DBSession</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># DBSession 클래스는 데이터베이스 세션을 관리합니다.</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>session <span class=\"token operator\">=</span> <span class=\"token string\">\"DB Connection\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>session <span class=\"token operator\">=</span> <span class=\"token string\">\"DB Connection Closed\"</span>\n\n<span class=\"token comment\"># 종속성으로 사용될 함수</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>dependency</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_db_session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    db_session <span class=\"token operator\">=</span> DBSession<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">yield</span> db_session<span class=\"token punctuation\">.</span>session\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        db_session<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 경로 작업에서 종속성 사용</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/items/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> Depends<span class=\"token punctuation\">(</span>get_db_session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"db_session\"</span><span class=\"token punctuation\">:</span> db<span class=\"token punctuation\">}</span></code></pre></div>\n<p>get<em>db</em>session 함수가 @app.dependency 데코레이터로 마크되어있다. 이 함수는 호출될 때마다 새로운 DBSession 인스턴스를 생성하고 요청 처리가 완료된 후 세션을 정리한다. </p>\n<p>이 함수는 경로 작업 함수 read_items에 Depends를 사용하여 주입된다. 경로 작업에서는 반환된 데이터베이스 세션을 db라는 변수로 받아 사용할 수 있다. </p>\n<p>Depends를 사용함으로써 FastAPI는 get<em>db</em>session 함수를 실행하고 그 반환값을 read_items 경로 작업의 매개변수로 전달한다. 이 패턴은 서비스 계층, 데이터 접근 계층 등에서 특히 유용하며 코드 중복을 줄이고 테스트 용이성을 높여준다. </p>\n<p>FastAPI에서 해당 데코레이터를 사용해 정의된 함수는 생성기(generator) 패턴을 사용한다. yield 키워드를 사용해 이 함수는 값을 반환하기 전과 후에 코드를 실행할 수 있다. </p>\n<ol>\n<li>yield를 만날 때까지 함수를 실행한다. 이 때, DBSession 인스턴스가 생성되고, 세션이 초기화된다. </li>\n<li>yield에서 함수는 호출한 측에 db_session.session 값을 넘겨주고 실행을 일시 중지(pause) 한다. </li>\n<li>이제 read_items 경로 함수의 본문을 실행한다. 이 때, db 매개변수로 전달된 값을 사용한다. </li>\n<li>read_items 함수가 완료되고 응답이 반환되면 yield문 이후의 코드가 실행된다. 이 코드에서는 finally 블록이다. </li>\n</ol>\n<p>즉 finally 블록은 http 요청 처리가 완전히 끝나고 응답이 클라이언트에게 전송된 후에 실행된다. 이는 DBSession 객체의 리소스를 안전하게 정리할 수 있게 해준다. yield를 사용하는 이 패턴은 파이썬의 컨텍스트 매니저와 유사한 방식으로 자원의 정리를 보장한다. </p>\n<h3><code class=\"language-text\">@Query</code><strong>,</strong> <code class=\"language-text\">@Path</code><strong>,</strong> <code class=\"language-text\">@Header</code><strong>,</strong> <code class=\"language-text\">@Cookie</code><strong>,</strong> <code class=\"language-text\">@Body</code><strong>,</strong> <code class=\"language-text\">@Form</code></h3>\n<p>엔드포인트의 각 파라미터를 특정 데이터 위치(쿼리 파라미터, 경로 파라미터, 헤더, 쿠키, 요청 본문, 폼 데이터)에 연결한다. </p>\n<h3><code class=\"language-text\">@Response</code><strong>,</strong> <code class=\"language-text\">@JSONResponse</code><strong>,</strong> <code class=\"language-text\">@HTMLResponse</code><strong>,</strong> <code class=\"language-text\">@FileResponse</code></h3>\n<p>특정 응답 클래스를 사용하여 응답을 반환한다. 예를 들어 <code class=\"language-text\">@JSONResponse</code>는 JSON 형식의 응답을 반환할 때 사용된다. </p>","frontmatter":{"title":"FastAPI의 데코레이터","date":"November 03, 2023","update":"February 02, 2024","tags":["FastAPI","Python"],"series":null},"fields":{"slug":"/FastAPI의-데코레이터/","readingTime":{"minutes":11.255}}},"seriesList":{"edges":[{"node":{"id":"00a77006-3818-58af-bda3-49bb95a478d4","fields":{"slug":"/화상상담을-위한-Janus-구성/"},"frontmatter":{"title":"화상상담을 위한 Janus 구성"}}},{"node":{"id":"9b87562c-3e43-5ec2-a1a1-06c53d1c675c","fields":{"slug":"/JavaScript의-특징-브라우저-동작-원리/"},"frontmatter":{"title":"JavaScript의 특징, 브라우저 동작 원리"}}},{"node":{"id":"26f64d7f-43cb-5003-ab09-34e08a4f9fa3","fields":{"slug":"/JavaScript-기본-문법/"},"frontmatter":{"title":"JavaScript 기본 문법"}}},{"node":{"id":"fa695bf5-57e6-5bf0-bd58-12c299a86f2e","fields":{"slug":"/JavaScript의-변수/"},"frontmatter":{"title":"JavaScript의 변수"}}},{"node":{"id":"5948222d-3860-5d05-963f-f2b869b4a716","fields":{"slug":"/JavaScript의-타입-변환과-단축-평가/"},"frontmatter":{"title":"JavaScript의 타입 변환과 단축 평가"}}},{"node":{"id":"2da8d381-203a-5484-b874-ecda0760765e","fields":{"slug":"/JavaScript-클로저/"},"frontmatter":{"title":"JavaScript 클로저"}}},{"node":{"id":"de8049ee-f319-539d-8b4d-a9401ffc7052","fields":{"slug":"/NestJS-소개/"},"frontmatter":{"title":"NestJS 소개"}}},{"node":{"id":"d1ee1dfa-292a-532f-8ab3-487a9575d65a","fields":{"slug":"/DB-튜닝-경험/"},"frontmatter":{"title":"DB 튜닝 경험"}}},{"node":{"id":"65ef6804-a370-5087-936b-4c0568b19714","fields":{"slug":"/MORETHAN-LOG-설치/"},"frontmatter":{"title":"MORETHAN-LOG 설치"}}},{"node":{"id":"0c073300-9bbf-5968-903d-972daddca62a","fields":{"slug":"/RDB관계형-데이터베이스-RDBMS/"},"frontmatter":{"title":"RDB(관계형 데이터베이스) + RDBMS"}}},{"node":{"id":"615dae84-f7e1-5e94-87a1-a0a6ea28f0ee","fields":{"slug":"/var와-letconst/"},"frontmatter":{"title":"var와 let,const"}}},{"node":{"id":"b93488ac-2c0a-5e6c-b76f-0f65b73c20cb","fields":{"slug":"/MORETHAN-LOG-수정/"},"frontmatter":{"title":"MORETHAN-LOG 수정"}}},{"node":{"id":"c44bb53c-f3c1-537f-bf08-2469a8afc71e","fields":{"slug":"/NestJS-설치/"},"frontmatter":{"title":"NestJS 설치"}}},{"node":{"id":"3d415bd8-543d-58ab-806f-17140e82b34d","fields":{"slug":"/NestJS의-디렉토리-구조/"},"frontmatter":{"title":"NestJS의 디렉토리 구조"}}},{"node":{"id":"5fccef8c-d9be-5c31-b47e-a38562d70cde","fields":{"slug":"/웹-사이트-프로젝트-vs-웹-응용-프로그램-프로젝트/"},"frontmatter":{"title":"웹 사이트 프로젝트 vs 웹 응용 프로그램 프로젝트"}}},{"node":{"id":"a052bb08-8fc2-598f-9b5b-218eb727933e","fields":{"slug":"/Nuget-패키지-dll-추출/"},"frontmatter":{"title":"Nuget 패키지 dll 추출"}}},{"node":{"id":"d5eefb78-162d-5c44-80e5-e08b0afc6282","fields":{"slug":"/무료-웹-호스팅-비교/"},"frontmatter":{"title":"무료 웹 호스팅 비교"}}},{"node":{"id":"04f440ee-551d-5e36-a047-f56b38f89ab3","fields":{"slug":"/PRG-패턴-PostRedirectGet/"},"frontmatter":{"title":"PRG 패턴 (Post/Redirect/Get)"}}},{"node":{"id":"a76404d9-9edd-5175-8d95-bd2f476cdfbb","fields":{"slug":"/Python-venv-Windows/"},"frontmatter":{"title":"Python venv (Windows)"}}},{"node":{"id":"6065e14b-bb9f-532d-a34f-236409f4ea86","fields":{"slug":"/print와-pprint/"},"frontmatter":{"title":"print와 pprint"}}},{"node":{"id":"4ec48bde-bee2-5948-9f21-638952ab1af0","fields":{"slug":"/정규화와-역정규화/"},"frontmatter":{"title":"정규화와 역정규화"}}},{"node":{"id":"fee328a3-dfc2-5c47-8023-9b6685d6bc3a","fields":{"slug":"/트래픽-튜닝/"},"frontmatter":{"title":"트래픽 튜닝"}}},{"node":{"id":"a8b5dbc3-78fd-59b7-826a-a7915052f4dd","fields":{"slug":"/npx/"},"frontmatter":{"title":"npx"}}},{"node":{"id":"6a68ac7e-0292-5643-9d75-fdf9a57d32db","fields":{"slug":"/Branch/"},"frontmatter":{"title":"Branch"}}},{"node":{"id":"c44faec0-9520-54c4-80ae-be2c30cc098b","fields":{"slug":"/DataTable-클래스/"},"frontmatter":{"title":"DataTable 클래스"}}},{"node":{"id":"5207d586-fb17-555a-98df-511914e0e7de","fields":{"slug":"/Typescript-시작하기/"},"frontmatter":{"title":"Typescript 시작하기"}}},{"node":{"id":"37794a8d-0982-53e2-a47c-e85307bba925","fields":{"slug":"/gitignore/"},"frontmatter":{"title":"gitignore"}}},{"node":{"id":"afe6dd13-eac6-5d2f-89d0-a51cba20e3ac","fields":{"slug":"/Factory-Pattern/"},"frontmatter":{"title":"Factory Pattern"}}},{"node":{"id":"cfb70bd8-48d0-54d8-85b0-174bfc3b9913","fields":{"slug":"/네이밍-규칙naming-conventions/"},"frontmatter":{"title":"네이밍 규칙(naming conventions)"}}},{"node":{"id":"4a1706c9-ebf6-52b1-9b32-e6823b8ce2a3","fields":{"slug":"/AWS-API-Gateway/"},"frontmatter":{"title":"AWS API Gateway"}}},{"node":{"id":"66a2c53a-7aca-5455-8090-352c0114ad89","fields":{"slug":"/ColdStart/"},"frontmatter":{"title":"ColdStart"}}},{"node":{"id":"5453d052-2e7f-5829-8b85-d433ca451d68","fields":{"slug":"/Serverless/"},"frontmatter":{"title":"Serverless"}}},{"node":{"id":"249f2c76-8e1f-5c9b-b23c-5f2dfa0e6539","fields":{"slug":"/Dynamo-DB/"},"frontmatter":{"title":"Dynamo DB"}}},{"node":{"id":"861f8d0f-03a0-56d2-b5e0-1c6f7eb5885f","fields":{"slug":"/NoSQL/"},"frontmatter":{"title":"NoSQL"}}},{"node":{"id":"c7decc77-296b-594b-a67e-94a28644b631","fields":{"slug":"/REST/"},"frontmatter":{"title":"REST"}}},{"node":{"id":"2f7e8bc3-4cf6-57ec-9317-0f160a7d4df2","fields":{"slug":"/TypeError-non-default-argument-content-follows-default-argument/"},"frontmatter":{"title":"TypeError: non-default argument 'content' follows default argument"}}},{"node":{"id":"0147b10f-83b7-5583-b23b-04def80c0817","fields":{"slug":"/브랜치-관리-전략/"},"frontmatter":{"title":"브랜치 관리 전략"}}},{"node":{"id":"8af31d09-cd75-584c-bb2e-bcb44fd0ab07","fields":{"slug":"/Unit-Test단위-테스트/"},"frontmatter":{"title":"Unit Test(단위 테스트)"}}},{"node":{"id":"6624b432-dede-5d27-893c-216435f81dfc","fields":{"slug":"/__post_init__/"},"frontmatter":{"title":"__post_init__"}}},{"node":{"id":"c9205ad4-3b94-5f9b-9873-ceed541116b9","fields":{"slug":"/dataclass/"},"frontmatter":{"title":"dataclass"}}},{"node":{"id":"8e311167-515e-5479-806d-576655d5aa6d","fields":{"slug":"/FastAPI와-DDD/"},"frontmatter":{"title":"FastAPI와 DDD"}}},{"node":{"id":"80faec5b-ac3c-55f4-8278-c5df45eeaeee","fields":{"slug":"/vercel-배포-자동화/"},"frontmatter":{"title":"vercel 배포 자동화"}}},{"node":{"id":"a596c40a-9b38-51b3-83ba-4822bd6ad215","fields":{"slug":"/AWS-ECSElastic-Container-Service/"},"frontmatter":{"title":"AWS ECS(Elastic Container Service)"}}},{"node":{"id":"af893e8d-1d43-5da0-b92e-fca9abfbdaea","fields":{"slug":"/Blue-Green-Deploy-전략/"},"frontmatter":{"title":"Blue Green Deploy 전략"}}},{"node":{"id":"0f61c80f-0860-5374-9507-690750d8738d","fields":{"slug":"/CloudFront/"},"frontmatter":{"title":"CloudFront"}}},{"node":{"id":"da0900a9-d1a3-5f11-b1a7-c2b1b79a025b","fields":{"slug":"/Poetry/"},"frontmatter":{"title":"Poetry"}}},{"node":{"id":"496bf14d-cf6f-551c-968d-c356aea3d9b1","fields":{"slug":"/DynamoDB의-동시성-제어Concurrency-Control/"},"frontmatter":{"title":"DynamoDB의 동시성 제어(Concurrency Control)"}}},{"node":{"id":"6fcbdee7-120b-57bd-b0c2-4c046589430b","fields":{"slug":"/FastAPI/"},"frontmatter":{"title":"FastAPI"}}},{"node":{"id":"2e1a8c7e-a8ad-58ac-9795-449d177048c6","fields":{"slug":"/Pydantic-모델/"},"frontmatter":{"title":"Pydantic 모델"}}},{"node":{"id":"e967fbe2-df8c-5d69-b5d6-13133817266e","fields":{"slug":"/FastAPI의-데코레이터/"},"frontmatter":{"title":"FastAPI의 데코레이터"}}},{"node":{"id":"4a995071-315b-57e1-8b9f-d6caa89ec351","fields":{"slug":"/생성기generate-패턴/"},"frontmatter":{"title":"생성기(generate) 패턴"}}},{"node":{"id":"4bd6f525-f59f-5917-9c63-bfee49948344","fields":{"slug":"/FastAPI에서-데코레이터와-Dependency/"},"frontmatter":{"title":"FastAPI에서 데코레이터와 Dependency"}}},{"node":{"id":"c1d8f764-63e6-5920-af1d-cc6ed82cab31","fields":{"slug":"/FastAPI와-asyncio/"},"frontmatter":{"title":"FastAPI와 asyncio"}}},{"node":{"id":"100f4f92-fdaa-53c8-93e5-96509170e2f3","fields":{"slug":"/aiohttp/"},"frontmatter":{"title":"aiohttp"}}},{"node":{"id":"eb8cca17-daa2-5b06-806b-3f96b650e68e","fields":{"slug":"/단축어로-SLACK-프로필-변경하기/"},"frontmatter":{"title":"단축어로 SLACK 프로필 변경하기"}}},{"node":{"id":"3aa5fd9e-e7a6-5d5d-b388-cced68004144","fields":{"slug":"/PynamoDB와-boto3-PynamoDB의-커넥션/"},"frontmatter":{"title":"PynamoDB와 boto3, PynamoDB의 커넥션"}}},{"node":{"id":"79b9b7d1-4816-53bd-a9be-1a42a3addf69","fields":{"slug":"/FastAPI에서-Postgresql의-커넥션-관리/"},"frontmatter":{"title":"FastAPI에서 Postgresql의 커넥션 관리"}}},{"node":{"id":"9d31ab39-c391-5100-8b1a-57e082219f0f","fields":{"slug":"/Sqlalchemy-비동기-엔진에서의-Postgresql-Pooler/"},"frontmatter":{"title":"Sqlalchemy 비동기 엔진에서의 Postgresql Pooler"}}},{"node":{"id":"3c324741-c5af-5c92-a470-0093a3060c01","fields":{"slug":"/SqlAlchemy의-QueuePool/"},"frontmatter":{"title":"SqlAlchemy의 QueuePool"}}},{"node":{"id":"31479f72-375a-5d24-94d4-33e54c6d4b93","fields":{"slug":"/Pydantic-Model의-응용/"},"frontmatter":{"title":"Pydantic Model의 응용"}}},{"node":{"id":"280d0c1b-b14b-58e2-8adc-a140de967ea2","fields":{"slug":"/Union-Type/"},"frontmatter":{"title":"Union Type"}}},{"node":{"id":"e9509d5a-bdcd-5cf1-ac9f-75030f0bd9f7","fields":{"slug":"/우분투-용량-관리/"},"frontmatter":{"title":"우분투 용량 관리"}}},{"node":{"id":"b13d92a7-a846-5ceb-bf1c-8164da4ca0b9","fields":{"slug":"/Sqlalchemy에서의-트랜잭션-격리-수준-구현/"},"frontmatter":{"title":"Sqlalchemy에서의 트랜잭션 격리 수준 구현"}}},{"node":{"id":"770b4205-c82e-5645-b778-249d6eaa698e","fields":{"slug":"/트랜잭션-격리-수준Transaction-Isolation-Level/"},"frontmatter":{"title":"트랜잭션 격리 수준(Transaction Isolation Level)"}}},{"node":{"id":"b90cac43-c3fb-5909-a246-c732a3e8654e","fields":{"slug":"/PostgreSQL-Advisory-Locks-트랜잭션-레벨에서-구현/"},"frontmatter":{"title":"PostgreSQL Advisory Locks 트랜잭션 레벨에서 구현"}}},{"node":{"id":"c714646b-b50c-5276-ae7c-48259930dcf2","fields":{"slug":"/Sqlalchemy의-func/"},"frontmatter":{"title":"Sqlalchemy의 func"}}},{"node":{"id":"f5517be6-c8c2-576d-a17d-33f22f4c9bf7","fields":{"slug":"/동시성-제어문제-해결/"},"frontmatter":{"title":"동시성 제어문제 해결"}}},{"node":{"id":"6dd955b3-f181-577e-ac9a-ca78332aabd9","fields":{"slug":"/vscode-quick-Suggestions/"},"frontmatter":{"title":"vscode-quick Suggestions"}}},{"node":{"id":"048cbee4-4ec0-520d-abe1-1327446f88cb","fields":{"slug":"/NotionAPI를-활용한-자동-포스팅10/"},"frontmatter":{"title":"NotionAPI를 활용한 자동 포스팅(10)"}}},{"node":{"id":"2a57e1ce-076a-5342-b603-cd621e327fc3","fields":{"slug":"/Typescript의-열거형/"},"frontmatter":{"title":"Typescript의 열거형"}}}]},"previous":{"fields":{"slug":"/Pydantic-모델/"},"frontmatter":{"title":"Pydantic 모델"}},"next":{"fields":{"slug":"/생성기generate-패턴/"},"frontmatter":{"title":"생성기(generate) 패턴"}}},"pageContext":{"id":"e967fbe2-df8c-5d69-b5d6-13133817266e","series":null,"previousPostId":"2e1a8c7e-a8ad-58ac-9795-449d177048c6","nextPostId":"4a995071-315b-57e1-8b9f-d6caa89ec351"}},"staticQueryHashes":[],"slicesMap":{}}